{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * The errors for the conference.\r\n */\r\n\r\n/**\r\n * Indicates that client must be authenticated to create the conference.\r\n */\r\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\r\n\r\n/**\r\n * Indicates that chat error occurred.\r\n */\r\nexport const CHAT_ERROR = 'conference.chatError';\r\n\r\n/**\r\n * Indicates that conference has been destroyed.\r\n */\r\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\r\n\r\n/**\r\n * Indicates that max users limit has been reached.\r\n */\r\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\r\n\r\n/**\r\n * Indicates that a connection error occurred when trying to join a conference.\r\n */\r\nexport const CONNECTION_ERROR = 'conference.connectionError';\r\n\r\n/**\r\n * Indicates that the client has been forced to restart by jicofo when the\r\n * conference was migrated from one bridge to another.\r\n */\r\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference.\r\n */\r\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference, only approved members are allowed to join.\r\n */\r\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\r\n\r\n/**\r\n * Indicates that a connection error is due to denied access to the room,\r\n * occurred after joining a lobby room and access is denied by the room moderators.\r\n */\r\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\r\n\r\n/**\r\n * Indicates that focus error happened.\r\n */\r\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\r\n\r\n/**\r\n * Indicates that focus left the conference.\r\n */\r\nexport const FOCUS_LEFT = 'conference.focusLeft';\r\n\r\n/**\r\n * Indicates that graceful shutdown happened.\r\n */\r\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\r\n\r\n/**\r\n * Indicates that the media connection has failed.\r\n */\r\nexport const ICE_FAILED = 'conference.iceFailed';\r\n\r\n/**\r\n * Indicates that the versions of the server side components are incompatible\r\n * with the client side.\r\n */\r\nexport const INCOMPATIBLE_SERVER_VERSIONS\r\n    = 'conference.incompatible_server_versions';\r\n\r\n/**\r\n * Indicates that offer/answer had failed.\r\n */\r\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\r\n\r\n/**\r\n * Indicates that password cannot be set for this conference.\r\n */\r\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\r\n\r\n/**\r\n * Indicates that reservation system returned error.\r\n */\r\nexport const RESERVATION_ERROR = 'conference.reservationError';\r\n\r\n/**\r\n * Indicates that there is no available videobridge.\r\n */\r\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\r\n","/**\r\n * The events for the conference.\r\n */\r\n\r\n/**\r\n * Event indicates that the current conference audio input switched between audio\r\n * input states,i.e. with or without audio input.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\r\n\r\n/**\r\n * Indicates that authentication status changed.\r\n */\r\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\r\n\r\n/**\r\n * Fired just before the statistics module is disposed and it's the last chance\r\n * to submit some logs to the statistics service (ex. CallStats if enabled),\r\n * before it's disconnected.\r\n */\r\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\r\n\r\n/**\r\n * Indicates that an error occured.\r\n */\r\nexport const CONFERENCE_ERROR = 'conference.error';\r\n\r\n/**\r\n * Indicates that conference failed.\r\n */\r\nexport const CONFERENCE_FAILED = 'conference.failed';\r\n\r\n/**\r\n * Indicates that conference has been joined. The event does NOT provide any\r\n * parameters to its listeners.\r\n */\r\nexport const CONFERENCE_JOINED = 'conference.joined';\r\n\r\n/**\r\n * Indicates that conference has been left.\r\n */\r\nexport const CONFERENCE_LEFT = 'conference.left';\r\n\r\n/**\r\n * Indicates that the conference unique identifier has been set.\r\n */\r\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been established\r\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\r\n * state for the first time.\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been interrupted for some\r\n * reason.\r\n * XXX This is currently fired when the *ICE* connection is interrupted.\r\n */\r\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been restored.\r\n * XXX This is currently fired when the *ICE* connection is restored.\r\n */\r\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\r\n\r\n/**\r\n * A connection to the video bridge's data channel has been established.\r\n */\r\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\r\n\r\n/**\r\n * A user has changed it display name\r\n */\r\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\r\n\r\n/**\r\n * The dominant speaker was changed.\r\n */\r\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\r\n\r\n/**\r\n * UTC conference timestamp when first participant joined.\r\n */\r\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\r\n\r\n/**\r\n * Indicates that a message from another participant is received on data\r\n * channel.\r\n */\r\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\r\n\r\n/**\r\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\r\n */\r\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\r\n\r\n/**\r\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\r\n *\r\n * Event emitted when conference transits, between one to one and multiparty JVB\r\n * conference. If the conference switches to P2P it's neither one to one nor\r\n * a multiparty JVB conference, but P2P (the status argument of this event will\r\n * be <tt>false</tt>).\r\n *\r\n * The first argument is a boolean which carries the previous value and\r\n * the seconds argument is a boolean with the new status. The event is emitted\r\n * only if the previous and the new values are different.\r\n *\r\n * @type {string}\r\n */\r\nexport const JVB121_STATUS = 'conference.jvb121Status';\r\n\r\n/**\r\n * You are kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n */\r\nexport const KICKED = 'conference.kicked';\r\n\r\n/**\r\n * Participant was kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n * @param {JitsiParticipant} the participant that was kicked.\r\n */\r\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\r\n\r\n/**\r\n * The Last N set is changed.\r\n *\r\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\r\n * which are leaving Last N\r\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\r\n * which are entering Last N\r\n */\r\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\r\n\r\n/**\r\n * Indicates that the room has been locked or unlocked.\r\n */\r\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\r\n\r\n/**\r\n * Indicates that the region of the media server (jitsi-videobridge) that we\r\n * are connected to changed (or was initially set).\r\n * @type {string} the region.\r\n */\r\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\r\n\r\n/**\r\n * An event(library-private) fired when a new media session is added to the conference.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\r\n\r\n/**\r\n * An event(library-private) fired when the conference switches the currently active media session.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\r\n\r\n/**\r\n * Indicates that the conference had changed to members only enabled/disabled.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running in members only mode.\r\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\r\n */\r\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\r\n\r\n/**\r\n * New text message was received.\r\n */\r\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\r\n\r\n/**\r\n * Event indicates that the current selected input device has no signal\r\n */\r\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\r\n\r\n/**\r\n * Event indicates that the current microphone used by the conference is noisy.\r\n */\r\nexport const NOISY_MIC = 'conference.noisy_mic';\r\n\r\n/**\r\n * Indicates that a message from the local user or from the Prosody backend\r\n * was received on the data channel.\r\n */\r\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\r\n\r\n/**\r\n * New private text message was received.\r\n */\r\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\r\n\r\n/**\r\n * Event fired when JVB sends notification about interrupted/restored user's\r\n * ICE connection status or we detect local problem with the video track.\r\n * First argument is the ID of the participant and\r\n * the seconds is a string indicating if the connection is currently\r\n * - active - the connection is active\r\n * - inactive - the connection is inactive, was intentionally interrupted by\r\n * the bridge\r\n * - interrupted - a network problem occurred\r\n * - restoring - the connection was inactive and is restoring now\r\n *\r\n * The current status value can be obtained by calling\r\n * JitsiParticipant.getConnectionStatus().\r\n */\r\nexport const PARTICIPANT_CONN_STATUS_CHANGED\r\n    = 'conference.participant_conn_status_changed';\r\n\r\n/**\r\n * Indicates that the features of the participant has been changed.\r\n */\r\nexport const PARTCIPANT_FEATURES_CHANGED\r\n    = 'conference.partcipant_features_changed';\r\n\r\n/**\r\n * Indicates that a the value of a specific property of a specific participant\r\n * has changed.\r\n */\r\nexport const PARTICIPANT_PROPERTY_CHANGED\r\n    = 'conference.participant_property_changed';\r\n\r\n/**\r\n * Indicates that the conference has switched between JVB and P2P connections.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running on the P2P connection.\r\n */\r\nexport const P2P_STATUS = 'conference.p2pStatus';\r\n\r\n/**\r\n * Indicates that phone number changed.\r\n */\r\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\r\n\r\n/**\r\n * The conference properties changed.\r\n * @type {string}\r\n */\r\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\r\n\r\n/**\r\n * Indicates that recording state changed.\r\n */\r\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW state changed.\r\n * @param {VideoSIPGWConstants} status.\r\n */\r\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\r\n    = 'conference.videoSIPGWAvailabilityChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW Session state changed.\r\n * @param {options} event - {\r\n *     {string} address,\r\n *     {VideoSIPGWConstants} oldState,\r\n *     {VideoSIPGWConstants} newState,\r\n *     {string} displayName}\r\n * }.\r\n */\r\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\r\n    = 'conference.videoSIPGWSessionStateChanged';\r\n\r\n/**\r\n * Indicates that start muted settings changed.\r\n */\r\nexport const START_MUTED_POLICY_CHANGED\r\n    = 'conference.start_muted_policy_changed';\r\n\r\n/**\r\n * Indicates that the local user has started muted.\r\n */\r\nexport const STARTED_MUTED = 'conference.started_muted';\r\n\r\n/**\r\n * Indicates that subject of the conference has changed.\r\n */\r\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\r\n\r\n/**\r\n * Event indicates that local user is talking while he muted himself\r\n */\r\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\r\n\r\n/**\r\n * A new media track was added to the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the added JitsiTrack\r\n */\r\nexport const TRACK_ADDED = 'conference.trackAdded';\r\n\r\n/**\r\n * Audio levels of a media track ( attached to the conference) was changed.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\r\n\r\n/**\r\n * A media track ( attached to the conference) mute status was changed.\r\n * @param {JitsiParticipant|null} the participant that initiated the mute\r\n * if it is a remote mute.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\r\n\r\n/**\r\n * The media track was removed from the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the removed JitsiTrack\r\n */\r\nexport const TRACK_REMOVED = 'conference.trackRemoved';\r\n\r\n/**\r\n * Notifies for transcription status changes. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {String} status - The new status.\r\n */\r\nexport const TRANSCRIPTION_STATUS_CHANGED\r\n    = 'conference.transcriptionStatusChanged';\r\n\r\n\r\n/**\r\n * A new user joined the conference.\r\n */\r\nexport const USER_JOINED = 'conference.userJoined';\r\n\r\n/**\r\n * A user has left the conference.\r\n */\r\nexport const USER_LEFT = 'conference.userLeft';\r\n\r\n/**\r\n * User role changed.\r\n */\r\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\r\n\r\n/**\r\n * User status changed.\r\n */\r\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\r\n\r\n/**\r\n * Event indicates that the bot participant type changed.\r\n */\r\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\r\n\r\n/**\r\n * A new user joined the lobby room.\r\n */\r\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\r\n\r\n/**\r\n * A user from the lobby room has been update.\r\n */\r\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\r\n\r\n/**\r\n * A user left the lobby room.\r\n */\r\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\r\n\r\n/**\r\n * The local participant was approved to be able to unmute.\r\n * @param {options} event - {\r\n *     {MediaType} mediaType\r\n * }.\r\n */\r\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\r\n\r\n/**\r\n * The local participant was blocked to be able to unmute.\r\n * @param {options} event - {\r\n *     {MediaType} mediaType\r\n * }.\r\n */\r\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\r\n\r\n/**\r\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\r\n * or undefined if that participant has left the meeting.\r\n *\r\n * @param {options} event - {\r\n *     {boolean} enabled,\r\n *     {MediaType} mediaType,\r\n *     {JitsiParticipant} actor\r\n * }.\r\n */\r\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\r\n\r\n/**\r\n * AV Moderation, report for user being approved to unmute.\r\n * @param {options} event - {\r\n *     {JitsiParticipant} participant,\r\n *     {MediaType} mediaType\r\n * }.\r\n */\r\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\r\n\r\n/**\r\n * AV Moderation, report for user being blocked to unmute.\r\n * @param {options} event - {\r\n *     {JitsiParticipant} participant,\r\n *     {MediaType} mediaType\r\n * }.\r\n */\r\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\r\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\r\n\r\n/**\r\n * The number of remote speakers for which the audio levels will be calculated using\r\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\r\n * is known to take longer to execute when there are many audio receivers.\r\n */\r\nexport const SPEAKERS_AUDIO_LEVELS = 5;\r\n","/**\r\n * The errors for the JitsiTrack objects.\r\n */\r\n\r\n/**\r\n * An error which indicates that some of requested constraints in\r\n * getUserMedia call were not satisfied.\r\n */\r\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\r\n\r\n/**\r\n * A generic error which indicates an error occurred while selecting\r\n * a DesktopCapturerSource from the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_ERROR\r\n    = 'gum.electron_desktop_picker_error';\r\n\r\n/**\r\n * An error which indicates a custom desktop picker could not be detected\r\n * for the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\r\n    = 'gum.electron_desktop_picker_not_found';\r\n\r\n/**\r\n * Generic getUserMedia error.\r\n */\r\nexport const GENERAL = 'gum.general';\r\n\r\n/**\r\n * An error which indicates that requested device was not found.\r\n */\r\nexport const NOT_FOUND = 'gum.not_found';\r\n\r\n/**\r\n * An error which indicates that user denied permission to share requested\r\n * device.\r\n */\r\nexport const PERMISSION_DENIED = 'gum.permission_denied';\r\n\r\n/**\r\n * Generic error for screensharing failure.\r\n */\r\nexport const SCREENSHARING_GENERIC_ERROR\r\n    = 'gum.screensharing_generic_error';\r\n\r\n/**\r\n * An error which indicates that user canceled screen sharing window\r\n * selection dialog.\r\n */\r\nexport const SCREENSHARING_USER_CANCELED\r\n    = 'gum.screensharing_user_canceled';\r\n\r\n\r\n/**\r\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\r\n */\r\nexport const TIMEOUT = 'gum.timeout';\r\n\r\n/**\r\n * An error which indicates that track has been already disposed and cannot\r\n * be longer used.\r\n */\r\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\r\n\r\n/**\r\n * An error which indicates that track has no MediaStream associated.\r\n */\r\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\r\n\r\n/**\r\n * An error which indicates that requested video resolution is not supported\r\n * by a webcam.\r\n */\r\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\r\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\r\n\r\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\r\n\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\r\n    = 'Video resolution is not supported: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\r\n    = 'User canceled screen sharing prompt';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\r\n    = 'Unknown error from screensharing';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\r\n    = 'Unkown error from desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\r\n    = 'Failed to detect desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\r\n    = 'Generic getUserMedia error';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\r\n    = 'User denied permission to use device(s): ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\r\n    = 'Requested device(s) was/were not found: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\r\n    = 'Constraint could not be satisfied: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\r\n    = 'Could not start media source. Timeout occured!';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\r\n    = 'Track has been already disposed';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\r\n    = 'Track does not have an associated Media Stream';\r\n\r\n// FIXME: Using prototype inheritance because otherwise instanceof is not\r\n// working properly (see https://github.com/babel/babel/issues/3083)\r\n\r\n/**\r\n *\r\n * Represents an error that occurred to a JitsiTrack. Can represent various\r\n * types of errors. For error descriptions (@see JitsiTrackErrors).\r\n *\r\n * @extends Error\r\n *\r\n *\r\n * @constructor\r\n * @param {Object|string} error - error object or error name\r\n * @param {Object|string} (options) - getUserMedia constraints object or\r\n * error message\r\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\r\n * list of getUserMedia requested devices\r\n */\r\nfunction JitsiTrackError(error, options, devices) {\r\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\r\n        /**\r\n         * Additional information about original getUserMedia error\r\n         * and constraints.\r\n         * @type {{\r\n         *     error: Object,\r\n         *     constraints: Object,\r\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\r\n         * }}\r\n         */\r\n        this.gum = {\r\n            error,\r\n            constraints: options,\r\n            devices: devices && Array.isArray(devices)\r\n                ? devices.slice(0)\r\n                : undefined\r\n        };\r\n\r\n        switch (error.name) {\r\n        case 'NotAllowedError':\r\n        case 'PermissionDeniedError':\r\n        case 'SecurityError':\r\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'DevicesNotFoundError':\r\n        case 'NotFoundError':\r\n            this.name = JitsiTrackErrors.NOT_FOUND;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'ConstraintNotSatisfiedError':\r\n        case 'OverconstrainedError': {\r\n            const constraintName = error.constraintName || error.constraint;\r\n\r\n            // we treat deviceId as unsupported resolution, as we want to\r\n            // retry and finally if everything fails to remove deviceId from\r\n            // mandatory constraints\r\n            if (options\r\n                    && options.video\r\n                    && (!devices || devices.indexOf('video') > -1)\r\n                    && (constraintName === 'minWidth'\r\n                        || constraintName === 'maxWidth'\r\n                        || constraintName === 'minHeight'\r\n                        || constraintName === 'maxHeight'\r\n                        || constraintName === 'width'\r\n                        || constraintName === 'height'\r\n                        || constraintName === 'deviceId')) {\r\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + getResolutionFromFailedConstraint(\r\n                            constraintName,\r\n                            options);\r\n            } else {\r\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + error.constraintName;\r\n            }\r\n            break;\r\n        }\r\n\r\n        default:\r\n            this.name = JitsiTrackErrors.GENERAL;\r\n            this.message\r\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\r\n            break;\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\r\n            this.name = error;\r\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\r\n        } else {\r\n            // this is some generic error that do not fit any of our\r\n            // pre-defined errors, so don't give it any specific name, just\r\n            // store message\r\n            this.message = error;\r\n        }\r\n    } else {\r\n        throw new Error('Invalid arguments');\r\n    }\r\n\r\n    this.stack = error.stack || (new Error()).stack;\r\n}\r\n\r\nJitsiTrackError.prototype = Object.create(Error.prototype);\r\nJitsiTrackError.prototype.constructor = JitsiTrackError;\r\n\r\n/**\r\n * Gets failed resolution constraint from corresponding object.\r\n * @param {string} failedConstraintName\r\n * @param {Object} constraints\r\n * @returns {string|number}\r\n */\r\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\r\n    if (constraints && constraints.video && constraints.video.mandatory) {\r\n        switch (failedConstraintName) {\r\n        case 'width':\r\n            return constraints.video.mandatory.minWidth;\r\n        case 'height':\r\n            return constraints.video.mandatory.minHeight;\r\n        default:\r\n            return constraints.video.mandatory[failedConstraintName] || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\nexport default JitsiTrackError;\r\n","/**\r\n * This class exports constants and factory methods related to the analytics\r\n * API provided by AnalyticsAdapter. In order for entries in a database to be\r\n * somewhat easily traceable back to the code which produced them, events sent\r\n * through analytics should be defined here.\r\n *\r\n * Since the AnalyticsAdapter API can be used in different ways, for some events\r\n * it is more convenient to just define the event name as a constant. For other\r\n * events a factory function is easier.\r\n *\r\n * A general approach for adding a new event:\r\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\r\n * operational.\r\n * 2. Determine whether the event is related to other existing events, and\r\n * which fields are desired to be set: name, action, actionSubject, source.\r\n * 3. If the name is sufficient (the other fields are not important), use a\r\n * constant. Otherwise use a factory function.\r\n *\r\n * Note that the AnalyticsAdapter uses the events passed to its functions for\r\n * its own purposes, and might modify them. Because of this, factory functions\r\n * should create new objects.\r\n *\r\n */\r\n\r\n/**\r\n * The constant which identifies an event of type \"operational\".\r\n * @type {string}\r\n */\r\nexport const TYPE_OPERATIONAL = 'operational';\r\n\r\n/**\r\n * The constant which identifies an event of type \"page\".\r\n * @type {string}\r\n */\r\nexport const TYPE_PAGE = 'page';\r\n\r\n/**\r\n * The constant which identifies an event of type \"track\".\r\n * @type {string}\r\n */\r\nexport const TYPE_TRACK = 'track';\r\n\r\n/**\r\n * The constant which identifies an event of type \"ui\".\r\n * @type {string}\r\n */\r\nexport const TYPE_UI = 'ui';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that the Jingle session\r\n * was restarted (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_RESTART = 'restart';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-accept\r\n * timed out (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * not arrived within a timeout (the value is specified in\r\n * the {@link JingleSessionPC}.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\r\n\r\n/**\r\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\r\n * the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_RECEIVED\r\n    = 'transport-replace.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * succeeded (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_SUCCESS\r\n    = 'transport-replace.success';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\r\n * because the mandatory requirements were not met.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_DECLINED = 'decline';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a connection was\r\n * established (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_ESTABLISHED = 'established';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that something failed.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_FAILED = 'failed';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a switch to\r\n * jitsi-videobridge happened.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\r\n\r\n/**\r\n * The name of an event which indicates an available device. We send one such\r\n * event per available device once when the available devices are first known,\r\n * and every time that they change\r\n * @type {string}\r\n *\r\n * Properties:\r\n *      audio_input_device_count: the number of audio input devices available at\r\n *          the time the event was sent.\r\n *      audio_output_device_count: the number of audio output devices available\r\n *          at the time the event was sent.\r\n *      video_input_device_count: the number of video input devices available at\r\n *          the time the event was sent.\r\n *      video_output_device_count: the number of video output devices available\r\n *          at the time the event was sent.\r\n *      device_id: an identifier of the device described in this event.\r\n *      device_group_id:\r\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\r\n *          'videooutput'.\r\n *      device_label: a string which describes the device.\r\n */\r\nexport const AVAILABLE_DEVICE = 'available.device';\r\n\r\n/**\r\n * This appears to be fired only in certain cases when the XMPP connection\r\n * disconnects (and it was intentional?). It is currently never observed to\r\n * fire in production.\r\n *\r\n * TODO: document\r\n *\r\n * Properties:\r\n *      message: an error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\r\n\r\n/**\r\n * Indicates that the user of the application provided feedback in terms of a\r\n * rating (an integer from 1 to 5) and an optional comment.\r\n * Properties:\r\n *      value: the user's rating (an integer from 1 to 5)\r\n *      comment: the user's comment\r\n */\r\nexport const FEEDBACK = 'feedback';\r\n\r\n/**\r\n * Indicates the duration of a particular phase of the ICE connectivity\r\n * establishment.\r\n *\r\n * Properties:\r\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\r\n *      value: the duration in milliseconds.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      initiator: whether the local Jingle peer is the initiator or responder\r\n *          in the Jingle session. XXX we probably actually care about the ICE\r\n *          role (controlling vs controlled), and we assume that this correlates\r\n *          with the Jingle initiator.\r\n */\r\nexport const ICE_DURATION = 'ice.duration';\r\n\r\n/**\r\n * Indicates the difference in milliseconds between the ICE establishment time\r\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\r\n * P2P connection took 10ms more than JVB connection to establish).\r\n *\r\n * Properties:\r\n *      value: the difference in establishment durations in milliseconds.\r\n *\r\n */\r\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\r\n    = 'ice.establishment.duration.diff';\r\n\r\n/**\r\n * Indicates that the ICE state has changed.\r\n *\r\n * Properties:\r\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\r\n *          'completed', etc).\r\n *      value: the time in milliseconds (as reported by\r\n *          window.performance.now()) that the state change occurred.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      signalingState: The signaling state of the associated PeerConnection\r\n *      reconnect: whether the associated Jingle session is in the process of\r\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\r\n */\r\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\r\n\r\n/**\r\n * Indicates that no bytes have been sent for the track.\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n */\r\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\r\n\r\n/**\r\n * Indicates that a track was unmuted (?).\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      trackType: the type of the track ('local' or 'remote').\r\n *      value: TODO: document\r\n */\r\nexport const TRACK_UNMUTED = 'track.unmuted';\r\n\r\n/**\r\n * Creates an operational event which indicates that we have received a\r\n * \"bridge down\" event from jicofo.\r\n */\r\nexport const createBridgeDownEvent = function() {\r\n    const bridgeDown = 'bridge.down';\r\n\r\n    return {\r\n        action: bridgeDown,\r\n        actionSubject: bridgeDown,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the XMPP connection failed\r\n * @param errorType TODO\r\n * @param errorMessage TODO\r\n * @param detail connection failed details.\r\n */\r\nexport const createConnectionFailedEvent\r\n    = function(errorType, errorMessage, details) {\r\n        return {\r\n            type: TYPE_OPERATIONAL,\r\n            action: 'connection.failed',\r\n            attributes: {\r\n                'error_type': errorType,\r\n                'error_message': errorMessage,\r\n                ...details\r\n            }\r\n        };\r\n    };\r\n\r\n/**\r\n * Creates a conference event.\r\n *\r\n * @param {string} action - The action of the event.\r\n * @param {Object} attributes - The attributes to be added to the event.\r\n * @returns {{type: string, source: string, action: string, attributes: object}}\r\n */\r\nexport function createConferenceEvent(action, attributes) {\r\n    return {\r\n        action,\r\n        attributes,\r\n        source: 'conference',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an operational event which indicates that a particular connection\r\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\r\n * state).\r\n *\r\n * @param stage the stage which was reached\r\n * @param attributes additional attributes for the event. This should be an\r\n * object with a \"value\" property indicating a timestamp in milliseconds\r\n * relative to the beginning of the document's lifetime.\r\n *\r\n */\r\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\r\n    const action = 'connection.stage.reached';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: stage,\r\n        attributes,\r\n        source: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an operational event for the end-to-end round trip time to a\r\n * specific remote participant.\r\n * @param participantId the ID of the remote participant.\r\n * @param region the region of the remote participant\r\n * @param rtt the rtt\r\n */\r\nexport const createE2eRttEvent = function(participantId, region, rtt) {\r\n    const attributes = {\r\n        'participant_id': participantId,\r\n        region,\r\n        rtt\r\n    };\r\n\r\n    return {\r\n        attributes,\r\n        name: 'e2e_rtt',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the focus has left the MUC.\r\n */\r\nexport const createFocusLeftEvent = function() {\r\n    const action = 'focus.left';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to a getUserMedia call.\r\n *\r\n * @param action the type of the result that the event represents: 'error',\r\n * 'success', 'warning', etc.\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'get.user.media',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to remote participant connection status changes.\r\n *\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\r\n    const action = 'duration';\r\n\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'peer.conn.status',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a Jingle-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createJingleEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'jingle',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that a local track was not able to read\r\n * data from its source (a camera or a microphone).\r\n *\r\n * @param mediaType {String} the media type of the local track ('audio' or\r\n * 'video').\r\n */\r\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\r\n    return {\r\n        attributes: {\r\n            'media_type': mediaType,\r\n            value\r\n        },\r\n        action: 'track.no.data.from.source',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a p2p-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createP2PEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'p2p',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Indicates that we received a remote command to mute.\r\n */\r\nexport const createRemotelyMutedEvent = function(mediaType) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'remotely.muted',\r\n        mediaType\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains RTP statistics such as RTT and packet loss.\r\n *\r\n * All average RTP stats are currently reported under 1 event name, but with\r\n * different properties that allows to distinguish between a P2P call, a\r\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\r\n *\r\n * The structure of the event is:\r\n *\r\n * {\r\n *      p2p: true,\r\n *      conferenceSize: 2,\r\n *      localCandidateType: \"relay\",\r\n *      remoteCandidateType: \"relay\",\r\n *      transportType: \"udp\",\r\n *\r\n *      // Average RTT of 200ms\r\n *      \"rtt.avg\": 200,\r\n *      \"rtt.samples\": \"[100, 200, 300]\",\r\n *\r\n *      // Average packet loss of 10%\r\n *      \"packet.loss.avg\": 10,\r\n *      \"packet.loss.samples\": '[5, 10, 15]'\r\n *\r\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\r\n *      // The e2e RTT through jvb is 15ms shorter:\r\n *      \"rtt.diff\": 15,\r\n *\r\n *      // End-to-end RTT through JVB is ms.\r\n *      \"end2end.rtt.avg\" = 100\r\n * }\r\n *\r\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\r\n * and not JSON arrays, as events' attributes can not be nested. The samples are\r\n * currently included for debug purposes only and can be removed anytime soon\r\n * from the structure.\r\n *\r\n * Also note that not all of values are present in each event, as values are\r\n * obtained and calculated as part of different process/event pipe. For example\r\n * {@link ConnectionAvgStats} instances are doing the reports for each\r\n * {@link TraceablePeerConnection} and work independently from the main stats\r\n * pipe.\r\n */\r\nexport const createRtpStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtp.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the round trip time (RTT) to a set of\r\n * regions.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createRttByRegionEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtt.by.region',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the local and remote ICE candidate types\r\n * for the transport that is currently selected.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createTransportStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'transport.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\r\n * the local audio levels and the remote audio levels that triggered the event).\r\n *\r\n * @param {string} userID - The user id of the affected participant.\r\n * @param {*} localAudioLevels - The local audio levels.\r\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\r\n */\r\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'audio.output.problem',\r\n        attributes: {\r\n            userID,\r\n            localAudioLevels,\r\n            remoteAudioLevels\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an event which contains an information related to the bridge channel close event.\r\n *\r\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\r\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\r\n */\r\nexport const createBridgeChannelClosedEvent = function(code, reason) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'bridge-channel.error',\r\n        attributes: {\r\n            code,\r\n            reason\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates the Time To First Media (TTFM).\r\n * It is measured in milliseconds relative to the beginning of the document's\r\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\r\n * the following:\r\n * 1. The delay due to getUserMedia()\r\n * 2. The period between the MUC being joined and the reception of the Jingle\r\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\r\n * session until there are at least 2 participants in the room.\r\n *\r\n * @param attributes the attributes to add to the event. Currently used fields:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      muted: whether the track has ever been muted (?)\r\n *      value: the TTMF in milliseconds.\r\n */\r\nexport const createTtfmEvent = function(attributes) {\r\n    return createConnectionStageReachedEvent('ttfm', attributes);\r\n};\r\n","/**\r\n * Notifies about audio level in RTP statistics by SSRC.\r\n *\r\n * @param ssrc - The synchronization source identifier (SSRC) of the\r\n * endpoint/participant whose audio level is being reported.\r\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\r\n * RTP statistics.\r\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\r\n * local endpoint/participant; otherwise, <tt>false</tt>.\r\n */\r\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\r\n\r\n/**\r\n * An event fired just before the statistics module gets disposes and it's\r\n * the last chance to submit some logs that will end up in stats services like\r\n * CallStats (if enabled).\r\n */\r\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\r\n\r\n/**\r\n * An event carrying all statistics by ssrc.\r\n */\r\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\r\n\r\n/**\r\n * An event carrying connection statistics.\r\n *\r\n * @param {object} connectionStats - The connection statistics carried by the\r\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\r\n * <tt>resolution</tt>, and <tt>transport</tt>.\r\n */\r\nexport const CONNECTION_STATS = 'statistics.connectionstats';\r\n\r\n/**\r\n * An event carrying performance stats.\r\n */\r\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\r\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\r\nconst MIN_REQUIRED_CHROME_VERSION = 72;\r\n\r\n// TODO: Move this code to js-utils.\r\n\r\n// NOTE: Now we are extending BrowserDetection in order to preserve\r\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\r\n// and BrowserDetection as separate objects in future.\r\n\r\n/**\r\n * Implements browser capabilities for lib-jitsi-meet.\r\n */\r\nexport default class BrowserCapabilities extends BrowserDetection {\r\n    /**\r\n     * Creates new BrowserCapabilities instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        logger.info(\r\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\r\n    }\r\n\r\n    /**\r\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\r\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\r\n     * off the camera device).\r\n     * @return {boolean} <tt>true</tt> if the current browser supports this\r\n     * strategy or <tt>false</tt> otherwise.\r\n     */\r\n    doesVideoMuteByStreamRemove() {\r\n        return this.isChromiumBased() || this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\r\n     * but doesn't identify as Chrome.\r\n     *\r\n     * This includes the following browsers:\r\n     * - Chrome and Chromium.\r\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\r\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\r\n     *   and NW.JS.\r\n     * This excludes\r\n     * - Chrome on iOS since it uses WKWebView.\r\n     */\r\n    isChromiumBased() {\r\n        return (this.isChrome()\r\n            || this.isElectron()\r\n            || this.isNWJS()\r\n            || this.isOpera())\r\n            && !this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current platform is iOS.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isIosBrowser() {\r\n        const { userAgent, maxTouchPoints, platform } = navigator;\r\n\r\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\r\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is WebKit based. It's either\r\n     * Safari or uses WebKit as its engine.\r\n     *\r\n     * This includes Chrome and Firefox on iOS\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isWebKitBased() {\r\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n        return this._bowser.isEngine('webkit')\r\n            && typeof navigator.mediaDevices !== 'undefined'\r\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\r\n            && typeof window.RTCRtpTransceiver !== 'undefined'\r\n            // eslint-disable-next-line no-undef\r\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks whether current running context is a Trusted Web Application.\r\n     *\r\n     * @returns {boolean} Whether the current context is a TWA.\r\n     */\r\n    isTwa() {\r\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is supported.\r\n     *\r\n     * @returns {boolean} true if the browser is supported, false otherwise.\r\n     */\r\n    isSupported() {\r\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\r\n            || this.isFirefox()\r\n            || this.isReactNative()\r\n            || this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current environment needs a user interaction\r\n     * with the page before any unmute can occur.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isUserInteractionRequiredForUnmute() {\r\n        return this.isFirefox() && this.isVersionLessThan('68');\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\r\n     * user's connection is interrupted and the video stops playback.\r\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\r\n     * otherwise.\r\n     */\r\n    supportsVideoMuteOnConnInterrupted() {\r\n        return this.isChromiumBased() || this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports upload and download bandwidth\r\n     * statistics.\r\n     * @return {boolean}\r\n     */\r\n    supportsBandwidthStatistics() {\r\n        // FIXME bandwidth stats are currently not implemented for FF on our\r\n        // side, but not sure if not possible ?\r\n        return !this.isFirefox() && !this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports setting codec preferences on the transceiver.\r\n     * @returns {boolean}\r\n     */\r\n    supportsCodecPreferences() {\r\n        return Boolean(window.RTCRtpTransceiver\r\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\r\n            && window.RTCRtpReceiver\r\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\r\n\r\n            // this is not working on Safari because of the following bug\r\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\r\n            && !this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser support the device change event.\r\n     * @return {boolean}\r\n     */\r\n    supportsDeviceChangeEvent() {\r\n        return navigator.mediaDevices\r\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\r\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports RTT statistics for srflx local\r\n     * candidates through the legacy getStats() API.\r\n     */\r\n    supportsLocalCandidateRttStatistics() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports the Long Tasks API that lets us observe\r\n     * performance measurement events and be notified of tasks that take longer than\r\n     * 50ms to execute on the main thread.\r\n     */\r\n    supportsPerformanceObserver() {\r\n        return typeof window.PerformanceObserver !== 'undefined'\r\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports audio level stats on the receivers.\r\n     */\r\n    supportsReceiverStats() {\r\n        return typeof window.RTCRtpReceiver !== 'undefined'\r\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\r\n\r\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\r\n            // remote audio tracks.\r\n            && !this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports round trip time statistics for\r\n     * the ICE candidate pair.\r\n     * @return {boolean}\r\n     */\r\n    supportsRTTStatistics() {\r\n        // Firefox does not seem to report RTT for ICE candidate pair:\r\n        // eslint-disable-next-line max-len\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\r\n        // It does report mozRTT for RTP streams, but at the time of this\r\n        // writing it's value does not make sense most of the time\r\n        // (is reported as 1):\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\r\n        // For Chrome and others we rely on 'googRtt'.\r\n        return !this.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses SDP munging for turning on simulcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesSdpMungingForSimulcast() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesAdapter() {\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\r\n     * to the bridge instead of the ssrcs.\r\n     */\r\n    usesRidsForSimulcast() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports getDisplayMedia.\r\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\r\n     */\r\n    supportsGetDisplayMedia() {\r\n        return typeof navigator.getDisplayMedia !== 'undefined'\r\n            || (typeof navigator.mediaDevices !== 'undefined'\r\n                && typeof navigator.mediaDevices.getDisplayMedia\r\n                    !== 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\r\n     * to insertable streams.\r\n     *\r\n     * NOTE: At the time of this writing the only browser supporting this is\r\n     * Safari / WebKit, behind a flag.\r\n     *\r\n     * @returns {boolean} {@code true} if the browser supports it.\r\n     */\r\n    supportsEncodedTransform() {\r\n        return Boolean(window.RTCRtpScriptTransform);\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports insertable streams, needed for E2EE.\r\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\r\n     */\r\n    supportsInsertableStreams() {\r\n        if (!(typeof window.RTCRtpSender !== 'undefined'\r\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\r\n            return false;\r\n        }\r\n\r\n        // Feature-detect transferable streams which we need to operate in a worker.\r\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\r\n        const stream = new ReadableStream();\r\n\r\n        try {\r\n            window.postMessage(stream, '*', [ stream ]);\r\n\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the browser supports the RED format for audio.\r\n     */\r\n    supportsAudioRed() {\r\n        return Boolean(window.RTCRtpSender\r\n            && window.RTCRtpSender.getCapabilities\r\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\r\n            && window.RTCRtpReceiver\r\n            && window.RTCRtpReceiver.getCapabilities\r\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports unified plan.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsUnifiedPlan() {\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVADDetection() {\r\n        return this.isChromiumBased();\r\n    }\r\n\r\n    /**\r\n     * Returns the version of a Chromium based browser.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    _getChromiumBasedVersion() {\r\n        if (this.isChromiumBased()) {\r\n            // NW.JS doesn't expose the Chrome version in the UA string.\r\n            if (this.isNWJS()) {\r\n                // eslint-disable-next-line no-undef\r\n                return Number.parseInt(process.versions.chromium, 10);\r\n            }\r\n\r\n            // Here we process all browsers which use the Chrome engine but\r\n            // don't necessarily identify as Chrome. We cannot use the version\r\n            // comparing functions because the Electron, Opera and NW.JS\r\n            // versions are inconsequential here, as we need to know the actual\r\n            // Chrome engine version.\r\n            const ua = navigator.userAgent;\r\n\r\n            if (ua.match(/Chrome/)) {\r\n                const version\r\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\r\n\r\n                return version;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n","import BrowserCapabilities from './BrowserCapabilities';\r\n\r\nexport default new BrowserCapabilities();\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    TYPE_OPERATIONAL,\r\n    TYPE_PAGE,\r\n    TYPE_TRACK,\r\n    TYPE_UI\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nconst MAX_CACHE_SIZE = 100;\r\n\r\n// eslist-disable-line no-undef\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class provides an API to lib-jitsi-meet and its users for sending\r\n * analytics events. It serves as a bridge to different backend implementations\r\n * (\"analytics handlers\") and a cache for events attempted to be sent before\r\n * the analytics handlers were enabled.\r\n *\r\n * The API is designed to be an easy replacement for the previous version of\r\n * this adapter, and is meant to be extended with more convenience methods.\r\n *\r\n *\r\n * The API calls are translated to objects with the following structure, which\r\n * are then passed to the sendEvent(event) function of the underlying handlers:\r\n *\r\n * {\r\n *    type,\r\n *\r\n *    action,\r\n *    actionSubject,\r\n *    actionSubjectId,\r\n *    attributes,\r\n *    categories,\r\n *    containerId,\r\n *    containerType,\r\n *    name,\r\n *    objectId,\r\n *    objectType,\r\n *    source,\r\n *    tags\r\n * }\r\n *\r\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\r\n * other properties are considered required according to the type.\r\n *\r\n * For events with type 'page', the required properties are: name.\r\n *\r\n * For events with type 'operational' and 'ui', the required properties are:\r\n * action, actionSubject, source\r\n *\r\n * For events with type 'page', the required properties are:\r\n * action, actionSubject, source, containerType, containerId, objectType,\r\n * objectId\r\n */\r\nclass AnalyticsAdapter {\r\n    /**\r\n     * Creates new AnalyticsAdapter instance.\r\n     */\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state to the initial one.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        /**\r\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\r\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\r\n         * any more events, and it can not be re-enabled.\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The set of handlers to which events will be sent.\r\n         * @type {Set<any>}\r\n         */\r\n        this.analyticsHandlers = new Set();\r\n\r\n        /**\r\n         * The cache of events which are not sent yet. The cache is enabled\r\n         * while this field is truthy, and disabled otherwise.\r\n         * @type {Array}\r\n         */\r\n        this.cache = [];\r\n\r\n        /**\r\n         * Map of properties that will be added to every event. Note that the\r\n         * keys will be prefixed with \"permanent.\".\r\n         */\r\n        this.permanentProperties = {};\r\n\r\n        /**\r\n         * The name of the conference that this AnalyticsAdapter is associated\r\n         * with.\r\n         * @type {null}\r\n         */\r\n        this.conferenceName = '';\r\n\r\n        this.addPermanentProperties({\r\n            'user_agent': navigator.userAgent,\r\n            'browser_name': browser.getName()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose analytics. Clears all handlers.\r\n     */\r\n    dispose() {\r\n        logger.warn('Disposing of analytics adapter.');\r\n\r\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                if (typeof handler.dispose === 'function') {\r\n                    handler.dispose();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setAnalyticsHandlers([]);\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the handlers that are going to be used to send analytics. Sends any\r\n     * cached events.\r\n     * @param {Array} handlers the handlers\r\n     */\r\n    setAnalyticsHandlers(handlers) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.analyticsHandlers = new Set(handlers);\r\n\r\n        this._setUserProperties();\r\n\r\n        // Note that we disable the cache even if the set of handlers is empty.\r\n        const cache = this.cache;\r\n\r\n        this.cache = null;\r\n        if (cache) {\r\n            cache.forEach(event => this._sendEvent(event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the user properties to the analytics handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setUserProperties() {\r\n        this.analyticsHandlers.forEach(handler => {\r\n            try {\r\n                handler.setUserProperties(this.permanentProperties);\r\n            } catch (error) {\r\n                logger.warn('Error in setUserProperties method of one of the '\r\n                    + `analytics handlers: ${error}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\r\n     * Permanent properties will be added as \"attributes\" to events sent to\r\n     * the underlying \"analytics handlers\", and their keys will be prefixed\r\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\r\n     * result in {\"permanent_key\": \"value\"} object to be added to the\r\n     * \"attributes\" field of events.\r\n     *\r\n     * @param {Object} properties the properties to add\r\n     */\r\n    addPermanentProperties(properties) {\r\n        this.permanentProperties = {\r\n            ...this.permanentProperties,\r\n            ...properties\r\n        };\r\n\r\n        this._setUserProperties();\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the conference that this AnalyticsAdapter is associated\r\n     * with.\r\n     * @param name the name to set.\r\n     */\r\n    setConferenceName(name) {\r\n        this.conferenceName = name;\r\n        this.addPermanentProperties({ 'conference_name': name });\r\n    }\r\n\r\n    /**\r\n     * Sends an event with a given name and given properties. The first\r\n     * parameter is either a string or an object. If it is a string, it is used\r\n     * as the event name and the second parameter is used at the attributes to\r\n     * attach to the event. If it is an object, it represents the whole event,\r\n     * including any desired attributes, and the second parameter is ignored.\r\n     *\r\n     * @param {String|Object} eventName either a string to be used as the name\r\n     * of the event, or an event object. If an event object is passed, the\r\n     * properties parameters is ignored.\r\n     * @param {Object} properties the properties/attributes to attach to the\r\n     * event, if eventName is a string.\r\n     */\r\n    sendEvent(eventName, properties = {}) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        let event = null;\r\n\r\n        if (typeof eventName === 'string') {\r\n            event = {\r\n                type: TYPE_OPERATIONAL,\r\n                action: eventName,\r\n                actionSubject: eventName,\r\n                source: eventName,\r\n                attributes: properties\r\n            };\r\n        } else if (typeof eventName === 'object') {\r\n            event = eventName;\r\n        }\r\n\r\n        if (!this._verifyRequiredFields(event)) {\r\n            logger.error(\r\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Checks whether an event has all of the required fields set, and tries\r\n     * to fill in some of the missing fields with reasonable default values.\r\n     * Returns true if after this operation the event has all of the required\r\n     * fields set, and false otherwise (if some of the required fields were not\r\n     * set and the attempt to fill them in with a default failed).\r\n     *\r\n     * @param event the event object.\r\n     * @return {boolean} true if the event (after the call to this function)\r\n     * contains all of the required fields, and false otherwise.\r\n     * @private\r\n     */\r\n    _verifyRequiredFields(event) {\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        if (!event.type) {\r\n            event.type = TYPE_OPERATIONAL;\r\n        }\r\n\r\n        const type = event.type;\r\n\r\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\r\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\r\n            logger.error(`Unknown event type: ${type}`);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (type === TYPE_PAGE) {\r\n            return Boolean(event.name);\r\n        }\r\n\r\n        // Try to set some reasonable default values in case some of the\r\n        // parameters required by the handler API are missing.\r\n        event.action = event.action || event.name || event.actionSubject;\r\n        event.actionSubject = event.actionSubject || event.name || event.action;\r\n        event.source = event.source || event.name || event.action\r\n            || event.actionSubject;\r\n\r\n        if (!event.action || !event.actionSubject || !event.source) {\r\n            logger.error(\r\n                'Required field missing (action, actionSubject or source)');\r\n\r\n            return false;\r\n        }\r\n\r\n        // Track events have additional required fields.\r\n        if (type === TYPE_TRACK) {\r\n            event.objectType = event.objectType || 'generic-object-type';\r\n            event.containerType = event.containerType || 'conference';\r\n            if (event.containerType === 'conference' && !event.containerId) {\r\n                event.containerId = this.conferenceName;\r\n            }\r\n\r\n\r\n            if (!event.objectType || !event.objectId\r\n                || !event.containerType || !event.containerId) {\r\n                logger.error(\r\n                    'Required field missing (containerId, containerType, '\r\n                        + 'objectId or objectType)');\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Saves an event to the cache, if the cache is enabled.\r\n     * @param event the event to save.\r\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\r\n     * if the cache was disabled).\r\n     * @private\r\n     */\r\n    _maybeCacheEvent(event) {\r\n        if (this.cache) {\r\n            this.cache.push(event);\r\n\r\n            // We limit the size of the cache, in case the user fails to ever\r\n            // set the analytics handlers.\r\n            if (this.cache.length > MAX_CACHE_SIZE) {\r\n                this.cache.splice(0, 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    _sendEvent(event) {\r\n        if (this._maybeCacheEvent(event)) {\r\n            // The event was consumed by the cache.\r\n        } else {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                try {\r\n                    handler.sendEvent(event);\r\n                } catch (e) {\r\n                    logger.warn(`Error sending analytics event: ${e}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AnalyticsAdapter();\r\n","/* global callstats */\r\n\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * We define enumeration of wrtcFuncNames as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\r\n */\r\nconst wrtcFuncNames = {\r\n    createOffer: 'createOffer',\r\n    createAnswer: 'createAnswer',\r\n    setLocalDescription: 'setLocalDescription',\r\n    setRemoteDescription: 'setRemoteDescription',\r\n    addIceCandidate: 'addIceCandidate',\r\n    getUserMedia: 'getUserMedia',\r\n    iceConnectionFailure: 'iceConnectionFailure',\r\n    signalingError: 'signalingError',\r\n    applicationLog: 'applicationLog'\r\n};\r\n\r\n/**\r\n * We define enumeration of fabricEvent as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\r\n */\r\nconst fabricEvent = {\r\n    fabricHold: 'fabricHold',\r\n    fabricResume: 'fabricResume',\r\n    audioMute: 'audioMute',\r\n    audioUnmute: 'audioUnmute',\r\n    videoPause: 'videoPause',\r\n    videoResume: 'videoResume',\r\n    fabricUsageEvent: 'fabricUsageEvent',\r\n    fabricStats: 'fabricStats',\r\n    fabricTerminated: 'fabricTerminated',\r\n    screenShareStart: 'screenShareStart',\r\n    screenShareStop: 'screenShareStop',\r\n    dominantSpeaker: 'dominantSpeaker',\r\n    activeDeviceList: 'activeDeviceList'\r\n};\r\n\r\n/**\r\n * The user id to report to callstats as destination.\r\n * @type {string}\r\n */\r\nconst DEFAULT_REMOTE_USER = 'jitsi';\r\n\r\n/**\r\n * Type of pending reports, can be event or an error.\r\n * @type {{ERROR: string, EVENT: string}}\r\n */\r\nconst reportType = {\r\n    ERROR: 'error',\r\n    EVENT: 'event',\r\n    MST_WITH_USERID: 'mstWithUserID'\r\n};\r\n\r\n/**\r\n * Set of currently existing {@link CallStats} instances.\r\n * @type {Set<CallStats>}\r\n */\r\nlet _fabrics;\r\n\r\n/**\r\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\r\n * reports one peer connection to the CallStats backend and is allocated with\r\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\r\n * reporting various events. A fabric is considered disposed when\r\n * {@link CallStats.sendTerminateEvent} is executed.\r\n *\r\n * Currently only one backend instance can be created ever and it's done using\r\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\r\n * explicitly shutdown the backend, but it's supposed to close it's connection\r\n * automatically, after all fabrics have been terminated.\r\n */\r\nexport default class CallStats {\r\n    /**\r\n     * A callback passed to {@link callstats.addNewFabric}.\r\n     * @param {string} error 'success' means ok\r\n     * @param {string} msg some more details\r\n     * @private\r\n     */\r\n    static _addNewFabricCallback(error, msg) {\r\n        if (CallStats.backend && error !== 'success') {\r\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback passed to {@link callstats.initialize} (backend initialization)\r\n     * @param {string} error 'success' means ok\r\n     * @param {String} msg\r\n     * @private\r\n     */\r\n    static _initCallback(error, msg) {\r\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\r\n\r\n        // there is no lib, nothing to report to\r\n        if (error !== 'success') {\r\n            return;\r\n        }\r\n\r\n        CallStats.backendInitialized = true;\r\n\r\n        // I hate that\r\n        let atLeastOneFabric = false;\r\n        let defaultInstance = null;\r\n\r\n        for (const callStatsInstance of CallStats.fabrics.values()) {\r\n            if (!callStatsInstance.hasFabric) {\r\n                logger.debug('addNewFabric - initCallback');\r\n                if (callStatsInstance._addNewFabric()) {\r\n                    atLeastOneFabric = true;\r\n                    if (!defaultInstance) {\r\n                        defaultInstance = callStatsInstance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!atLeastOneFabric) {\r\n            return;\r\n        }\r\n\r\n        CallStats._emptyReportQueue(defaultInstance);\r\n    }\r\n\r\n    /**\r\n     * Empties report queue.\r\n     *\r\n     * @param {CallStats} csInstance - The callstats instance.\r\n     * @private\r\n     */\r\n    static _emptyReportQueue(csInstance) {\r\n        // There is no conference ID nor a PeerConnection available when some of\r\n        // the events are scheduled on the reportsQueue, so those will be\r\n        // reported on the first initialized fabric.\r\n        const defaultConfID = csInstance.confID;\r\n        const defaultPC = csInstance.peerconnection;\r\n\r\n        // notify callstats about failures if there were any\r\n        for (const report of CallStats.reportsQueue) {\r\n            if (report.type === reportType.ERROR) {\r\n                const errorData = report.data;\r\n\r\n                CallStats._reportError(\r\n                    csInstance,\r\n                    errorData.type,\r\n                    errorData.error,\r\n                    errorData.pc || defaultPC);\r\n            } else if (report.type === reportType.EVENT) {\r\n                // if we have and event to report and we failed to add\r\n                // fabric this event will not be reported anyway, returning\r\n                // an error\r\n                const eventData = report.data;\r\n\r\n                CallStats.backend.sendFabricEvent(\r\n                    report.pc || defaultPC,\r\n                    eventData.event,\r\n                    defaultConfID,\r\n                    eventData.eventData);\r\n            } else if (report.type === reportType.MST_WITH_USERID) {\r\n                const data = report.data;\r\n\r\n                CallStats.backend.associateMstWithUserID(\r\n                    report.pc || defaultPC,\r\n                    data.callStatsId,\r\n                    defaultConfID,\r\n                    data.ssrc,\r\n                    data.usageLabel,\r\n                    data.containerId\r\n                );\r\n            }\r\n        }\r\n        CallStats.reportsQueue.length = 0;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} [cs]\r\n     * @param type the type of the error, which will be one of the wrtcFuncNames\r\n     * @param error the error\r\n     * @param pc the peerconnection\r\n     * @private\r\n     */\r\n    static _reportError(cs, type, error, pc) {\r\n        let _error = error;\r\n\r\n        if (!_error) {\r\n            logger.warn('No error is passed!');\r\n            _error = new Error('Unknown error');\r\n        }\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.ERROR,\r\n                data: {\r\n                    error: _error,\r\n                    pc,\r\n                    type\r\n                }\r\n            });\r\n        }\r\n\r\n        // else just ignore it\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} cs\r\n     * @param event the type of the event, which will be one of the fabricEvent\r\n     * @param eventData additional data to pass to event\r\n     * @private\r\n     */\r\n    static _reportEvent(cs, event, eventData) {\r\n        const pc = cs && cs.peerconnection;\r\n        const confID = cs && cs.confID;\r\n\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                confID,\r\n                pc,\r\n                type: reportType.EVENT,\r\n                data: { event,\r\n                    eventData }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps some of the CallStats API method and logs their calls with\r\n     * arguments on the debug logging level. Also wraps some of the backend\r\n     * methods execution into try catch blocks to not crash the app in case\r\n     * there is a problem with the backend itself.\r\n     * @param {callstats} theBackend\r\n     * @private\r\n     */\r\n    static _traceAndCatchBackendCalls(theBackend) {\r\n        const tryCatchMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of tryCatchMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                try {\r\n                    return originalMethod.apply(theBackend, theArguments);\r\n                } catch (e) {\r\n                    GlobalOnErrorHandler.callErrorHandler(e);\r\n                }\r\n            };\r\n        }\r\n        const debugMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of debugMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                logger.debug(methodName, theArguments);\r\n                originalMethod.apply(theBackend, theArguments);\r\n            };\r\n        }\r\n        const originalReportError = theBackend.reportError;\r\n\r\n        /* eslint-disable max-params */\r\n        theBackend.reportError = function(pc, cs, type, ...args) {\r\n            // Logs from the logger are submitted on the applicationLog event\r\n            // \"type\". Logging the arguments on the logger will create endless\r\n            // loop, because it will put all the logs to the logger queue again.\r\n            if (type === wrtcFuncNames.applicationLog) {\r\n                // NOTE otherArguments are not logged to the console on purpose\r\n                // to not log the whole log batch\r\n                // FIXME check the current logging level (currently not exposed\r\n                // by the logger implementation)\r\n                // NOTE it is not safe to log whole objects on react-native as\r\n                // those contain too many circular references and may crash\r\n                // the app.\r\n                if (!browser.isReactNative()) {\r\n                    console && console.debug('reportError', pc, cs, type);\r\n                }\r\n            } else {\r\n                logger.debug('reportError', pc, cs, type, ...args);\r\n            }\r\n            try {\r\n                originalReportError.call(theBackend, pc, cs, type, ...args);\r\n            } catch (exception) {\r\n                if (type === wrtcFuncNames.applicationLog) {\r\n                    console && console.error('reportError', exception);\r\n                } else {\r\n                    GlobalOnErrorHandler.callErrorHandler(exception);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* eslint-enable max-params */\r\n    }\r\n\r\n    /**\r\n     * Returns the Set with the currently existing {@link CallStats} instances.\r\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<CallStats>}\r\n     */\r\n    static get fabrics() {\r\n        if (!_fabrics) {\r\n            _fabrics = new Set();\r\n        }\r\n\r\n        return _fabrics;\r\n    }\r\n\r\n    /**\r\n     * Initializes the CallStats backend. Should be called only if\r\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\r\n     * @param {object} options\r\n     * @param {String} options.callStatsID CallStats credentials - ID\r\n     * @param {String} options.callStatsSecret CallStats credentials - secret\r\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\r\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\r\n     * @param {string} options.userName the <tt>userName</tt> part of\r\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\r\n     * @param {String} options.configParams the set of parameters\r\n     * to enable/disable certain features in the library. See CallStats docs for more info.\r\n     *\r\n     */\r\n    static initBackend(options) {\r\n        if (CallStats.backend) {\r\n            throw new Error('CallStats backend has been initialized already!');\r\n        }\r\n        try {\r\n            const CallStatsBackend = callstats;\r\n\r\n            CallStats.backend = new CallStatsBackend();\r\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\r\n            CallStats.userID = {\r\n                aliasName: options.aliasName,\r\n                userName: options.userName\r\n            };\r\n            CallStats.callStatsID = options.callStatsID;\r\n            CallStats.callStatsSecret = options.callStatsSecret;\r\n\r\n            const configParams = { ...options.configParams };\r\n\r\n            if (options.applicationName) {\r\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\r\n            }\r\n\r\n            if (options.confID) {\r\n                // we first check is there a tenant in the confID\r\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\r\n\r\n                // if there is no tenant, we will just set '/'\r\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\r\n            }\r\n\r\n            // userID is generated or given by the origin server\r\n            CallStats.backend.initialize(\r\n                CallStats.callStatsID,\r\n                CallStats.callStatsSecret,\r\n                CallStats.userID,\r\n                CallStats._initCallback,\r\n                undefined,\r\n                configParams);\r\n\r\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\r\n\r\n            if (getWiFiStatsMethod) {\r\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\r\n\r\n                getWiFiStatsMethod().then(result => {\r\n                    if (result) {\r\n                        logger.info('Reported wifi addresses:'\r\n                            , JSON.parse(result).addresses);\r\n                    }\r\n                })\r\n                .catch(() => {});// eslint-disable-line no-empty-function\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            // The callstats.io API failed to initialize (e.g. because its\r\n            // download did not succeed in general or on time). Further attempts\r\n            // to utilize it cannot possibly succeed.\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            CallStats.backend = null;\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the CallStats backend has been created. It does not mean that\r\n     * it has been initialized, but only that the API instance has been\r\n     * allocated successfully.\r\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\r\n     * otherwise\r\n     */\r\n    static isBackendInitialized() {\r\n        return Boolean(CallStats.backend);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats about active device.\r\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\r\n     * their data\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendActiveDeviceListEvent(devicesData, cs) {\r\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that there is a log we want to report.\r\n     *\r\n     * @param {Error} e error to send or {String} message\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendApplicationLog(e, cs) {\r\n        try {\r\n            CallStats._reportError(\r\n                cs,\r\n                wrtcFuncNames.applicationLog,\r\n                e,\r\n                cs && cs.peerconnection);\r\n        } catch (error) {\r\n            // If sendApplicationLog fails it should not be printed to\r\n            // the logger, because it will try to push the logs again\r\n            // (through sendApplicationLog) and an endless loop is created.\r\n            if (console && (typeof console.error === 'function')) {\r\n                // FIXME send analytics event as well\r\n                console.error('sendApplicationLog failed', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the given feedback through CallStats.\r\n     *\r\n     * @param {string} conferenceID the conference ID for which the feedback\r\n     * will be reported.\r\n     * @param overall an integer between 1 and 5 indicating the\r\n     * user feedback\r\n     * @param comment detailed feedback from the user.\r\n     */\r\n    static sendFeedback(conferenceID, overall, comment) {\r\n        return new Promise((resolve, reject) => {\r\n            if (CallStats.backend) {\r\n                CallStats.backend.sendUserFeedback(\r\n                    conferenceID,\r\n                    {\r\n                        userID: CallStats.userID,\r\n                        overall,\r\n                        comment\r\n                    },\r\n                    (status, message) => {\r\n                        if (status === 'success') {\r\n                            resolve(message);\r\n                        } else {\r\n                            reject(message);\r\n                        }\r\n                    });\r\n            } else {\r\n                const reason = 'Failed to submit feedback to CallStats - no backend';\r\n\r\n                logger.error(reason);\r\n                reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that getUserMedia failed.\r\n     *\r\n     * @param {Error} e error to send\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendGetUserMediaFailed(e, cs) {\r\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for mute events\r\n     * @param mute {boolean} true for muted and false for not muted\r\n     * @param type {String} \"audio\"/\"video\"\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendMuteEvent(mute, type, cs) {\r\n        let event;\r\n\r\n        if (type === 'video') {\r\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\r\n        } else {\r\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\r\n        }\r\n\r\n        CallStats._reportEvent(cs, event);\r\n    }\r\n\r\n    /**\r\n     * Creates new CallStats instance that handles all callstats API calls for\r\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\r\n     * one CallStats fabric added with 'addFabric' API method for the\r\n     * {@link TraceablePeerConnection} instance passed in the constructor.\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {Object} options\r\n     * @param {string} options.confID the conference ID that wil be used to\r\n     * report the session.\r\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\r\n     * which given <tt>tpc</tt> is connected.\r\n     */\r\n    constructor(tpc, options) {\r\n        this.confID = options.confID;\r\n        this.tpc = tpc;\r\n        this.peerconnection = tpc.peerconnection;\r\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\r\n        this.hasFabric = false;\r\n\r\n        CallStats.fabrics.add(this);\r\n\r\n        if (CallStats.backendInitialized) {\r\n            this._addNewFabric();\r\n\r\n            // if this is the first fabric let's try to empty the\r\n            // report queue. Reports all events that we recorded between\r\n            // backend initialization and receiving the first fabric\r\n            if (CallStats.fabrics.size === 1) {\r\n                CallStats._emptyReportQueue(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\r\n     * the peer connection associated with this instance.\r\n     * @return {boolean} true if the call was successful or false otherwise.\r\n     */\r\n    _addNewFabric() {\r\n        logger.info('addNewFabric', this.remoteUserID);\r\n        try {\r\n            const fabricAttributes = {\r\n                remoteEndpointType:\r\n                    this.tpc.isP2P\r\n                        ? CallStats.backend.endpointType.peer\r\n                        : CallStats.backend.endpointType.server\r\n            };\r\n            const ret\r\n                = CallStats.backend.addNewFabric(\r\n                    this.peerconnection,\r\n                    this.remoteUserID,\r\n                    CallStats.backend.fabricUsage.multiplex,\r\n                    this.confID,\r\n                    fabricAttributes,\r\n                    CallStats._addNewFabricCallback);\r\n\r\n            this.hasFabric = true;\r\n\r\n            const success = ret.status === 'success';\r\n\r\n            if (!success) {\r\n                logger.error('callstats fabric not initilized', ret.message);\r\n            }\r\n\r\n            return success;\r\n\r\n        } catch (error) {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Lets CallStats module know where is given SSRC rendered by providing\r\n     * renderer tag ID.\r\n     * If the lib is not initialized yet queue the call for later, when it's\r\n     * ready.\r\n     * @param {number} ssrc the SSRC of the stream\r\n     * @param {boolean} isLocal indicates whether this the stream is local\r\n     * @param {string|null} streamEndpointId if the stream is not local the it\r\n     * needs to contain the stream owner's ID\r\n     * @param {string} usageLabel meaningful usage label of this stream like\r\n     *        'microphone', 'camera' or 'screen'.\r\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\r\n     *        renders the stream.\r\n     */\r\n    associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            streamEndpointId,\r\n            usageLabel,\r\n            containerId) {\r\n        if (!CallStats.backend) {\r\n            return;\r\n        }\r\n\r\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\r\n\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.associateMstWithUserID(\r\n                this.peerconnection,\r\n                callStatsId,\r\n                this.confID,\r\n                ssrc,\r\n                usageLabel,\r\n                containerId);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.MST_WITH_USERID,\r\n                pc: this.peerconnection,\r\n                data: {\r\n                    callStatsId,\r\n                    containerId,\r\n                    ssrc,\r\n                    usageLabel\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Notifies CallStats that we are the new dominant speaker in the\r\n     * conference.\r\n     */\r\n    sendDominantSpeakerEvent() {\r\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that the fabric for the underlying peerconnection was\r\n     * closed and no evens should be reported, after this call.\r\n     */\r\n    sendTerminateEvent() {\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.sendFabricEvent(\r\n                this.peerconnection,\r\n                CallStats.backend.fabricEvent.fabricTerminated,\r\n                this.confID);\r\n        }\r\n        CallStats.fabrics.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for ice connection failed\r\n     */\r\n    sendIceConnectionFailedEvent() {\r\n        CallStats._reportError(\r\n            this,\r\n            wrtcFuncNames.iceConnectionFailure,\r\n            null,\r\n            this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create offer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateOfferFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create answer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateAnswerFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Sends either resume or hold event for the fabric associated with\r\n     * the underlying peerconnection.\r\n     * @param {boolean} isResume true to resume or false to hold\r\n     */\r\n    sendResumeOrHoldEvent(isResume) {\r\n        CallStats._reportEvent(\r\n            this,\r\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for screen sharing events\r\n     * @param {boolean} start true for starting screen sharing and\r\n     * false for not stopping\r\n     * @param {string|null} ssrc - optional ssrc value, used only when\r\n     * starting screen sharing.\r\n     */\r\n    sendScreenSharingEvent(start, ssrc) {\r\n        let eventData;\r\n\r\n        if (ssrc) {\r\n            eventData = { ssrc };\r\n        }\r\n\r\n        CallStats._reportEvent(\r\n            this,\r\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\r\n            eventData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set local description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetLocalDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set remote description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetRemoteDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to add ICE candidate.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendAddIceCandidateFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\r\n    }\r\n}\r\n\r\n/**\r\n * The CallStats API backend instance\r\n * @type {callstats}\r\n */\r\nCallStats.backend = null;\r\n\r\n// some errors/events may happen before CallStats init\r\n// in this case we accumulate them in this array\r\n// and send them to callstats on init\r\nCallStats.reportsQueue = [];\r\n\r\n/**\r\n * Whether the library was successfully initialized(the backend) using its\r\n * initialize method.\r\n * @type {boolean}\r\n */\r\nCallStats.backendInitialized = false;\r\n\r\n/**\r\n * Part of the CallStats credentials - application ID\r\n * @type {string}\r\n */\r\nCallStats.callStatsID = null;\r\n\r\n/**\r\n * Part of the CallStats credentials - application secret\r\n * @type {string}\r\n */\r\nCallStats.callStatsSecret = null;\r\n\r\n/**\r\n * Local CallStats user ID structure. Can be set only once when\r\n * {@link backend} is initialized, so it's static for the time being.\r\n * See CallStats API for more info:\r\n * https://www.callstats.io/api/#userid\r\n * @type {object}\r\n */\r\nCallStats.userID = null;\r\n","/**\r\n * Provides statistics for the local stream.\r\n */\r\n\r\n/**\r\n * Size of the webaudio analyzer buffer.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\r\n\r\n/**\r\n * Value of the webaudio analyzer smoothing time parameter.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nlet context = null;\r\n\r\nif (window.AudioContext) {\r\n    context = new AudioContext();\r\n\r\n    // XXX Not all browsers define a suspend method on AudioContext. As the\r\n    // invocation is at the (ES6 module) global execution level, it breaks the\r\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\r\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\r\n    // example, Google Chrome 40 on Android does not define the method but we\r\n    // still want to be able to load the lib-jitsi-meet library there and\r\n    // display a page which notifies the user that the Web app is not supported\r\n    // there.\r\n    context.suspend && context.suspend();\r\n}\r\n\r\n/**\r\n * Converts time domain data array to audio level.\r\n * @param samples the time domain data array.\r\n * @returns {number} the audio level\r\n */\r\nfunction timeDomainDataToAudioLevel(samples) {\r\n\r\n    let maxVolume = 0;\r\n\r\n    const length = samples.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (maxVolume < samples[i]) {\r\n            maxVolume = samples[i];\r\n        }\r\n    }\r\n\r\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\r\n}\r\n\r\n/**\r\n * Animates audio level change\r\n * @param newLevel the new audio level\r\n * @param lastLevel the last audio level\r\n * @returns {Number} the audio level to be set\r\n */\r\nfunction animateLevel(newLevel, lastLevel) {\r\n    let value = 0;\r\n    const diff = lastLevel - newLevel;\r\n\r\n    if (diff > 0.2) {\r\n        value = lastLevel - 0.2;\r\n    } else if (diff < -0.4) {\r\n        value = lastLevel + 0.4;\r\n    } else {\r\n        value = newLevel;\r\n    }\r\n\r\n    return parseFloat(value.toFixed(3));\r\n}\r\n\r\n\r\n/**\r\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\r\n *\r\n * @param stream the local stream\r\n * @param interval stats refresh interval given in ms.\r\n * @param callback function that receives the audio levels.\r\n * @constructor\r\n */\r\nexport default function LocalStatsCollector(stream, interval, callback) {\r\n    this.stream = stream;\r\n    this.intervalId = null;\r\n    this.intervalMilis = interval;\r\n    this.audioLevel = 0;\r\n    this.callback = callback;\r\n}\r\n\r\n/**\r\n * Starts the collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.start = function() {\r\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\r\n        return;\r\n    }\r\n    context.resume();\r\n    const analyser = context.createAnalyser();\r\n\r\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\r\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\r\n\r\n    const source = context.createMediaStreamSource(this.stream);\r\n\r\n    source.connect(analyser);\r\n\r\n    this.intervalId = setInterval(\r\n        () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n            analyser.getByteTimeDomainData(array);\r\n            const audioLevel = timeDomainDataToAudioLevel(array);\r\n\r\n            // Set the audio levels always as NoAudioSignalDetection now\r\n            // uses audio levels from LocalStatsCollector and waits for\r\n            // atleast 4 secs for a no audio signal before displaying the\r\n            // notification on the UI.\r\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\r\n            this.callback(this.audioLevel);\r\n        },\r\n        this.intervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Stops collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.stop = function() {\r\n    if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the environment has the necessary conditions to support\r\n * collecting stats from local streams.\r\n *\r\n * @returns {boolean}\r\n */\r\nLocalStatsCollector.isLocalStatsSupported = function() {\r\n    return Boolean(context);\r\n};\r\n","\r\n/**\r\n * The method will increase the given number by 1. If the given counter is equal\r\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\r\n * 1.\r\n * @param {number} number - An integer counter value to be incremented.\r\n * @return {number} the next counter value increased by 1 (see the description\r\n * above for exception).\r\n */\r\nexport function safeCounterIncrement(number) {\r\n    let nextValue = number;\r\n\r\n    if (number >= Number.MAX_SAFE_INTEGER) {\r\n        nextValue = 0;\r\n    }\r\n\r\n    return nextValue + 1;\r\n}\r\n\r\n/**\r\n * Calculates the average value of am Array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of numbers.\r\n * @returns {number} - Number array average.\r\n */\r\nexport function calculateAverage(valueArray) {\r\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\r\n}\r\n\r\n/**\r\n * Calculates a unique hash for a given string similar to Java's\r\n * implementation of String.hashCode()\r\n *\r\n * @param {String} string - String whose hash has to be calculated.\r\n * @returns {number} - Unique hash code calculated.\r\n */\r\nexport function hashString(string) {\r\n    let hash = 0;\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\r\n\r\n        /* eslint-disable no-bitwise */\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n\r\n    return Math.abs(hash);\r\n}\r\n\r\n/**\r\n * Returns only the positive values from an array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of vad scores.\r\n * @returns {Array} - Array of positive numbers.\r\n */\r\nexport function filterPositiveValues(valueArray) {\r\n    return valueArray.filter(value => value >= 0);\r\n}\r\n\r\n/**\r\n * This class calculates a simple running average that continually changes\r\n * as more data points are collected and added.\r\n */\r\nexport class RunningAverage {\r\n    /**\r\n     * Creates an instance of the running average calculator.\r\n     */\r\n    constructor() {\r\n        this.average = 0;\r\n        this.n = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a new data point to the existing set of values and recomputes\r\n     * the running average.\r\n     * @param {number} value\r\n     * @returns {void}\r\n     */\r\n    addNext(value) {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n        this.n += 1;\r\n        this.average = this.average + ((value - this.average) / this.n);\r\n    }\r\n\r\n    /**\r\n     * Obtains the average value for the current subset of values.\r\n     * @returns {number} - computed average.\r\n     */\r\n    getAverage() {\r\n        return this.average;\r\n    }\r\n}\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport { RunningAverage } from '../util/MathUtil';\r\n\r\nconst logger = getLogger(__filename);\r\nconst MILLI_SECONDS = 1000;\r\nconst SECONDS = 60;\r\n\r\n/**\r\n * This class creates an observer that monitors browser's performance measurement events\r\n * as they are recorded in the browser's performance timeline and computes an average and\r\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\r\n * longer than 50ms to execute on the main thread.\r\n */\r\nexport class PerformanceObserverStats {\r\n    /**\r\n     * Creates a new instance of Performance observer statistics.\r\n     *\r\n     * @param {*} emitter Event emitter for emitting stats periodically\r\n     * @param {*} statsInterval interval for calculating the stats\r\n     */\r\n    constructor(emitter, statsInterval) {\r\n        this.eventEmitter = emitter;\r\n        this.longTasks = 0;\r\n        this.maxDuration = 0;\r\n        this.performanceStatsInterval = statsInterval;\r\n        this.stats = new RunningAverage();\r\n    }\r\n\r\n    /**\r\n     * Obtains the average rate of long tasks observed per min and the\r\n     * duration of the longest task recorded by the observer.\r\n     * @returns {Object}\r\n     */\r\n    getLongTasksStats() {\r\n        return {\r\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\r\n            maxDurationMs: this.maxDuration\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Starts the performance observer by registering the callback function\r\n     * that calculates the performance statistics periodically.\r\n     * @returns {void}\r\n     */\r\n    startObserver() {\r\n        // Create a handler for when the long task event is fired.\r\n        this.longTaskEventHandler = list => {\r\n            const entries = list.getEntries();\r\n\r\n            for (const task of entries) {\r\n                this.longTasks++;\r\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\r\n            }\r\n        };\r\n\r\n        // Create an observer for monitoring long tasks.\r\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\r\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\r\n        this.observer.observe({ type: 'longtask',\r\n            buffered: true });\r\n        const startTime = Date.now();\r\n\r\n        // Calculate the average # of events/sec and emit a stats event.\r\n        this.longTasksIntervalId = setInterval(() => {\r\n            const now = Date.now();\r\n            const interval = this._lastTimeStamp\r\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\r\n                : (now - startTime) / MILLI_SECONDS;\r\n            const rate = this.longTasks / interval;\r\n\r\n            this.stats.addNext(rate);\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\r\n\r\n            // Reset the counter and start counting events again.\r\n            this.longTasks = 0;\r\n            this._lastTimeStamp = Date.now();\r\n        }, this.performanceStatsInterval);\r\n    }\r\n\r\n    /**\r\n     * Stops the performance observer.\r\n     * @returns {void}\r\n     */\r\n    stopObserver() {\r\n        this.observer && this.observer.disconnect();\r\n        this.longTaskEventHandler = null;\r\n        if (this.longTasksIntervalId) {\r\n            clearInterval(this.longTasksIntervalId);\r\n            this.longTasksIntervalId = null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * The audio type.\r\n */\r\nexport const AUDIO = 'audio';\r\n\r\n/**\r\n * The presenter type.\r\n */\r\nexport const PRESENTER = 'presenter';\r\n\r\n/**\r\n * The video type.\r\n */\r\nexport const VIDEO = 'video';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\n\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Calculates packet lost percent using the number of lost packets and the\r\n * number of all packet.\r\n * @param lostPackets the number of lost packets\r\n * @param totalPackets the number of all packets.\r\n * @returns {number} packet loss percent\r\n */\r\nfunction calculatePacketLoss(lostPackets, totalPackets) {\r\n    if (!totalPackets || totalPackets <= 0\r\n            || !lostPackets || lostPackets <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.round((lostPackets / totalPackets) * 100);\r\n}\r\n\r\n/**\r\n * Holds \"statistics\" for a single SSRC.\r\n * @constructor\r\n */\r\nfunction SsrcStats() {\r\n    this.loss = {};\r\n    this.bitrate = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    this.resolution = {};\r\n    this.framerate = 0;\r\n    this.codec = '';\r\n}\r\n\r\n/**\r\n * Sets the \"loss\" object.\r\n * @param loss the value to set.\r\n */\r\nSsrcStats.prototype.setLoss = function(loss) {\r\n    this.loss = loss || {};\r\n};\r\n\r\n/**\r\n * Sets resolution that belong to the ssrc represented by this instance.\r\n * @param resolution new resolution value to be set.\r\n */\r\nSsrcStats.prototype.setResolution = function(resolution) {\r\n    this.resolution = resolution || {};\r\n};\r\n\r\n/**\r\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\r\n * the respective fields of the \"bitrate\" field of this object.\r\n * @param bitrate an object holding the values to add.\r\n */\r\nSsrcStats.prototype.addBitrate = function(bitrate) {\r\n    this.bitrate.download += bitrate.download;\r\n    this.bitrate.upload += bitrate.upload;\r\n};\r\n\r\n/**\r\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\r\n * represented by this instance.\r\n */\r\nSsrcStats.prototype.resetBitrate = function() {\r\n    this.bitrate.download = 0;\r\n    this.bitrate.upload = 0;\r\n};\r\n\r\n/**\r\n * Sets the \"framerate\".\r\n * @param framerate the value to set.\r\n */\r\nSsrcStats.prototype.setFramerate = function(framerate) {\r\n    this.framerate = framerate || 0;\r\n};\r\n\r\nSsrcStats.prototype.setCodec = function(codec) {\r\n    this.codec = codec || '';\r\n};\r\n\r\n/**\r\n *\r\n */\r\nfunction ConferenceStats() {\r\n\r\n    /**\r\n     * The bandwidth\r\n     * @type {{}}\r\n     */\r\n    this.bandwidth = {};\r\n\r\n    /**\r\n     * The bit rate\r\n     * @type {{}}\r\n     */\r\n    this.bitrate = {};\r\n\r\n    /**\r\n     * The packet loss rate\r\n     * @type {{}}\r\n     */\r\n    this.packetLoss = null;\r\n\r\n    /**\r\n     * Array with the transport information.\r\n     * @type {Array}\r\n     */\r\n    this.transport = [];\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * <tt>StatsCollector</tt> registers for stats updates of given\r\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\r\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\r\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\r\n * instance as an event source.\r\n *\r\n * @param peerconnection WebRTC PeerConnection object.\r\n * @param audioLevelsInterval\r\n * @param statsInterval stats refresh interval given in ms.\r\n * @param eventEmitter\r\n * @constructor\r\n */\r\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\r\n    this.peerconnection = peerconnection;\r\n    this.baselineAudioLevelsReport = null;\r\n    this.currentAudioLevelsReport = null;\r\n    this.currentStatsReport = null;\r\n    this.previousStatsReport = null;\r\n    this.audioLevelReportHistory = {};\r\n    this.audioLevelsIntervalId = null;\r\n    this.eventEmitter = eventEmitter;\r\n    this.conferenceStats = new ConferenceStats();\r\n\r\n    // Updates stats interval\r\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\r\n\r\n    this.speakerList = [];\r\n    this.statsIntervalId = null;\r\n    this.statsIntervalMilis = statsInterval;\r\n\r\n    /**\r\n     * Maps SSRC numbers to {@link SsrcStats}.\r\n     * @type {Map<number,SsrcStats}\r\n     */\r\n    this.ssrc2stats = new Map();\r\n}\r\n\r\n/**\r\n * Set the list of the remote speakers for which audio levels are to be calculated.\r\n *\r\n * @param {Array<string>} speakerList - Endpoint ids.\r\n * @returns {void}\r\n */\r\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\r\n    this.speakerList = speakerList;\r\n};\r\n\r\n/**\r\n * Stops stats updates.\r\n */\r\nStatsCollector.prototype.stop = function() {\r\n    if (this.audioLevelsIntervalId) {\r\n        clearInterval(this.audioLevelsIntervalId);\r\n        this.audioLevelsIntervalId = null;\r\n    }\r\n\r\n    if (this.statsIntervalId) {\r\n        clearInterval(this.statsIntervalId);\r\n        this.statsIntervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Callback passed to <tt>getStats</tt> method.\r\n * @param error an error that occurred on <tt>getStats</tt> call.\r\n */\r\nStatsCollector.prototype.errorCallback = function(error) {\r\n    GlobalOnErrorHandler.callErrorHandler(error);\r\n    logger.error('Get stats error', error);\r\n    this.stop();\r\n};\r\n\r\n/**\r\n * Starts stats updates.\r\n */\r\nStatsCollector.prototype.start = function(startAudioLevelStats) {\r\n    if (startAudioLevelStats) {\r\n        if (browser.supportsReceiverStats()) {\r\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\r\n        }\r\n        this.audioLevelsIntervalId = setInterval(\r\n            () => {\r\n                if (browser.supportsReceiverStats()) {\r\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\r\n\r\n                    for (const ssrc in audioLevels) {\r\n                        if (audioLevels.hasOwnProperty(ssrc)) {\r\n                            // Use a scaling factor of 2.5 to report the same\r\n                            // audio levels that getStats reports.\r\n                            const audioLevel = audioLevels[ssrc] * 2.5;\r\n\r\n                            this.eventEmitter.emit(\r\n                                StatisticsEvents.AUDIO_LEVEL,\r\n                                this.peerconnection,\r\n                                Number.parseInt(ssrc, 10),\r\n                                audioLevel,\r\n                                false /* isLocal */);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Interval updates\r\n                    this.peerconnection.getStats()\r\n                        .then(report => {\r\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\r\n                                ? report.result()\r\n                                : report;\r\n                            this.processAudioLevelReport();\r\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\r\n                        })\r\n                        .catch(error => this.errorCallback(error));\r\n                }\r\n            },\r\n            this.audioLevelsIntervalMilis\r\n        );\r\n    }\r\n\r\n    const processStats = () => {\r\n        // Interval updates\r\n        this.peerconnection.getStats()\r\n            .then(report => {\r\n                this.currentStatsReport = typeof report?.result === 'function'\r\n                    ? report.result()\r\n                    : report;\r\n\r\n                try {\r\n                    this.processStatsReport();\r\n                } catch (error) {\r\n                    GlobalOnErrorHandler.callErrorHandler(error);\r\n                    logger.error('Processing of RTP stats failed:', error);\r\n                }\r\n                this.previousStatsReport = this.currentStatsReport;\r\n            })\r\n            .catch(error => this.errorCallback(error));\r\n    };\r\n\r\n    processStats();\r\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\r\n};\r\n\r\n/**\r\n *\r\n */\r\nStatsCollector.prototype._processAndEmitReport = function() {\r\n    // process stats\r\n    const totalPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    const lostPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    let bitrateDownload = 0;\r\n    let bitrateUpload = 0;\r\n    const resolutions = {};\r\n    const framerates = {};\r\n    const codecs = {};\r\n    let audioBitrateDownload = 0;\r\n    let audioBitrateUpload = 0;\r\n    let audioCodec;\r\n    let videoBitrateDownload = 0;\r\n    let videoBitrateUpload = 0;\r\n    let videoCodec;\r\n\r\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\r\n        // process packet loss stats\r\n        const loss = ssrcStats.loss;\r\n        const type = loss.isDownloadStream ? 'download' : 'upload';\r\n\r\n        totalPackets[type] += loss.packetsTotal;\r\n        lostPackets[type] += loss.packetsLost;\r\n\r\n        // process bitrate stats\r\n        bitrateDownload += ssrcStats.bitrate.download;\r\n        bitrateUpload += ssrcStats.bitrate.upload;\r\n\r\n        // collect resolutions and framerates\r\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\r\n\r\n        if (track) {\r\n            if (track.isAudioTrack()) {\r\n                audioBitrateDownload += ssrcStats.bitrate.download;\r\n                audioBitrateUpload += ssrcStats.bitrate.upload;\r\n                audioCodec = ssrcStats.codec;\r\n            } else {\r\n                videoBitrateDownload += ssrcStats.bitrate.download;\r\n                videoBitrateUpload += ssrcStats.bitrate.upload;\r\n                videoCodec = ssrcStats.codec;\r\n            }\r\n\r\n            const participantId = track.getParticipantId();\r\n\r\n            if (participantId) {\r\n                const resolution = ssrcStats.resolution;\r\n\r\n                if (resolution.width\r\n                        && resolution.height\r\n                        && resolution.width !== -1\r\n                        && resolution.height !== -1) {\r\n                    const userResolutions = resolutions[participantId] || {};\r\n\r\n                    userResolutions[ssrc] = resolution;\r\n                    resolutions[participantId] = userResolutions;\r\n                }\r\n                if (ssrcStats.framerate !== 0) {\r\n                    const userFramerates = framerates[participantId] || {};\r\n\r\n                    userFramerates[ssrc] = ssrcStats.framerate;\r\n                    framerates[participantId] = userFramerates;\r\n                }\r\n                if (audioCodec && videoCodec) {\r\n                    const codecDesc = {\r\n                        'audio': audioCodec,\r\n                        'video': videoCodec\r\n                    };\r\n\r\n                    const userCodecs = codecs[participantId] || {};\r\n\r\n                    userCodecs[ssrc] = codecDesc;\r\n                    codecs[participantId] = userCodecs;\r\n                }\r\n            } else {\r\n                logger.error(`No participant ID returned by ${track}`);\r\n            }\r\n        }\r\n\r\n        ssrcStats.resetBitrate();\r\n    }\r\n\r\n    this.conferenceStats.bitrate = {\r\n        'upload': bitrateUpload,\r\n        'download': bitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.audio = {\r\n        'upload': audioBitrateUpload,\r\n        'download': audioBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.video = {\r\n        'upload': videoBitrateUpload,\r\n        'download': videoBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.packetLoss = {\r\n        total:\r\n            calculatePacketLoss(\r\n                lostPackets.download + lostPackets.upload,\r\n                totalPackets.download + totalPackets.upload),\r\n        download:\r\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\r\n        upload:\r\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\r\n    };\r\n\r\n    const avgAudioLevels = {};\r\n    let localAvgAudioLevels;\r\n\r\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\r\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\r\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\r\n\r\n        if (isLocal) {\r\n            localAvgAudioLevels = avgAudioLevel;\r\n        } else {\r\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\r\n\r\n            if (track) {\r\n                const participantId = track.getParticipantId();\r\n\r\n                if (participantId) {\r\n                    avgAudioLevels[participantId] = avgAudioLevel;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    this.audioLevelReportHistory = {};\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        this.peerconnection,\r\n        {\r\n            'bandwidth': this.conferenceStats.bandwidth,\r\n            'bitrate': this.conferenceStats.bitrate,\r\n            'packetLoss': this.conferenceStats.packetLoss,\r\n            'resolution': resolutions,\r\n            'framerate': framerates,\r\n            'codec': codecs,\r\n            'transport': this.conferenceStats.transport,\r\n            localAvgAudioLevels,\r\n            avgAudioLevels\r\n        });\r\n    this.conferenceStats.transport = [];\r\n};\r\n\r\n/**\r\n * Converts the value to a non-negative number.\r\n * If the value is either invalid or negative then 0 will be returned.\r\n * @param {*} v\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeValue = function(v) {\r\n    let value = v;\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/**\r\n * Calculates bitrate between before and now using a supplied field name and its\r\n * value in the stats.\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\r\n * previous stats.\r\n * @param fieldName the field to use for calculations.\r\n * @return {number} the calculated bitrate between now and before.\r\n * @private\r\n */\r\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\r\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\r\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\r\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\r\n\r\n    const timeMs = now.timestamp - before.timestamp;\r\n    let bitrateKbps = 0;\r\n\r\n    if (timeMs > 0) {\r\n        // TODO is there any reason to round here?\r\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\r\n    }\r\n\r\n    return bitrateKbps;\r\n};\r\n\r\n/**\r\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\r\n */\r\nStatsCollector.prototype.processStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n    const byteSentStats = {};\r\n\r\n    this.currentStatsReport.forEach(now => {\r\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\r\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\r\n            const availableIncomingBitrate = now.availableIncomingBitrate;\r\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\r\n\r\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(availableIncomingBitrate / 1000),\r\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\r\n                };\r\n            }\r\n\r\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\r\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\r\n\r\n            // RTCIceCandidateStats\r\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\r\n            if (remoteUsedCandidate && localUsedCandidate) {\r\n                const remoteIpAddress = browser.isChromiumBased()\r\n                    ? remoteUsedCandidate.ip\r\n                    : remoteUsedCandidate.address;\r\n                const remotePort = remoteUsedCandidate.port;\r\n                const ip = `${remoteIpAddress}:${remotePort}`;\r\n\r\n                const localIpAddress = browser.isChromiumBased()\r\n                    ? localUsedCandidate.ip\r\n                    : localUsedCandidate.address;\r\n                const localPort = localUsedCandidate.port;\r\n                const localip = `${localIpAddress}:${localPort}`;\r\n                const type = remoteUsedCandidate.protocol;\r\n\r\n                // Save the address unless it has been saved already.\r\n                const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n                if (!conferenceStatsTransport.some(t =>\r\n                    t.ip === ip\r\n                    && t.type === type\r\n                    && t.localip === localip)) {\r\n                    conferenceStatsTransport.push({\r\n                        ip,\r\n                        type,\r\n                        localip,\r\n                        p2p: this.peerconnection.isP2P,\r\n                        localCandidateType: localUsedCandidate.candidateType,\r\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\r\n                        networkType: localUsedCandidate.networkType,\r\n                        rtt: now.currentRoundTripTime * 1000\r\n                    });\r\n                }\r\n            }\r\n\r\n        // RTCReceivedRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\r\n        // RTCSentRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\r\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\r\n            const before = this.previousStatsReport.get(now.id);\r\n            const ssrc = this.getNonNegativeValue(now.ssrc);\r\n\r\n            if (!before || !ssrc) {\r\n                return;\r\n            }\r\n\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n\r\n            let isDownloadStream = true;\r\n            let key = 'packetsReceived';\r\n\r\n            if (now.type === 'outbound-rtp') {\r\n                isDownloadStream = false;\r\n                key = 'packetsSent';\r\n            }\r\n\r\n            let packetsNow = now[key];\r\n\r\n            if (!packetsNow || packetsNow < 0) {\r\n                packetsNow = 0;\r\n            }\r\n\r\n            const packetsBefore = this.getNonNegativeValue(before[key]);\r\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\r\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\r\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n            ssrcStats.setLoss({\r\n                packetsTotal: packetsDiff + packetsLostDiff,\r\n                packetsLost: packetsLostDiff,\r\n                isDownloadStream\r\n            });\r\n\r\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\r\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\r\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\r\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\r\n            // 'outbound-rtp' stats are used.\r\n            if (now.type === 'inbound-rtp') {\r\n                const resolution = {\r\n                    height: now.frameHeight,\r\n                    width: now.frameWidth\r\n                };\r\n                const frameRate = now.framesPerSecond;\r\n\r\n                if (resolution.height && resolution.width) {\r\n                    ssrcStats.setResolution(resolution);\r\n                }\r\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n                ssrcStats.addBitrate({\r\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\r\n                    'upload': 0\r\n                });\r\n            } else {\r\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\r\n                ssrcStats.addBitrate({\r\n                    'download': 0,\r\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\r\n                });\r\n            }\r\n\r\n            const codec = this.currentStatsReport.get(now.codecId);\r\n\r\n            if (codec) {\r\n                /**\r\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\r\n                 * so we what to keep just the type after the '/', audio and video\r\n                 * keys will be added on the processing side.\r\n                 */\r\n                const codecShortType = codec.mimeType.split('/')[1];\r\n\r\n                codecShortType && ssrcStats.setCodec(codecShortType);\r\n            }\r\n\r\n        // Use track stats for resolution and framerate of the local video source.\r\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\r\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\r\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\r\n            const resolution = {\r\n                height: now.frameHeight,\r\n                width: now.frameWidth\r\n            };\r\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\r\n\r\n            if (!localVideoTracks?.length) {\r\n                return;\r\n            }\r\n\r\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\r\n\r\n            if (!ssrc) {\r\n                return;\r\n            }\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n            if (resolution.height && resolution.width) {\r\n                ssrcStats.setResolution(resolution);\r\n            }\r\n\r\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\r\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\r\n            let frameRate = now.framesPerSecond;\r\n\r\n            if (!frameRate) {\r\n                const before = this.previousStatsReport.get(now.id);\r\n\r\n                if (before) {\r\n                    const timeMs = now.timestamp - before.timestamp;\r\n\r\n                    if (timeMs > 0 && now.framesSent) {\r\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\r\n\r\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\r\n                    }\r\n                }\r\n\r\n                if (!frameRate) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Get the number of simulcast streams currently enabled from TPC.\r\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\r\n\r\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\r\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\r\n            ssrcStats.setFramerate(frameRate);\r\n        }\r\n    });\r\n\r\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    this.currentAudioLevelsReport.forEach(now => {\r\n        if (now.type !== 'track') {\r\n            return;\r\n        }\r\n\r\n        // Audio level\r\n        const audioLevel = now.audioLevel;\r\n\r\n        if (!audioLevel) {\r\n            return;\r\n        }\r\n\r\n        const trackIdentifier = now.trackIdentifier;\r\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n        if (ssrc) {\r\n            const isLocal\r\n                = ssrc === this.peerconnection.getLocalSSRC(\r\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    });\r\n};\r\n\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport analytics from './AnalyticsAdapter';\r\nimport CallStats from './CallStats';\r\nimport LocalStats from './LocalStatsCollector';\r\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\r\nimport RTPStats from './RTPStatsCollector';\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Stores all active {@link Statistics} instances.\r\n * @type {Set<Statistics>}\r\n */\r\nlet _instances;\r\n\r\n/**\r\n * True if callstats API is loaded\r\n */\r\nlet isCallstatsLoaded = false;\r\n\r\n/**\r\n * Since callstats.io is a third party, we cannot guarantee the quality of their\r\n * service. More specifically, their server may take noticeably long time to\r\n * respond. Consequently, it is in our best interest (in the sense that the\r\n * intergration of callstats.io is pretty important to us but not enough to\r\n * allow it to prevent people from joining a conference) to (1) start\r\n * downloading their API as soon as possible and (2) do the downloading\r\n * asynchronously.\r\n *\r\n * @param {StatisticsOptions} options - Options to use for downloading and\r\n * initializing callstats backend.\r\n */\r\nfunction loadCallStatsAPI(options) {\r\n    if (!isCallstatsLoaded) {\r\n        ScriptUtil.loadScript(\r\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ () => _initCallStatsBackend(options)\r\n        );\r\n        isCallstatsLoaded = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes Callstats backend.\r\n *\r\n * @param {StatisticsOptions} options - The options to use for initializing\r\n * callstats backend.\r\n * @private\r\n */\r\nfunction _initCallStatsBackend(options) {\r\n    if (CallStats.isBackendInitialized()) {\r\n        return;\r\n    }\r\n\r\n    if (!CallStats.initBackend({\r\n        callStatsID: options.callStatsID,\r\n        callStatsSecret: options.callStatsSecret,\r\n        userName: options.userName,\r\n        aliasName: options.aliasName,\r\n        applicationName: options.applicationName,\r\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\r\n        confID: options.confID,\r\n        siteID: options.siteID,\r\n        configParams: options.configParams\r\n    })) {\r\n        logger.error('CallStats Backend initialization failed bad');\r\n    }\r\n}\r\n\r\n/**\r\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\r\n * \"message\" and \"constraintName\". So we need to bundle additional information\r\n * from JitsiTrackError into error passed to callstats to preserve valuable\r\n * information about error.\r\n * @param {JitsiTrackError} error\r\n */\r\nfunction formatJitsiTrackErrorForCallStats(error) {\r\n    const err = new Error();\r\n\r\n    // Just copy original stack from error\r\n    err.stack = error.stack;\r\n\r\n    // Combine name from error's name plus (possibly) name of original GUM error\r\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\r\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\r\n\r\n    // Put all constraints into this field. For constraint failed errors we will\r\n    // still know which exactly constraint failed as it will be a part of\r\n    // message.\r\n    err.constraintName = error.gum && error.gum.constraints\r\n        ? JSON.stringify(error.gum.constraints) : '';\r\n\r\n    // Just copy error's message.\r\n    err.message = error.message;\r\n\r\n    return err;\r\n}\r\n\r\n/**\r\n * Init statistic options\r\n * @param options\r\n */\r\nStatistics.init = function(options) {\r\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\r\n    if (typeof options.pcStatsInterval === 'number') {\r\n        Statistics.pcStatsInterval = options.pcStatsInterval;\r\n    }\r\n\r\n    if (typeof options.audioLevelsInterval === 'number') {\r\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\r\n    }\r\n\r\n    if (typeof options.longTasksStatsInterval === 'number') {\r\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\r\n    }\r\n\r\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\r\n};\r\n\r\n/**\r\n * The options to configure Statistics.\r\n * @typedef {Object} StatisticsOptions\r\n * @property {string} applicationName - The application name to pass to\r\n * callstats.\r\n * @property {string} aliasName - The alias name to use when initializing callstats.\r\n * @property {string} userName - The user name to use when initializing callstats.\r\n * @property {string} confID - The callstats conference ID to use.\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} customScriptUrl - A custom lib url to use when downloading\r\n * callstats library.\r\n * @property {string} roomName - The room name we are currently in.\r\n * @property {string} configParams - The set of parameters\r\n * to enable/disable certain features in the library. See CallStats docs for more info.\r\n */\r\n/**\r\n *\r\n * @param xmpp\r\n * @param {StatisticsOptions} options - The options to use creating the\r\n * Statistics.\r\n */\r\nexport default function Statistics(xmpp, options) {\r\n    /**\r\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\r\n     * collect RTP statistics for each peerconnection.\r\n     * @type {Map<string, RTPStats}\r\n     */\r\n    this.rtpStatsMap = new Map();\r\n    this.eventEmitter = new EventEmitter();\r\n    this.xmpp = xmpp;\r\n    this.options = options || {};\r\n\r\n    this.callStatsIntegrationEnabled\r\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\r\n\r\n            // Even though AppID and AppSecret may be specified, the integration\r\n            // of callstats.io may be disabled because of globally-disallowed\r\n            // requests to any third parties.\r\n            && (Statistics.disableThirdPartyRequests !== true);\r\n    if (this.callStatsIntegrationEnabled) {\r\n        this.callStatsApplicationLogsDisabled\r\n            = this.options.callStatsApplicationLogsDisabled;\r\n        if (browser.isReactNative()) {\r\n            _initCallStatsBackend(this.options);\r\n        } else {\r\n            loadCallStatsAPI(this.options);\r\n        }\r\n\r\n        if (!this.options.confID) {\r\n            logger.warn('\"confID\" is not defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores {@link CallStats} instances for each\r\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\r\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\r\n     * @type {Map<number, CallStats>}\r\n     */\r\n    this.callsStatsInstances = new Map();\r\n\r\n    Statistics.instances.add(this);\r\n}\r\nStatistics.audioLevelsEnabled = false;\r\nStatistics.audioLevelsInterval = 200;\r\nStatistics.pcStatsInterval = 10000;\r\nStatistics.disableThirdPartyRequests = false;\r\nStatistics.analytics = analytics;\r\n\r\nObject.defineProperty(Statistics, 'instances', {\r\n    /**\r\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\r\n     * initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<Statistics>}\r\n     */\r\n    get() {\r\n        if (!_instances) {\r\n            _instances = new Set();\r\n        }\r\n\r\n        return _instances;\r\n    }\r\n});\r\n\r\n/**\r\n * Starts collecting RTP stats for given peerconnection.\r\n * @param {TraceablePeerConnection} peerconnection\r\n */\r\nStatistics.prototype.startRemoteStats = function(peerconnection) {\r\n    this.stopRemoteStats(peerconnection);\r\n\r\n    try {\r\n        const rtpStats\r\n            = new RTPStats(\r\n                peerconnection,\r\n                Statistics.audioLevelsInterval,\r\n                Statistics.pcStatsInterval,\r\n                this.eventEmitter);\r\n\r\n        rtpStats.start(Statistics.audioLevelsEnabled);\r\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\r\n    } catch (e) {\r\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\r\n    }\r\n};\r\n\r\nStatistics.localStats = [];\r\n\r\nStatistics.startLocalStats = function(stream, callback) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\r\n        callback);\r\n\r\n    this.localStats.push(localStats);\r\n    localStats.start();\r\n};\r\n\r\nStatistics.prototype.addAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.removeAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.addConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.addByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\r\n        listener);\r\n};\r\n\r\n/**\r\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener a function that would be called when notified.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\n/**\r\n * Creates an instance of {@link PerformanceObserverStats} and starts the\r\n * observer that records the stats periodically.\r\n *\r\n * @returns {void}\r\n */\r\nStatistics.prototype.attachLongTasksStats = function(conference) {\r\n    if (!browser.supportsPerformanceObserver()) {\r\n        logger.warn('Performance observer for long tasks not supported by browser!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.performanceObserverStats = new PerformanceObserverStats(\r\n        this.eventEmitter,\r\n        Statistics.longTasksStatsInterval);\r\n\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_JOINED,\r\n        () => this.performanceObserverStats.startObserver());\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_LEFT,\r\n        () => this.performanceObserverStats.stopObserver());\r\n};\r\n\r\n/**\r\n * Obtains the current value of the LongTasks event statistics.\r\n *\r\n * @returns {Object|null} stats object if the observer has been\r\n * created, null otherwise.\r\n */\r\nStatistics.prototype.getLongTasksStats = function() {\r\n    return this.performanceObserverStats\r\n        ? this.performanceObserverStats.getLongTasksStats()\r\n        : null;\r\n};\r\n\r\n/**\r\n * Removes the given listener for the LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener the listener we want to remove.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\n/**\r\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\r\n *\r\n * @param {Array<string>} speakerList The list of remote endpoint ids.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.setSpeakerList = function(speakerList) {\r\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\r\n        if (!rtpStats.peerconnection.isP2P) {\r\n            rtpStats.setSpeakerList(speakerList);\r\n        }\r\n    }\r\n};\r\n\r\nStatistics.prototype.dispose = function() {\r\n    try {\r\n        // NOTE Before reading this please see the comment in stopCallStats...\r\n        //\r\n        // Here we prevent from emitting the event twice in case it will be\r\n        // triggered from stopCallStats.\r\n        // If the event is triggered from here it means that the logs will not\r\n        // be submitted anyway (because there is no CallStats instance), but\r\n        // we're doing that for the sake of some kind of consistency.\r\n        if (!this.callsStatsInstances.size) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        for (const callStats of this.callsStatsInstances.values()) {\r\n            this.stopCallStats(callStats.tpc);\r\n        }\r\n        for (const tpcId of this.rtpStatsMap.keys()) {\r\n            this._stopRemoteStats(tpcId);\r\n        }\r\n        if (this.eventEmitter) {\r\n            this.eventEmitter.removeAllListeners();\r\n        }\r\n    } finally {\r\n        Statistics.instances.delete(this);\r\n    }\r\n};\r\n\r\nStatistics.stopLocalStats = function(stream) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < Statistics.localStats.length; i++) {\r\n        if (Statistics.localStats[i].stream === stream) {\r\n            const localStats = Statistics.localStats.splice(i, 1);\r\n\r\n            localStats[0].stop();\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Stops remote RTP stats for given peerconnection ID.\r\n * @param {string} tpcId {@link TraceablePeerConnection.id}\r\n * @private\r\n */\r\nStatistics.prototype._stopRemoteStats = function(tpcId) {\r\n    const rtpStats = this.rtpStatsMap.get(tpcId);\r\n\r\n    if (rtpStats) {\r\n        rtpStats.stop();\r\n        this.rtpStatsMap.delete(tpcId);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops collecting RTP stats for given peerconnection\r\n * @param {TraceablePeerConnection} tpc\r\n */\r\nStatistics.prototype.stopRemoteStats = function(tpc) {\r\n    this._stopRemoteStats(tpc.id);\r\n};\r\n\r\n// CALSTATS METHODS\r\n\r\n/**\r\n * Initializes the callstats.io API.\r\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\r\n * instance for which CalStats will be started.\r\n * @param {string} remoteUserID\r\n */\r\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\r\n    if (!this.callStatsIntegrationEnabled) {\r\n        return;\r\n    } else if (this.callsStatsInstances.has(tpc.id)) {\r\n        logger.error('CallStats instance for ${tpc} exists already');\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`Starting CallStats for ${tpc}...`);\r\n\r\n    const newInstance\r\n        = new CallStats(\r\n            tpc,\r\n            {\r\n                confID: this.options.confID,\r\n                remoteUserID\r\n            });\r\n\r\n    this.callsStatsInstances.set(tpc.id, newInstance);\r\n};\r\n\r\n/**\r\n * Obtains the list of *all* {@link CallStats} instances collected from every\r\n * valid {@link Statistics} instance.\r\n * @return {Set<CallStats>}\r\n * @private\r\n */\r\nStatistics._getAllCallStatsInstances = function() {\r\n    const csInstances = new Set();\r\n\r\n    for (const statistics of Statistics.instances) {\r\n        for (const cs of statistics.callsStatsInstances.values()) {\r\n            csInstances.add(cs);\r\n        }\r\n    }\r\n\r\n    return csInstances;\r\n};\r\n\r\n/**\r\n * Removes the callstats.io instances.\r\n */\r\nStatistics.prototype.stopCallStats = function(tpc) {\r\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (callStatsInstance) {\r\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\r\n        // able to submit the last log batch from jitsi-meet to CallStats. After\r\n        // recent changes we dispose the CallStats earlier\r\n        // (before Statistics.dispose), so we need to emit this event here to\r\n        // give this last chance for final log batch submission.\r\n        //\r\n        // Eventually there should be a separate module called \"log storage\"\r\n        // which should emit proper events when it's underlying\r\n        // CallStats instance is going away.\r\n        if (this.callsStatsInstances.size === 1) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        this.callsStatsInstances.delete(tpc.id);\r\n\r\n        // The fabric needs to be terminated when being stopped\r\n        callStatsInstance.sendTerminateEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nStatistics.prototype.isCallstatsEnabled = function() {\r\n    return this.callStatsIntegrationEnabled;\r\n};\r\n\r\n/**\r\n * Logs either resume or hold event for the given peer connection.\r\n * @param {TraceablePeerConnection} tpc the connection for which event will be\r\n * reported\r\n * @param {boolean} isResume true for resume or false for hold\r\n */\r\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendResumeOrHoldEvent(isResume);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats and analytics (if present) for ice connection failed\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendIceConnectionFailedEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats for mute events\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n * @param {boolean} muted true for muted and false for not muted\r\n * @param {String} type \"audio\"/\"video\"\r\n */\r\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\r\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\r\n\r\n    CallStats.sendMuteEvent(muted, type, instance);\r\n};\r\n\r\n/**\r\n * Notifies CallStats for screen sharing events\r\n * @param start {boolean} true for starting screen sharing and\r\n * false for not stopping\r\n * @param {string|null} ssrc - optional ssrc value, used only when\r\n * starting screen sharing.\r\n */\r\nStatistics.prototype.sendScreenSharingEvent\r\n    = function(start, ssrc) {\r\n        for (const cs of this.callsStatsInstances.values()) {\r\n            cs.sendScreenSharingEvent(start, ssrc);\r\n        }\r\n    };\r\n\r\n/**\r\n * Notifies the statistics module that we are now the dominant speaker of the\r\n * conference.\r\n * @param {String} roomJid - The room jid where the speaker event occurred.\r\n */\r\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\r\n    for (const cs of this.callsStatsInstances.values()) {\r\n        cs.sendDominantSpeakerEvent();\r\n    }\r\n\r\n    // xmpp send dominant speaker event\r\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\r\n};\r\n\r\n/**\r\n * Notifies about active device.\r\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\r\n *      their data\r\n */\r\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\r\n    }\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Lets the underlying statistics module know where is given SSRC rendered by\r\n * providing renderer tag ID.\r\n * @param {TraceablePeerConnection} tpc the connection to which the stream\r\n * belongs to\r\n * @param {number} ssrc the SSRC of the stream\r\n * @param {boolean} isLocal\r\n * @param {string} userId\r\n * @param {string} usageLabel  meaningful usage label of this stream like\r\n *        'microphone', 'camera' or 'screen'.\r\n * @param {string} containerId the id of media 'audio' or 'video' tag which\r\n *        renders the stream.\r\n */\r\nStatistics.prototype.associateStreamWithVideoTag = function(\r\n        tpc,\r\n        ssrc,\r\n        isLocal,\r\n        userId,\r\n        usageLabel,\r\n        containerId) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            userId,\r\n            usageLabel,\r\n            containerId);\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Notifies CallStats that getUserMedia failed.\r\n *\r\n * @param {Error} e error to send\r\n */\r\nStatistics.sendGetUserMediaFailed = function(e) {\r\n    const error\r\n        = e instanceof JitsiTrackError\r\n            ? formatJitsiTrackErrorForCallStats(e) : e;\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendGetUserMediaFailed(error, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendGetUserMediaFailed(error, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create offer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateOfferFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create answer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\r\n */\r\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateAnswerFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set local description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetLocalDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set remote description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetRemoteDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to add ICE candidate.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendAddIceCandidateFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds to CallStats an application log.\r\n *\r\n * @param {String} m a log message to send or an {Error} object to be reported\r\n */\r\nStatistics.sendLog = function(m) {\r\n    const globalSubSet = new Set();\r\n\r\n    // FIXME we don't want to duplicate logs over P2P instance, but\r\n    // here we should go over instances and call this method for each\r\n    // unique conference ID rather than selecting the first one.\r\n    // We don't have such use case though, so leaving as is for now.\r\n    for (const stats of Statistics.instances) {\r\n        if (stats.callStatsApplicationLogsDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (stats.callsStatsInstances.size) {\r\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\r\n        }\r\n    }\r\n\r\n    if (globalSubSet.size) {\r\n        for (const csPerStats of globalSubSet) {\r\n            CallStats.sendApplicationLog(m, csPerStats);\r\n        }\r\n    } else {\r\n        CallStats.sendApplicationLog(m, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats.\r\n *\r\n * @param overall an integer between 1 and 5 indicating the user's rating.\r\n * @param comment the comment from the user.\r\n * @returns {Promise} Resolves when callstats feedback has been submitted\r\n * successfully.\r\n */\r\nStatistics.prototype.sendFeedback = function(overall, comment) {\r\n    // Statistics.analytics.sendEvent is currently fire and forget, without\r\n    // confirmation of successful send.\r\n    Statistics.analytics.sendEvent(\r\n        FEEDBACK,\r\n        {\r\n            rating: overall,\r\n            comment\r\n        });\r\n\r\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\r\n};\r\n\r\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\r\n\r\n/**\r\n * Reports global error to CallStats.\r\n *\r\n * @param {Error} error\r\n */\r\nStatistics.reportGlobalError = function(error) {\r\n    if (error instanceof JitsiTrackError && error.gum) {\r\n        Statistics.sendGetUserMediaFailed(error);\r\n    } else {\r\n        Statistics.sendLog(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends event to analytics and logs a message to the logger/console. Console\r\n * messages might also be logged to callstats automatically.\r\n *\r\n * @param {string | Object} event the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event (if an event\r\n * name as opposed to an event object is provided).\r\n */\r\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\r\n    if (!event) {\r\n        logger.warn('No event or event name given.');\r\n\r\n        return;\r\n    }\r\n\r\n    let eventToLog;\r\n\r\n    // Also support an API with a single object as an event.\r\n    if (typeof event === 'object') {\r\n        eventToLog = event;\r\n    } else {\r\n        eventToLog = {\r\n            name: event,\r\n            properties\r\n        };\r\n    }\r\n\r\n    logger.log(JSON.stringify(eventToLog));\r\n\r\n    // We do this last, because it may modify the object which is passed.\r\n    this.analytics.sendEvent(event, properties);\r\n};\r\n\r\n/**\r\n * Sends event to analytics.\r\n *\r\n * @param {string | Object} eventName the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event\r\n */\r\nStatistics.sendAnalytics = function(eventName, properties = {}) {\r\n    this.analytics.sendEvent(eventName, properties);\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport AuthenticationEvents\r\n    from './service/authentication/AuthenticationEvents';\r\nimport {\r\n    ACTION_JINGLE_SA_TIMEOUT,\r\n    createBridgeDownEvent,\r\n    createConnectionStageReachedEvent,\r\n    createFocusLeftEvent,\r\n    createJingleEvent,\r\n    createRemotelyMutedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Setups all event listeners related to conference\r\n * @param conference {JitsiConference} the conference\r\n */\r\nexport default function JitsiConferenceEventManager(conference) {\r\n    this.conference = conference;\r\n    this.xmppListeners = {};\r\n\r\n    // Listeners related to the conference only\r\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n        track => {\r\n            if (!track.isLocal() || !conference.statistics) {\r\n                return;\r\n            }\r\n            const session\r\n                = track.isP2P\r\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\r\n\r\n            // TPC will be null, before the conference starts, but the event\r\n            // still should be queued\r\n            const tpc = (session && session.peerconnection) || null;\r\n\r\n            conference.statistics.sendMuteEvent(\r\n                tpc,\r\n                track.isMuted(),\r\n                track.getType());\r\n        });\r\n}\r\n\r\n/**\r\n * Setups event listeners related to conference.chatRoom\r\n */\r\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\r\n    const conference = this.conference;\r\n    const chatRoom = conference.room;\r\n\r\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\r\n        this.conference.eventEmitter);\r\n\r\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\r\n        if (!jingleSession.isP2P) {\r\n            // If using DataChannel as bridge channel, it must be closed\r\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\r\n            // event for the channel established with the new bridge.\r\n            // TODO: This may be bypassed when using a WebSocket as bridge\r\n            // channel.\r\n            conference.rtc.closeBridgeChannel();\r\n        }\r\n\r\n        // else: there are no DataChannels in P2P session (at least for now)\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\r\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            participant.setFeatures(features);\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.ICE_RESTART_SUCCESS,\r\n        (jingleSession, offerIq) => {\r\n            // The JVB data chanel needs to be reopened in case the conference\r\n            // has been moved to a new bridge.\r\n            !jingleSession.isP2P\r\n                && conference._setBridgeChannel(\r\n                    offerIq, jingleSession.peerconnection);\r\n        });\r\n\r\n\r\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\r\n\r\n            conference.mutedByFocusActor = actor;\r\n\r\n            // set isMutedByFocus when setAudioMute Promise ends\r\n            conference.rtc.setAudioMute(true).then(\r\n                () => {\r\n                    conference.isMutedByFocus = true;\r\n                    conference.mutedByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while audio muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\r\n\r\n            conference.mutedVideoByFocusActor = actor;\r\n\r\n            // set isVideoMutedByFocus when setVideoMute Promise ends\r\n            conference.rtc.setVideoMute(true).then(\r\n                () => {\r\n                    conference.isVideoMutedByFocus = true;\r\n                    conference.mutedVideoByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedVideoByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while video muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\r\n        JitsiConferenceEvents.SUBJECT_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\r\n        JitsiConferenceEvents.CONFERENCE_JOINED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\r\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\r\n\r\n    // send some analytics events\r\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\r\n        () => {\r\n            this.conference._onMucJoined();\r\n\r\n            this.conference.isJvbConnectionInterrupted = false;\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `conference_${key}`,\r\n                        { value: chatRoom.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `xmpp_${key}`,\r\n                        { value: chatRoom.xmpp.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\r\n        if (!session.isP2P) {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n        }\r\n    });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\r\n    chatRoom.addListener(\r\n        XMPPEvents.BRIDGE_DOWN,\r\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\r\n        jingleSession => {\r\n            conference._onConferenceRestarted(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.RESERVATION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n        jingleSession => {\r\n            conference._onIceConnectionFailed(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\r\n        JitsiConferenceEvents.CONFERENCE_ERROR,\r\n        JitsiConferenceErrors.CHAT_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\r\n\r\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\r\n        () => {\r\n            Statistics.sendAnalytics(createFocusLeftEvent());\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.FOCUS_LEFT);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\r\n        jingleSession => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createJingleEvent(\r\n                    ACTION_JINGLE_SA_TIMEOUT,\r\n                    { p2p: jingleSession.isP2P }));\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\r\n        (session, jid) => {\r\n\r\n            if (jid) {\r\n                const resource = Strophe.getResourceFromJid(jid);\r\n                const participant = conference.getParticipantById(resource) || resource;\r\n\r\n                if (session.getStatus() === 'off') {\r\n                    session.setTerminator(participant);\r\n                } else if (session.getStatus() === 'on') {\r\n                    session.setInitiator(participant);\r\n                }\r\n            }\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                session);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(\r\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\r\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\r\n\r\n    chatRoom.setParticipantPropertyListener((node, from) => {\r\n        const participant = conference.getParticipantById(from);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        participant.setProperty(\r\n            node.tagName.substring('jitsi_participant_'.length),\r\n            node.value);\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.KICKED,\r\n        conference.onMemberKicked.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\r\n        conference.onSuspendDetected.bind(conference));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\r\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\r\n        conference.onMemberJoined.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\r\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n        conference._onMemberBotTypeChanged.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\r\n        conference.onMemberLeft.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\r\n        JitsiConferenceEvents.CONFERENCE_LEFT);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\r\n\r\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\r\n        conference.onDisplayNameChanged.bind(conference));\r\n\r\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\r\n        conference.onLocalRoleChanged(role);\r\n\r\n        // log all events for the recorder operated by the moderator\r\n        if (conference.statistics && conference.isModerator()) {\r\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                recorderSession => {\r\n                    const logObject = {\r\n                        error: recorderSession.getError(),\r\n                        id: 'recorder_status',\r\n                        status: recorderSession.getStatus()\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n                });\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\r\n        conference.onUserRoleChanged.bind(conference));\r\n\r\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\r\n        (authEnabled, authIdentity) => {\r\n            conference.authEnabled = authEnabled;\r\n            conference.authIdentity = authIdentity;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\r\n                authIdentity);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\r\n        (jid, status) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (!participant || participant._status === status) {\r\n                return;\r\n            }\r\n            participant._status = status;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const id = Strophe.getResourceFromJid(from);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\r\n                    id, payload);\r\n            }\r\n        });\r\n\r\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\r\n        let isModerator = false;\r\n\r\n        if (conference.myUserId() === from && conference.isModerator()) {\r\n            isModerator = true;\r\n        } else {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant && participant.isModerator()) {\r\n                isModerator = true;\r\n            }\r\n        }\r\n\r\n        if (!isModerator) {\r\n            return;\r\n        }\r\n\r\n        const startAudioMuted = data.attributes.audio === 'true';\r\n        const startVideoMuted = data.attributes.video === 'true';\r\n\r\n        let updated = false;\r\n\r\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\r\n            conference.startMutedPolicy.audio = startAudioMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\r\n            conference.startMutedPolicy.video = startVideoMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (updated) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\r\n                conference.startMutedPolicy\r\n            );\r\n        }\r\n    });\r\n\r\n    if (conference.statistics) {\r\n        // FIXME ICE related events should end up in RTCEvents eventually\r\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n            session => {\r\n                conference.statistics.sendIceConnectionFailedEvent(\r\n                    session.peerconnection);\r\n            });\r\n\r\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\r\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\r\n            (e, pc) => {\r\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.rtc\r\n */\r\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\r\n    const conference = this.conference;\r\n    const rtc = conference.rtc;\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_ADDED,\r\n        conference.onRemoteTrackAdded.bind(conference));\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_REMOVED,\r\n        conference.onRemoteTrackRemoved.bind(conference));\r\n\r\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n        (dominant, previous) => {\r\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\r\n                conference.lastDominantSpeaker = dominant;\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\r\n\r\n                if (previous && previous.length) {\r\n                    const speakerList = previous.slice(0);\r\n\r\n                    // Add the dominant speaker to the top of the list (exclude self).\r\n                    if (conference.myUserId !== dominant) {\r\n                        speakerList.splice(0, 0, dominant);\r\n                    }\r\n\r\n                    // Trim the list to the top 5 speakers only.\r\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\r\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\r\n                    }\r\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\r\n                }\r\n                if (conference.statistics && conference.myUserId() === dominant) {\r\n                    // We are the new dominant speaker.\r\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\r\n                }\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n        const now = window.performance.now();\r\n        const key = 'data.channel.opened';\r\n\r\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n        logger.log(`(TIME) ${key}:\\t`, now);\r\n        conference.room.connectionTimes[key] = now;\r\n        Statistics.sendAnalytics(\r\n            createConnectionStageReachedEvent(key, { value: now }));\r\n\r\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\r\n    });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\r\n                        + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\r\n            } else {\r\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'local_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'remote_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateOfferFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n        (track, ssrc) => {\r\n            // when starting screen sharing, the track is created and when\r\n            // we do set local description and we process the ssrc we\r\n            // will be notified for it and we will report it with the event\r\n            // for screen sharing\r\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Removes event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    Object.keys(this.xmppListeners).forEach(eventName => {\r\n        conference.xmpp.removeListener(\r\n            eventName,\r\n            this.xmppListeners[eventName]);\r\n    });\r\n    this.xmppListeners = {};\r\n};\r\n\r\n\r\n/**\r\n * Setups event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_INCOMING,\r\n        conference.onIncomingCall.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ACCEPTED,\r\n        conference.onCallAccepted.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.TRANSPORT_INFO,\r\n        conference.onTransportInfo.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ENDED,\r\n        conference.onCallEnded.bind(conference));\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\r\n        (audioMuted, videoMuted) => {\r\n            if (conference.options.config.ignoreStartMuted) {\r\n                return;\r\n            }\r\n\r\n            conference.startAudioMuted = audioMuted;\r\n            conference.startVideoMuted = videoMuted;\r\n\r\n            // mute existing local tracks because this is initial mute from\r\n            // Jicofo\r\n            conference.getLocalTracks().forEach(track => {\r\n                switch (track.getType()) {\r\n                case MediaType.AUDIO:\r\n                    conference.startAudioMuted && track.mute();\r\n                    break;\r\n                case MediaType.VIDEO:\r\n                    conference.startVideoMuted && track.mute();\r\n                    break;\r\n                }\r\n            });\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\r\n        createdTimestamp => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\r\n        (value, mediaType, actorJid) => {\r\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\r\n                enabled: value,\r\n                mediaType,\r\n                actor: actorParticipant\r\n            });\r\n        });\r\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\r\n        (mediaType, jid) => {\r\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\r\n                    participant,\r\n                    mediaType\r\n                });\r\n            }\r\n        });\r\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\r\n        (mediaType, jid) => {\r\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\r\n                    participant,\r\n                    mediaType\r\n                });\r\n            }\r\n        });\r\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\r\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\r\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\r\n        value => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\r\n        });\r\n};\r\n\r\n/**\r\n * Add XMPP listener and save its reference for remove on leave conference.\r\n */\r\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\r\n        eventName, listener) {\r\n    this.xmppListeners[eventName] = listener;\r\n    this.conference.xmpp.addListener(eventName, listener);\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.statistics\r\n */\r\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    if (!conference.statistics) {\r\n        return;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\r\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\r\n    });\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    // Forward the \"before stats disposed\" event\r\n    conference.statistics.addBeforeDisposedListener(() => {\r\n        conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\r\n    });\r\n\r\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\r\n    if (!conference.options.config.startSilent) {\r\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\r\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\r\n                const ssrc = tpc.getLocalSSRC(track);\r\n\r\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\r\n                    return;\r\n                }\r\n\r\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\r\n            });\r\n        });\r\n    }\r\n};\r\n","/**\r\n * The media track was removed to the conference.\r\n */\r\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\r\n\r\n/**\r\n * Audio levels of a this track was changed.\r\n * The first argument is a number with audio level value in range [0, 1].\r\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\r\n * connection which measured the audio level (one audio track can be added\r\n * to multiple peer connection at the same time). This argument is optional for\r\n * local tracks for which we can measure audio level without the peer\r\n * connection (the value will be <tt>undefined</tt>).\r\n *\r\n * NOTE The second argument should be treated as library internal and can be\r\n * removed at any time.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\r\n\r\n/**\r\n * The audio output of the track was changed.\r\n */\r\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\r\n\r\n/**\r\n * A media track mute status was changed.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\r\n\r\n/**\r\n * The video type(\"camera\" or \"desktop\") of the track was changed.\r\n */\r\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\r\n\r\n/**\r\n * Indicates that the track is not receiving any data even though we expect it\r\n * to receive data (i.e. the stream is not stopped).\r\n */\r\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\r\n\r\n/**\r\n * Indicates that the local audio track is not receiving any audio input from\r\n * the microphone that is currently selected.\r\n */\r\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default value of 500 milliseconds for\r\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\r\n\r\n/**\r\n * Default value of 2000 milliseconds for\r\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\r\n\r\n/**\r\n * The time to wait a track to be restored. Track which was out of lastN\r\n * should be inactive and when entering lastN it becomes restoring and when\r\n * data is received from bridge it will become active, but if no data is\r\n * received for some time we set status of that participant connection to\r\n * interrupted.\r\n * @type {number}\r\n */\r\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\r\n\r\n/**\r\n * Participant connection statuses.\r\n *\r\n * @type {{\r\n *      ACTIVE: string,\r\n *      INACTIVE: string,\r\n *      INTERRUPTED: string,\r\n *      RESTORING: string\r\n * }}\r\n */\r\nexport const ParticipantConnectionStatus = {\r\n    /**\r\n     * Status indicating that connection is currently active.\r\n     */\r\n    ACTIVE: 'active',\r\n\r\n    /**\r\n     * Status indicating that connection is currently inactive.\r\n     * Inactive means the connection was stopped on purpose from the bridge,\r\n     * like exiting lastN or adaptivity decided to drop video because of not\r\n     * enough bandwidth.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Status indicating that connection is currently interrupted.\r\n     */\r\n    INTERRUPTED: 'interrupted',\r\n\r\n    /**\r\n     * Status indicating that connection is currently restoring.\r\n     */\r\n    RESTORING: 'restoring'\r\n};\r\n\r\n/**\r\n * Class is responsible for emitting\r\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\r\n */\r\nexport default class ParticipantConnectionStatusHandler {\r\n    /* eslint-disable max-params*/\r\n    /**\r\n     * Calculates the new {@link ParticipantConnectionStatus} based on\r\n     * the values given for some specific remote user. It is assumed that\r\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\r\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\r\n     * data from the user for the last 15 seconds.\r\n     * @param {boolean} isInLastN indicates whether the user is in the last N\r\n     * set. When set to false it means that JVB is not sending any video for\r\n     * the user.\r\n     * @param {boolean} isRestoringTimedout if true it means that the user has\r\n     * been outside of last N too long to be considered\r\n     * {@link ParticipantConnectionStatus.RESTORING}.\r\n     * @param {boolean} isVideoMuted true if the user is video muted and we\r\n     * should not expect to receive any video.\r\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\r\n     * frozen detection then it will be set to true when the video track is\r\n     * frozen. If the current browser does not support frozen detection the it's\r\n     * always false.\r\n     * @return {ParticipantConnectionStatus} the new connection status for\r\n     * the user for whom the values above were provided.\r\n     * @private\r\n     */\r\n    static _getNewStateForJvbMode(\r\n            isConnectionActiveByJvb,\r\n            isInLastN,\r\n            isRestoringTimedout,\r\n            isVideoMuted,\r\n            isVideoTrackFrozen) {\r\n        if (!isConnectionActiveByJvb) {\r\n            // when there is a connection problem signaled from jvb\r\n            // it means no media was flowing for at least 15secs, so both audio\r\n            // and video are most likely interrupted\r\n            return ParticipantConnectionStatus.INTERRUPTED;\r\n        } else if (isVideoMuted) {\r\n            // If the connection is active according to JVB and the user is\r\n            // video muted there is no way for the connection to be inactive,\r\n            // because the detection logic below only makes sense for video.\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        // Logic when isVideoTrackFrozen is supported\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            if (!isVideoTrackFrozen) {\r\n                // If the video is playing we're good\r\n                return ParticipantConnectionStatus.ACTIVE;\r\n            } else if (isInLastN) {\r\n                return isRestoringTimedout\r\n                    ? ParticipantConnectionStatus.INTERRUPTED\r\n                    : ParticipantConnectionStatus.RESTORING;\r\n            }\r\n\r\n            return ParticipantConnectionStatus.INACTIVE;\r\n        }\r\n\r\n        // Because this browser is incapable of detecting frozen video we must\r\n        // rely on the lastN value\r\n        return isInLastN\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INACTIVE;\r\n    }\r\n\r\n    /* eslint-enable max-params*/\r\n\r\n    /**\r\n     * In P2P mode we don't care about any values coming from the JVB and\r\n     * the connection status can be only active or interrupted.\r\n     * @param {boolean} isVideoMuted the user if video muted\r\n     * @param {boolean} isVideoTrackFrozen true if the video track for\r\n     * the remote user is currently frozen. If the current browser does not\r\n     * support video frozen detection then it's always false.\r\n     * @return {ParticipantConnectionStatus}\r\n     * @private\r\n     */\r\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            // There's no way to detect problems in P2P when there's no video\r\n            // track frozen detection...\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        return isVideoMuted || !isVideoTrackFrozen\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INTERRUPTED;\r\n    }\r\n\r\n    /**\r\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\r\n     *\r\n     * @constructor\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {JitsiConference} conference parent conference instance\r\n     * @param {Object} options\r\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\r\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\r\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n     */\r\n    constructor(rtc, conference, options) {\r\n        this.rtc = rtc;\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\r\n         * window.setTimeout.\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.trackTimers = {};\r\n\r\n        /**\r\n         * This map holds the endpoint connection status received from the JVB\r\n         * (as it might be different than the one stored in JitsiParticipant).\r\n         * Required for getting back in sync when remote video track is removed.\r\n         * @type {Object.<string, boolean>}\r\n         */\r\n        this.connStatusFromJvb = { };\r\n\r\n        /**\r\n         * If video track frozen detection through RTC mute event is supported,\r\n         * we wait some time until video track is considered frozen. But because\r\n         * when the user falls out of last N it is expected for the video to\r\n         * freeze this timeout must be significantly reduced in \"out of last N\"\r\n         * case.\r\n         *\r\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\r\n         * user is not in last N.\r\n         * @type {number}\r\n         */\r\n        this.outOfLastNTimeout\r\n            = typeof options.outOfLastNTimeout === 'number'\r\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\r\n\r\n        /**\r\n         * How long we're going to wait after the RTC video track muted event\r\n         * for the corresponding signalling mute event, before the connection\r\n         * interrupted is fired. The default value is\r\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\r\n         *\r\n         * @type {number} amount of time in milliseconds\r\n         */\r\n        this.rtcMuteTimeout\r\n            = typeof options.rtcMuteTimeout === 'number'\r\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\r\n\r\n        /**\r\n         * This map holds a timestamp indicating  when participant's video track\r\n         * was RTC muted (it is assumed that each participant can have only 1\r\n         * video track at a time). The purpose of storing the timestamp is to\r\n         * avoid the transition to disconnected status in case of legitimate\r\n         * video mute operation where the signalling video muted event can\r\n         * arrive shortly after RTC muted event.\r\n         *\r\n         * The key is participant's ID which is the same as endpoint id in\r\n         * the Colibri conference allocated on the JVB.\r\n         *\r\n         * The value is a timestamp measured in milliseconds obtained with\r\n         * <tt>Date.now()</tt>.\r\n         *\r\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n         *       implemented in JitsiLocalTrack by extending the event to\r\n         *       the remote track and allowing to set different timeout for\r\n         *       local and remote tracks.\r\n         *\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.rtcMutedTimestamp = { };\r\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\r\n\r\n        /**\r\n         * This map holds the timestamps indicating when participant's video\r\n         * entered lastN set. Participants entering lastN will have connection\r\n         * status restoring and when we start receiving video will become\r\n         * active, but if video is not received for certain time\r\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\r\n         * will become interrupted.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.enteredLastNTimestamp = new Map();\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\r\n         * scheduled using window.setTimeout.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.restoringTimers = new Map();\r\n\r\n        /**\r\n         * A map that holds the current connection status (along with all the internal events that happen\r\n         * while in that state).\r\n         *\r\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\r\n         */\r\n        this.connectionStatusMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the video frozen timeout for given user.\r\n     * @param {string} id endpoint/participant ID\r\n     * @return {number} how long are we going to wait since RTC video muted\r\n     * even, before a video track is considered frozen.\r\n     * @private\r\n     */\r\n    _getVideoFrozenTimeout(id) {\r\n        return this.rtc.isInLastN(id)\r\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\r\n    }\r\n\r\n    /**\r\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\r\n     * listeners.\r\n     */\r\n    init() {\r\n\r\n        this._onEndpointConnStatusChanged\r\n            = this.onEndpointConnStatusChanged.bind(this);\r\n\r\n        this.rtc.addListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        // Handles P2P status changes\r\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        // Used to send analytics events for the participant that left the call.\r\n        this._onUserLeft = this.onUserLeft.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\r\n        // events for video type tracks when they stop receiving data which is\r\n        // often a sign that remote user is having connectivity issues\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n\r\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\r\n\r\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\r\n\r\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\r\n            // event handlers\r\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n\r\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n\r\n            // Listened which will be bound to JitsiRemoteTrack to listen for\r\n            // signalling mute/unmute events.\r\n            this._onSignallingMuteChanged\r\n                = this.onSignallingMuteChanged.bind(this);\r\n\r\n            // Used to send an analytics event when the video type changes.\r\n            this._onTrackVideoTypeChanged\r\n                = this.onTrackVideoTypeChanged.bind(this);\r\n        }\r\n\r\n        this._onLastNChanged = this._onLastNChanged.bind(this);\r\n        this.conference.on(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this._onLastNValueChanged\r\n            = this.refreshConnectionStatusForAll.bind(this);\r\n        this.rtc.on(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners and disposes of all resources held by this\r\n     * instance.\r\n     */\r\n    dispose() {\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE,\r\n                this._onTrackRtcMuted);\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE,\r\n                this._onTrackRtcUnmuted);\r\n\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n        }\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        const participantIds = Object.keys(this.trackTimers);\r\n\r\n        for (const participantId of participantIds) {\r\n            this.clearTimeout(participantId);\r\n            this.clearRtcMutedTimestamp(participantId);\r\n        }\r\n\r\n        for (const id in this.connectionStatusMap) {\r\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\r\n                this.onUserLeft(id);\r\n            }\r\n        }\r\n\r\n        // Clear RTC connection status cache\r\n        this.connStatusFromJvb = {};\r\n    }\r\n\r\n    /**\r\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\r\n     * notification over the data channel from the bridge about endpoint's\r\n     * connection status update.\r\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\r\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\r\n     */\r\n    onEndpointConnStatusChanged(endpointId, isActive) {\r\n\r\n        logger.debug(\r\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\r\n                endpointId}: ${isActive}`);\r\n\r\n        // Filter out events for the local JID for now\r\n        if (endpointId !== this.conference.myUserId()) {\r\n            // Store the status received over the data channels\r\n            this.connStatusFromJvb[endpointId] = isActive;\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes connection status.\r\n     * @param {JitsiParticipant} participant\r\n     * @param newStatus\r\n     */\r\n    _changeConnectionStatus(participant, newStatus) {\r\n        if (participant.getConnectionStatus() !== newStatus) {\r\n\r\n            const endpointId = participant.getId();\r\n\r\n            participant._setConnectionStatus(newStatus);\r\n\r\n            logger.debug(\r\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\r\n                    newStatus}`);\r\n\r\n            // Log the event on CallStats\r\n            Statistics.sendLog(\r\n                JSON.stringify({\r\n                    id: 'peer.conn.status',\r\n                    participant: endpointId,\r\n                    status: newStatus\r\n                }));\r\n\r\n\r\n            this.conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\r\n                endpointId, newStatus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the postponed \"connection interrupted\" event which was previously\r\n     * scheduled as a timeout on RTC 'onmute' event.\r\n     *\r\n     * @param {string} participantId - The participant for which the \"connection\r\n     * interrupted\" timeout was scheduled.\r\n     */\r\n    clearTimeout(participantId) {\r\n        if (this.trackTimers[participantId]) {\r\n            window.clearTimeout(this.trackTimers[participantId]);\r\n            this.trackTimers[participantId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of the RTC muted event for participant's video track\r\n     * @param {string} participantId the id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    clearRtcMutedTimestamp(participantId) {\r\n        this.rtcMutedTimestamp[participantId] = null;\r\n    }\r\n\r\n    /**\r\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\r\n     * a new one is added to the conference.\r\n     *\r\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\r\n     * the conference.\r\n     */\r\n    onRemoteTrackAdded(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            logger.debug(\r\n                `Detector on remote track added for: ${\r\n                    remoteTrack.getParticipantId()}`);\r\n\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\r\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners bound to the remote video track and clears\r\n     * any related timeouts.\r\n     *\r\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\r\n     * removed from the conference.\r\n     */\r\n    onRemoteTrackRemoved(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            const endpointId = remoteTrack.getParticipantId();\r\n\r\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\r\n\r\n            remoteTrack.off(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n\r\n            this.clearTimeout(endpointId);\r\n            this.clearRtcMutedTimestamp(endpointId);\r\n\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given participant's video is considered frozen.\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\r\n     * participant or <tt>false</tt> when it's either not considered frozen\r\n     * (yet) or if freeze detection is not supported by the current browser.\r\n     *\r\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n     *       implemented in JitsiLocalTrack by extending the event to\r\n     *       the remote track and allowing to set different timeout for\r\n     *       local and remote tracks.\r\n     *\r\n     */\r\n    isVideoTrackFrozen(participant) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            return false;\r\n        }\r\n\r\n        const id = participant.getId();\r\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\r\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\r\n        const timeout = this._getVideoFrozenTimeout(id);\r\n\r\n        return hasAnyVideoRTCMuted\r\n            && typeof rtcMutedTimestamp === 'number'\r\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\r\n    }\r\n\r\n    /**\r\n     * Goes over every participant and updates connectivity status.\r\n     * Should be called when a parameter which affects all of the participants\r\n     * is changed (P2P for example).\r\n     */\r\n    refreshConnectionStatusForAll() {\r\n        const participants = this.conference.getParticipants();\r\n\r\n        for (const participant of participants) {\r\n            this.figureOutConnectionStatus(participant.getId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Figures out (and updates) the current connectivity status for\r\n     * the participant identified by the given id.\r\n     *\r\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\r\n     */\r\n    figureOutConnectionStatus(id) {\r\n        const participant = this.conference.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            // Probably the participant is no longer in the conference\r\n            // (at the time of writing this code, participant is\r\n            // detached from the conference and TRACK_REMOVED events are\r\n            // fired),\r\n            // so we don't care, but let's print a log message for debugging purposes.\r\n            logger.debug(`figure out conn status - no participant for: ${id}`);\r\n\r\n            return;\r\n        }\r\n\r\n        const inP2PMode = this.conference.isP2PActive();\r\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\r\n        const audioOnlyMode = this.conference.getLastN() === 0;\r\n\r\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\r\n        // any detection based on video playback or the last N.\r\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\r\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\r\n        const isInLastN = this.rtc.isInLastN(id);\r\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\r\n\r\n        if (typeof isConnActiveByJvb !== 'boolean') {\r\n            // If no status was received from the JVB it means that it's active\r\n            // (the bridge does not send notification unless there is a problem)\r\n            isConnActiveByJvb = true;\r\n        }\r\n\r\n        const newState\r\n            = inP2PMode\r\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen)\r\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\r\n                    isConnActiveByJvb,\r\n                    isInLastN,\r\n                    isRestoringTimedOut,\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen);\r\n\r\n        // if the new state is not restoring clear timers and timestamps\r\n        // that we use to track the restoring state\r\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\r\n            this._clearRestoringTimer(id);\r\n        }\r\n\r\n        logger.debug(\r\n            `Figure out conn status for ${id}, is video muted: ${\r\n                isVideoMuted} is active(jvb): ${\r\n                isConnActiveByJvb} video track frozen: ${\r\n                isVideoTrackFrozen} p2p mode: ${\r\n                inP2PMode} is in last N: ${\r\n                isInLastN} currentStatus => newStatus: ${\r\n                participant.getConnectionStatus()} => ${newState}`);\r\n\r\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\r\n\r\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\r\n        // since the last time this code block run).\r\n        if (!('p2p' in oldConnectionStatus)\r\n            || !('connectionStatus' in oldConnectionStatus)\r\n            || oldConnectionStatus.p2p !== inP2PMode\r\n            || oldConnectionStatus.connectionStatus !== newState) {\r\n\r\n            const nowMs = Date.now();\r\n\r\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n            this.connectionStatusMap[id] = {\r\n                ...oldConnectionStatus,\r\n                connectionStatus: newState,\r\n                p2p: inP2PMode,\r\n                startedMs: nowMs\r\n            };\r\n\r\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\r\n            // video type is not in oldConnectionStatus.\r\n            if (!('videoType' in this.connectionStatusMap[id])) {\r\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n\r\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\r\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\r\n                }\r\n            }\r\n        }\r\n        this._changeConnectionStatus(participant, newState);\r\n    }\r\n\r\n    /**\r\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\r\n     * in the INTERRUPTED state) and sends a participant connection status event.\r\n     * @param {string} id - The jid of the participant.\r\n     * @param {Number} nowMs - The current time (in millis).\r\n     * @returns {void}\r\n     */\r\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\r\n        const participantConnectionStatus = this.connectionStatusMap[id];\r\n\r\n        if (participantConnectionStatus\r\n            && 'startedMs' in participantConnectionStatus\r\n            && 'videoType' in participantConnectionStatus\r\n            && 'connectionStatus' in participantConnectionStatus\r\n            && 'p2p' in participantConnectionStatus) {\r\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\r\n            Statistics.sendAnalytics(\r\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change in Last N set check all leaving and entering participants to\r\n     * change their corresponding statuses.\r\n     *\r\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\r\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\r\n     * @private\r\n     */\r\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\r\n        const now = Date.now();\r\n\r\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\r\n\r\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\r\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\r\n        // the endpoint that has started/stopped receiving media.\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.refreshConnectionStatusForAll();\r\n        }\r\n\r\n        for (const id of leavingLastN) {\r\n            this.enteredLastNTimestamp.delete(id);\r\n            this._clearRestoringTimer(id);\r\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\r\n        }\r\n        for (const id of enteringLastN) {\r\n            // store the timestamp this id is entering lastN\r\n            this.enteredLastNTimestamp.set(id, now);\r\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the restoring timer for participant's video track and the\r\n     * timestamp for entering lastN.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    _clearRestoringTimer(participantId) {\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (rTimer) {\r\n            clearTimeout(rTimer);\r\n            this.restoringTimers.delete(participantId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a track had stayed enough in restoring state, compares\r\n     * current time and the time the track entered in lastN. If it hasn't\r\n     * timedout and there is no timer added, add new timer in order to give it\r\n     * more time to become active or mark it as interrupted on next check.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\r\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\r\n     * set its status to interrupted.\r\n     * @private\r\n     */\r\n    _isRestoringTimedout(participantId) {\r\n        const enteredLastNTimestamp\r\n            = this.enteredLastNTimestamp.get(participantId);\r\n\r\n        if (enteredLastNTimestamp\r\n            && (Date.now() - enteredLastNTimestamp)\r\n                >= DEFAULT_RESTORING_TIMEOUT) {\r\n            return true;\r\n        }\r\n\r\n        // still haven't reached timeout, if there is no timer scheduled,\r\n        // schedule one so we can track the restoring state and change it after\r\n        // reaching the timeout\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (!rTimer) {\r\n            this.restoringTimers.set(participantId, setTimeout(\r\n                () => this.figureOutConnectionStatus(participantId),\r\n                DEFAULT_RESTORING_TIMEOUT));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends a last/final participant connection status event for the participant that left the conference.\r\n     * @param {string} id - The id of the participant that left the conference.\r\n     * @returns {void}\r\n     */\r\n    onUserLeft(id) {\r\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\r\n        delete this.connectionStatusMap[id];\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\r\n     * will be processed.\r\n     */\r\n    onTrackRtcMuted(track) {\r\n        const participantId = track.getParticipantId();\r\n        const participant = this.conference.getParticipantById(participantId);\r\n\r\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\r\n        if (!participant) {\r\n            logger.error(`No participant for id: ${participantId}`);\r\n\r\n            return;\r\n        }\r\n        this.rtcMutedTimestamp[participantId] = Date.now();\r\n        if (!participant.isVideoMuted()) {\r\n            // If the user is not muted according to the signalling we'll give\r\n            // it some time, before the connection interrupted event is\r\n            // triggered.\r\n            this.clearTimeout(participantId);\r\n\r\n            // The timeout is reduced when user is not in the last N\r\n            const timeout = this._getVideoFrozenTimeout(participantId);\r\n\r\n            this.trackTimers[participantId] = window.setTimeout(() => {\r\n                logger.debug(\r\n                    `Set RTC mute timeout for: ${participantId}\\\r\n                     of ${timeout} ms`);\r\n                this.clearTimeout(participantId);\r\n                this.figureOutConnectionStatus(participantId);\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onunmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\r\n     * event will be processed.\r\n     */\r\n    onTrackRtcUnmuted(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\r\n\r\n        this.clearTimeout(participantId);\r\n        this.clearRtcMutedTimestamp(participantId);\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The remote video track for which\r\n     * the signalling mute/unmute event will be processed.\r\n     */\r\n    onSignallingMuteChanged(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector on track signalling mute changed: ${participantId}`,\r\n            track.isMuted());\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Sends a participant connection status event as a result of the video type\r\n     * changing.\r\n     * @param {JitsiRemoteTrack} track - The track.\r\n     * @param {VideoType} type - The video type.\r\n     * @returns {void}\r\n     */\r\n    onTrackVideoTypeChanged(track, type) {\r\n        const id = track.getParticipantId();\r\n        const nowMs = Date.now();\r\n\r\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n        this.connectionStatusMap[id] = {\r\n            ...this.connectionStatusMap[id] || {},\r\n            videoType: type,\r\n            startedMs: nowMs\r\n        };\r\n    }\r\n}\r\n","\r\nimport { Strophe } from 'strophe.js';\r\n\r\n\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as MediaType from './service/RTC/MediaType';\r\n\r\n/**\r\n * Represents a participant in (i.e. a member of) a conference.\r\n */\r\nexport default class JitsiParticipant {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Initializes a new JitsiParticipant instance.\r\n     *\r\n     * @constructor\r\n     * @param jid the conference XMPP jid\r\n     * @param conference\r\n     * @param displayName\r\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\r\n     * represent a hidden participant; otherwise, false.\r\n     * @param {string} statsID - optional participant statsID\r\n     * @param {string} status - the initial status if any.\r\n     * @param {object} identity - the xmpp identity\r\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\r\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\r\n     */\r\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\r\n        this._jid = jid;\r\n        this._id = Strophe.getResourceFromJid(jid);\r\n        this._conference = conference;\r\n        this._displayName = displayName;\r\n        this._supportsDTMF = false;\r\n        this._tracks = [];\r\n        this._role = 'none';\r\n        this._status = status;\r\n        this._hidden = hidden;\r\n        this._statsID = statsID;\r\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\r\n        this._properties = {};\r\n        this._identity = identity;\r\n        this._isReplacing = isReplacing;\r\n        this._isReplaced = isReplaced;\r\n        this._features = new Set();\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * @returns {JitsiConference} The conference that this participant belongs\r\n     * to.\r\n     */\r\n    getConference() {\r\n        return this._conference;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a property of this participant.\r\n     */\r\n    getProperty(name) {\r\n        return this._properties[name];\r\n    }\r\n\r\n    /**\r\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\r\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\r\n     * muted status.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\r\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\r\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\r\n     */\r\n    hasAnyVideoTrackWebRTCMuted() {\r\n        return (\r\n            this.getTracks().some(\r\n                jitsiTrack =>\r\n                    jitsiTrack.getType() === MediaType.VIDEO\r\n                        && jitsiTrack.isWebRTCTrackMuted()));\r\n    }\r\n\r\n    /**\r\n     * Updates participant's connection status.\r\n     * @param {string} state the current participant connection state.\r\n     * {@link ParticipantConnectionStatus}.\r\n     * @private\r\n     */\r\n    _setConnectionStatus(status) {\r\n        this._connectionStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Return participant's connectivity status.\r\n     *\r\n     * @returns {string} the connection status\r\n     * <tt>ParticipantConnectionStatus</tt> of the user.\r\n     * {@link ParticipantConnectionStatus}.\r\n     */\r\n    getConnectionStatus() {\r\n        return this._connectionStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property of this participant, and fires an event if\r\n     * the value has changed.\r\n     * @name the name of the property.\r\n     * @value the value to set.\r\n     */\r\n    setProperty(name, value) {\r\n        const oldValue = this._properties[name];\r\n\r\n        if (value !== oldValue) {\r\n            this._properties[name] = value;\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this,\r\n                name,\r\n                oldValue,\r\n                value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\r\n     * participant.\r\n     */\r\n    getTracks() {\r\n        return this._tracks.slice();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\r\n     * participant, for given media type.\r\n     */\r\n    getTracksByMediaType(mediaType) {\r\n        return this.getTracks().filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The ID of this participant.\r\n     */\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The JID of this participant.\r\n     */\r\n    getJid() {\r\n        return this._jid;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The human-readable display name of this participant.\r\n     */\r\n    getDisplayName() {\r\n        return this._displayName;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The stats ID of this participant.\r\n     */\r\n    getStatsID() {\r\n        return this._statsID;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The status of the participant.\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a moderator or not.\r\n     */\r\n    isModerator() {\r\n        return this._role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\r\n     * special system participants may want to join hidden (like for example the\r\n     * recorder).\r\n     */\r\n    isHidden() {\r\n        return this._hidden;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Wheter this participants replaces another participant\r\n     * from the meeting.\r\n     */\r\n    isReplacing() {\r\n        return this._isReplacing;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Wheter this participants will be replaced by another\r\n     * participant in the meeting.\r\n     */\r\n    isReplaced() {\r\n        return this._isReplaced;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their audio.\r\n     */\r\n    isAudioMuted() {\r\n        return this._isMediaTypeMuted(MediaType.AUDIO);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all JitsiTracks which are of a specific MediaType and\r\n     * which belong to this JitsiParticipant are muted.\r\n     *\r\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\r\n     * checked.\r\n     * @private\r\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\r\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\r\n     * false.\r\n     */\r\n    _isMediaTypeMuted(mediaType) {\r\n        return this.getTracks().reduce(\r\n            (muted, track) =>\r\n                muted && (track.getType() !== mediaType || track.isMuted()),\r\n            true);\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their video.\r\n     */\r\n    isVideoMuted() {\r\n        return this._isMediaTypeMuted(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The role of this participant.\r\n     */\r\n    getRole() {\r\n        return this._role;\r\n    }\r\n\r\n    /**\r\n     * Sets a new participant role.\r\n     * @param {String} newRole - the new role.\r\n     */\r\n    setRole(newRole) {\r\n        this._role = newRole;\r\n    }\r\n\r\n    /**\r\n     * Sets whether participant is replacing another based on jwt.\r\n     * @param {String} newIsReplacing - whether is replacing.\r\n     */\r\n    setIsReplacing(newIsReplacing) {\r\n        this._isReplacing = newIsReplacing;\r\n    }\r\n\r\n    /**\r\n     * Sets whether participant is being replaced by another based on jwt.\r\n     * @param {boolean} newIsReplaced - whether is being replaced.\r\n     */\r\n    setIsReplaced(newIsReplaced) {\r\n        this._isReplaced = newIsReplaced;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    supportsDTMF() {\r\n        return this._supportsDTMF;\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures() {\r\n        return Promise.resolve(this._features);\r\n    }\r\n\r\n    /**\r\n     * Checks current set features.\r\n     * @param {String} feature - the feature to check.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\r\n     * <tt>feature</tt>.\r\n     */\r\n    hasFeature(feature) {\r\n        return this._features.has(feature);\r\n    }\r\n\r\n    /**\r\n     * Set new features.\r\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\r\n     */\r\n    setFeatures(newFeatures) {\r\n        this._features = newFeatures || new Set();\r\n    }\r\n\r\n    /**\r\n     * Returns the bot type for the participant.\r\n     *\r\n     * @returns {string|undefined} - The bot type of the participant.\r\n     */\r\n    getBotType() {\r\n        return this._botType;\r\n    }\r\n\r\n    /**\r\n     * Sets the bot type for the participant.\r\n     * @param {String} newBotType - The new bot type to set.\r\n     */\r\n    setBotType(newBotType) {\r\n        this._botType = newBotType;\r\n    }\r\n}\r\n","/**\r\n * The events for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection has been disconnected. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param msg {string} a message associated with the disconnect such as the\r\n * last (known) error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\r\n\r\n/**\r\n * Indicates that the connection has been established. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param id {string} the ID of the local endpoint/participant/peer (within\r\n * the context of the established connection)\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection has been failed for some reason. The event\r\n * provides the following parameters to its listeners:\r\n *\r\n * @param errType {JitsiConnectionErrors} the type of error associated with\r\n * the failure\r\n * @param errReason {string} the error (message) associated with the failure\r\n * @param credentials {object} the credentials used to connect (if any)\r\n * @param errReasonDetails {object} an optional object with details about\r\n * the error, like shard moving, suspending. Used for analytics purposes.\r\n */\r\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\r\n\r\n/**\r\n * Indicates that the performed action cannot be executed because the\r\n * connection is not in the correct state(connected, disconnected, etc.)\r\n */\r\nexport const WRONG_STATE = 'connection.wrongState';\r\n\r\n/**\r\n * Indicates that the display name is required over this connection and need to be supplied when\r\n * joining the room.\r\n * There are cases like lobby room where display name is required.\r\n */\r\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\r\n","/**\r\n * The errors for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection was dropped with an error which was most likely\r\n * caused by some networking issues. The dropped term in this context means that\r\n * the connection was closed unexpectedly (not on user's request).\r\n *\r\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\r\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\r\n * could also happen when BOSH request is sent to the server with the session-id\r\n * that is not know to the server. But this should not happen in lib-jitsi-meet\r\n * case as long as the service is configured correctly (there is no bug).\r\n */\r\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\r\n\r\n/**\r\n * Not specified errors.\r\n */\r\nexport const OTHER_ERROR = 'connection.otherError';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\r\n\r\n/**\r\n * Indicates that the connection was dropped, because of too many 5xx HTTP\r\n * errors on BOSH requests.\r\n */\r\nexport const SERVER_ERROR = 'connection.serverError';\r\n","\r\n/**\r\n * Promise-like object which can be passed around for resolving it later. It\r\n * implements the \"thenable\" interface, so it can be used wherever a Promise\r\n * could be used.\r\n *\r\n * In addition a \"reject on timeout\" functionality is provided.\r\n */\r\nexport default class Deferred {\r\n    /**\r\n     * Instantiates a Deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = (...args) => {\r\n                this.clearRejectTimeout();\r\n                resolve(...args);\r\n            };\r\n            this.reject = (...args) => {\r\n                this.clearRejectTimeout();\r\n                reject(...args);\r\n            };\r\n        });\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catch = this.promise.catch.bind(this.promise);\r\n    }\r\n\r\n    /**\r\n     * Clears the reject timeout.\r\n     */\r\n    clearRejectTimeout() {\r\n        clearTimeout(this._timeout);\r\n    }\r\n\r\n    /**\r\n     * Rejects the promise after the given timeout.\r\n     */\r\n    setRejectTimeout(ms) {\r\n        this._timeout = setTimeout(() => {\r\n            this.reject(new Error('timeout'));\r\n        }, ms);\r\n    }\r\n}\r\n","/* global __filename, RTCRtpScriptTransform */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Flag to set on senders / receivers to avoid setting up the encryption transform\r\n// more than once.\r\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\r\n\r\n/**\r\n * Context encapsulating the cryptography bits required for E2EE.\r\n * This uses the WebRTC Insertable Streams API which is explained in\r\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\r\n * that provides access to the encoded frames and allows them to be transformed.\r\n *\r\n * The encoded frame format is explained below in the _encodeFunction method.\r\n * High level design goals were:\r\n * - do not require changes to existing SFUs and retain (VP8) metadata.\r\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\r\n * - allow for the key to be rotated frequently.\r\n */\r\nexport default class E2EEcontext {\r\n    /**\r\n     * Build a new E2EE context instance, which will be used in a given conference.\r\n     */\r\n    constructor() {\r\n        // Determine the URL for the worker script. Relative URLs are relative to\r\n        // the entry point, not the script that launches the worker.\r\n        let baseUrl = '';\r\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\r\n\r\n        if (ljm) {\r\n            const idx = ljm.src.lastIndexOf('/');\r\n\r\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\r\n        }\r\n\r\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\r\n        // synchronously load the JS.\r\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\r\n        const workerBlob\r\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\r\n        const blobUrl = window.URL.createObjectURL(workerBlob);\r\n\r\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\r\n        this._worker.onerror = e => logger.error(e);\r\n    }\r\n\r\n    /**\r\n     * Cleans up all state associated with the given participant. This is needed when a\r\n     * participant leaves the current conference.\r\n     *\r\n     * @param {string} participantId - The participant that just left.\r\n     */\r\n    cleanup(participantId) {\r\n        this._worker.postMessage({\r\n            operation: 'cleanup',\r\n            participantId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n     * a frame decoder.\r\n     *\r\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\r\n     * @param {string} kind - The kind of track this receiver belongs to.\r\n     * @param {string} participantId - The participant id that this receiver belongs to.\r\n     */\r\n    handleReceiver(receiver, kind, participantId) {\r\n        if (receiver[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        receiver[kJitsiE2EE] = true;\r\n\r\n        if (window.RTCRtpScriptTransform) {\r\n            const options = {\r\n                operation: 'decode',\r\n                participantId\r\n            };\r\n\r\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\r\n        } else {\r\n            const receiverStreams = receiver.createEncodedStreams();\r\n\r\n            this._worker.postMessage({\r\n                operation: 'decode',\r\n                readableStream: receiverStreams.readable,\r\n                writableStream: receiverStreams.writable,\r\n                participantId\r\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n     * a frame encoder.\r\n     *\r\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\r\n     * @param {string} kind - The kind of track this sender belongs to.\r\n     * @param {string} participantId - The participant id that this sender belongs to.\r\n     */\r\n    handleSender(sender, kind, participantId) {\r\n        if (sender[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        sender[kJitsiE2EE] = true;\r\n\r\n        if (window.RTCRtpScriptTransform) {\r\n            const options = {\r\n                operation: 'encode',\r\n                participantId\r\n            };\r\n\r\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\r\n        } else {\r\n            const senderStreams = sender.createEncodedStreams();\r\n\r\n            this._worker.postMessage({\r\n                operation: 'encode',\r\n                readableStream: senderStreams.readable,\r\n                writableStream: senderStreams.writable,\r\n                participantId\r\n            }, [ senderStreams.readable, senderStreams.writable ]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the E2EE key for the specified participant.\r\n     *\r\n     * @param {string} participantId - the ID of the participant who's key we are setting.\r\n     * @param {Uint8Array | boolean} key - they key for the given participant.\r\n     * @param {Number} keyIndex - the key index.\r\n     */\r\n    setKey(participantId, key, keyIndex) {\r\n        this._worker.postMessage({\r\n            operation: 'setKey',\r\n            participantId,\r\n            key,\r\n            keyIndex\r\n        });\r\n    }\r\n}\r\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * The class implements basic event operations - add/remove listener.\r\n * NOTE: The purpose of the class is to be extended in order to add\r\n * this functionality to other classes.\r\n */\r\nexport default class Listenable {\r\n    /**\r\n     * Creates new instance.\r\n     * @param {EventEmitter} eventEmitter\r\n     * @constructor\r\n     */\r\n    constructor(eventEmitter = new EventEmitter()) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.on = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n    }\r\n\r\n    /**\r\n     * Adds new listener.\r\n     * @param {String} eventName the name of the event\r\n     * @param {Function} listener the listener.\r\n     * @returns {Function} - The unsubscribe function.\r\n     */\r\n    addListener(eventName, listener) {\r\n        this.eventEmitter.addListener(eventName, listener);\r\n\r\n        return () => this.removeEventListener(eventName, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes listener.\r\n     * @param {String} eventName the name of the event that triggers the\r\n     * listener\r\n     * @param {Function} listener the listener.\r\n     */\r\n    removeListener(eventName, listener) {\r\n        this.eventEmitter.removeListener(eventName, listener);\r\n    }\r\n}\r\n","/* global __filename, Olm */\r\n\r\nimport base64js from 'base64-js';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport Deferred from '../util/Deferred';\r\nimport Listenable from '../util/Listenable';\r\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst REQ_TIMEOUT = 5 * 1000;\r\nconst OLM_MESSAGE_TYPE = 'olm';\r\nconst OLM_MESSAGE_TYPES = {\r\n    ERROR: 'error',\r\n    KEY_INFO: 'key-info',\r\n    KEY_INFO_ACK: 'key-info-ack',\r\n    SESSION_ACK: 'session-ack',\r\n    SESSION_INIT: 'session-init'\r\n};\r\n\r\nconst kOlmData = Symbol('OlmData');\r\n\r\nconst OlmAdapterEvents = {\r\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\r\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\r\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\r\n};\r\n\r\n/**\r\n * This class implements an End-to-End Encrypted communication channel between every two peers\r\n * in the conference. This channel uses libolm to achieve E2EE.\r\n *\r\n * The created channel is then used to exchange the secret key that each participant will use\r\n * to encrypt the actual media (see {@link E2EEContext}).\r\n *\r\n * A simple JSON message based protocol is implemented, which follows a request - response model:\r\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\r\n *                 by the participant who just joined, to everyone else.\r\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\r\n *                encrypted data, more specifically the sender's current key.\r\n * - key-info: Includes the sender's most up to date key information.\r\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\r\n *                 the sender's key information, if available.\r\n * - error: Indicates a request processing error has occurred.\r\n *\r\n * These requessts and responses are transport independent. Currently they are sent using XMPP\r\n * MUC private messages.\r\n */\r\nexport class OlmAdapter extends Listenable {\r\n    /**\r\n     * Creates an adapter instance for the given conference.\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conf = conference;\r\n        this._init = new Deferred();\r\n        this._key = undefined;\r\n        this._keyIndex = -1;\r\n        this._reqs = new Map();\r\n        this._sessionInitialization = undefined;\r\n\r\n        if (OlmAdapter.isSupported()) {\r\n            this._bootstrapOlm();\r\n\r\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this._onParticipantPropertyChanged.bind(this));\r\n        } else {\r\n            this._init.reject(new Error('Olm not supported'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\r\n     */\r\n    async initSessions() {\r\n        if (this._sessionInitialization) {\r\n            throw new Error('OlmAdapter initSessions called multiple times');\r\n        } else {\r\n            this._sessionInitialization = new Deferred();\r\n\r\n            await this._init;\r\n\r\n            const promises = [];\r\n            const localParticipantId = this._conf.myUserId();\r\n\r\n            for (const participant of this._conf.getParticipants()) {\r\n                const participantFeatures = await participant.getFeatures();\r\n\r\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\r\n                    promises.push(this._sendSessionInit(participant));\r\n                }\r\n            }\r\n\r\n            await Promise.allSettled(promises);\r\n\r\n            // TODO: retry failed ones.\r\n\r\n            this._sessionInitialization.resolve();\r\n            this._sessionInitialization = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if olm is supported on the current platform.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported() {\r\n        return typeof window.Olm !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @retrns {Promise<Number>}\r\n     */\r\n    async updateKey(key) {\r\n        // Store it locally for new sessions.\r\n        this._key = key;\r\n        this._keyIndex++;\r\n\r\n        // Broadcast it.\r\n        const promises = [];\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            const pId = participant.getId();\r\n            const olmData = this._getParticipantOlmData(participant);\r\n\r\n            // TODO: skip those who don't support E2EE.\r\n            if (!olmData.session) {\r\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\r\n\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            const uuid = uuidv4();\r\n            const data = {\r\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                olm: {\r\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\r\n                    data: {\r\n                        ciphertext: this._encryptKeyInfo(olmData.session),\r\n                        uuid\r\n                    }\r\n                }\r\n            };\r\n            const d = new Deferred();\r\n\r\n            d.setRejectTimeout(REQ_TIMEOUT);\r\n            d.catch(() => {\r\n                this._reqs.delete(uuid);\r\n            });\r\n            this._reqs.set(uuid, d);\r\n            promises.push(d);\r\n\r\n            this._sendMessage(data, pId);\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones?\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key.\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @returns {number}\r\n    */\r\n    updateCurrentKey(key) {\r\n        this._key = key;\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Frees the olmData session for the given participant.\r\n     *\r\n     */\r\n    clearParticipantSession(participant) {\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            olmData.session.free();\r\n            olmData.session = undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Frees the olmData sessions for all participants.\r\n     *\r\n     */\r\n    clearAllParticipantsSessions() {\r\n        for (const participant of this._conf.getParticipants()) {\r\n            this.clearParticipantSession(participant);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal helper to bootstrap the olm library.\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @private\r\n     */\r\n    async _bootstrapOlm() {\r\n        logger.debug('Initializing Olm...');\r\n\r\n        try {\r\n            await Olm.init();\r\n\r\n            this._olmAccount = new Olm.Account();\r\n            this._olmAccount.create();\r\n\r\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\r\n\r\n            this._idKey = idKeys.curve25519;\r\n\r\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\r\n            this._init.resolve();\r\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\r\n        } catch (e) {\r\n            logger.error('Failed to initialize Olm', e);\r\n            this._init.reject(e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Internal helper for encrypting the current key information for a given participant.\r\n     *\r\n     * @param {Olm.Session} session - Participant's session.\r\n     * @returns {string} - The encrypted text with the key information.\r\n     * @private\r\n     */\r\n    _encryptKeyInfo(session) {\r\n        const keyInfo = {};\r\n\r\n        if (this._key !== undefined) {\r\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\r\n            keyInfo.keyIndex = this._keyIndex;\r\n        }\r\n\r\n        return session.encrypt(JSON.stringify(keyInfo));\r\n    }\r\n\r\n    /**\r\n     * Internal helper for getting the olm related data associated with a participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _getParticipantOlmData(participant) {\r\n        participant[kOlmData] = participant[kOlmData] || {};\r\n\r\n        return participant[kOlmData];\r\n    }\r\n\r\n    /**\r\n     * Handles leaving the conference, cleaning up olm sessions.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceLeft() {\r\n        logger.debug('Conference left');\r\n\r\n        await this._init;\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            this._onParticipantLeft(participant.getId(), participant);\r\n        }\r\n\r\n        if (this._olmAccount) {\r\n            this._olmAccount.free();\r\n            this._olmAccount = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main message handler. Handles 1-to-1 messages received from other participants\r\n     * and send the appropriate replies.\r\n     *\r\n     * @private\r\n     */\r\n    async _onEndpointMessageReceived(participant, payload) {\r\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\r\n            return;\r\n        }\r\n\r\n        if (!payload.olm) {\r\n            logger.warn('Incorrectly formatted message');\r\n\r\n            return;\r\n        }\r\n\r\n        await this._init;\r\n\r\n        const msg = payload.olm;\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        switch (msg.type) {\r\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'Session already established');\r\n            } else {\r\n                // Create a session for communicating with this participant.\r\n\r\n                const session = new Olm.Session();\r\n\r\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\r\n                olmData.session = session;\r\n\r\n                // Send ACK\r\n                const ack = {\r\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                    olm: {\r\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\r\n                        data: {\r\n                            ciphertext: this._encryptKeyInfo(session),\r\n                            uuid: msg.data.uuid\r\n                        }\r\n                    }\r\n                };\r\n\r\n                this._sendMessage(ack, pId);\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'No session found');\r\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\r\n                const { ciphertext } = msg.data;\r\n                const d = this._reqs.get(msg.data.uuid);\r\n                const session = new Olm.Session();\r\n\r\n                session.create_inbound(this._olmAccount, ciphertext.body);\r\n\r\n                // Remove OT keys that have been used to setup this session.\r\n                this._olmAccount.remove_one_time_keys(session);\r\n\r\n                // Decrypt first message.\r\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\r\n\r\n                olmData.session = session;\r\n                olmData.pendingSessionUuid = undefined;\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key) {\r\n                    const key = base64js.toByteArray(json.key);\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    olmData.lastKey = key;\r\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                }\r\n            } else {\r\n                logger.warn('Received ACK with the wrong UUID');\r\n\r\n                this._sendError(participant, 'Invalid UUID');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.ERROR: {\r\n            logger.error(msg.data.error);\r\n\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n\r\n                    // Send ACK.\r\n                    const ack = {\r\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                        olm: {\r\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\r\n                            data: {\r\n                                ciphertext: this._encryptKeyInfo(olmData.session),\r\n                                uuid: msg.data.uuid\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this._sendMessage(ack, pId);\r\n                }\r\n            } else {\r\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n                }\r\n\r\n                const d = this._reqs.get(msg.data.uuid);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n            } else {\r\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info-ack');\r\n            }\r\n            break;\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\r\n     *\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id, participant) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        this.clearParticipantSession(participant);\r\n    }\r\n\r\n    /**\r\n    * Handles an update in a participant's presence property.\r\n    *\r\n    * @param {JitsiParticipant} participant - The participant.\r\n    * @param {string} name - The name of the property that changed.\r\n    * @param {*} oldValue - The property's previous value.\r\n    * @param {*} newValue - The property's new value.\r\n    * @private\r\n    */\r\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\r\n        switch (name) {\r\n        case 'e2ee.enabled':\r\n            if (newValue && this._conf.isE2EEEnabled()) {\r\n                const localParticipantId = this._conf.myUserId();\r\n                const participantId = participant.getId();\r\n                const participantFeatures = await participant.getFeatures();\r\n\r\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\r\n                    if (this._sessionInitialization) {\r\n                        await this._sessionInitialization;\r\n                    }\r\n                    await this._sendSessionInit(participant);\r\n\r\n                    const olmData = this._getParticipantOlmData(participant);\r\n                    const uuid = uuidv4();\r\n                    const data = {\r\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                        olm: {\r\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\r\n                            data: {\r\n                                ciphertext: this._encryptKeyInfo(olmData.session),\r\n                                uuid\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this._sendMessage(data, participantId);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds and sends an error message to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - The target participant.\r\n     * @param {string} error - The error message.\r\n     * @returns {void}\r\n     */\r\n    _sendError(participant, error) {\r\n        const pId = participant.getId();\r\n        const err = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.ERROR,\r\n                data: {\r\n                    error\r\n                }\r\n            }\r\n        };\r\n\r\n        this._sendMessage(err, pId);\r\n    }\r\n\r\n    /**\r\n     * Internal helper to send the given object to the given participant ID.\r\n     * This function merely exists so the transport can be easily swapped.\r\n     * Currently messages are transmitted via XMPP MUC private messages.\r\n     *\r\n     * @param {object} data - The data that will be sent to the target participant.\r\n     * @param {string} participantId - ID of the target participant.\r\n     */\r\n    _sendMessage(data, participantId) {\r\n        this._conf.sendMessage(data, participantId);\r\n    }\r\n\r\n    /**\r\n     * Builds and sends the session-init request to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\r\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\r\n     * @private\r\n     */\r\n    _sendSessionInit(participant) {\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        if (olmData.pendingSessionUuid !== undefined) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        // Generate a One Time Key.\r\n        this._olmAccount.generate_one_time_keys(1);\r\n\r\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\r\n        const otKey = Object.values(otKeys.curve25519)[0];\r\n\r\n        if (!otKey) {\r\n            return Promise.reject(new Error('No one-time-keys generated'));\r\n        }\r\n\r\n        // Mark the OT keys (one really) as published so they are not reused.\r\n        this._olmAccount.mark_keys_as_published();\r\n\r\n        const uuid = uuidv4();\r\n        const init = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\r\n                data: {\r\n                    idKey: this._idKey,\r\n                    otKey,\r\n                    uuid\r\n                }\r\n            }\r\n        };\r\n\r\n        const d = new Deferred();\r\n\r\n        d.setRejectTimeout(REQ_TIMEOUT);\r\n        d.catch(() => {\r\n            this._reqs.delete(uuid);\r\n            olmData.pendingSessionUuid = undefined;\r\n        });\r\n        this._reqs.set(uuid, d);\r\n\r\n        this._sendMessage(init, pId);\r\n\r\n        // Store the UUID for matching with the ACK.\r\n        olmData.pendingSessionUuid = uuid;\r\n\r\n        return d;\r\n    }\r\n}\r\n\r\nOlmAdapter.events = OlmAdapterEvents;\r\n\r\n/**\r\n * Helper to ensure JSON parsing always returns an object.\r\n *\r\n * @param {string} data - The data that needs to be parsed.\r\n * @returns {object} - Parsed data or empty object in case of failure.\r\n */\r\nfunction safeJsonParse(data) {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (e) {\r\n        return {};\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\nimport Deferred from '../util/Deferred';\r\n\r\nimport E2EEContext from './E2EEContext';\r\nimport { OlmAdapter } from './OlmAdapter';\r\nimport { importKey, ratchet } from './crypto-utils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Period which we'll wait before updating / rotating our keys when a participant\r\n// joins or leaves.\r\nconst DEBOUNCE_PERIOD = 5000;\r\n\r\n/**\r\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\r\n */\r\nexport class E2EEncryption {\r\n    /**\r\n     * A constructor.\r\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        this._conferenceJoined = false;\r\n        this._enabled = false;\r\n        this._key = undefined;\r\n        this._enabling = undefined;\r\n\r\n        this._e2eeCtx = new E2EEContext();\r\n        this._olmAdapter = new OlmAdapter(conference);\r\n\r\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\r\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\r\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\r\n\r\n        // Participant join / leave operations. Used for key advancement / rotation.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents.CONFERENCE_JOINED,\r\n            () => {\r\n                this._conferenceJoined = true;\r\n            });\r\n        this.conference.on(\r\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n            this._onParticipantPropertyChanged.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onParticipantJoined.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onParticipantLeft.bind(this));\r\n\r\n        // Conference media events in order to attach the encryptor / decryptor.\r\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\r\n        // added instead of shenanigans around conference track events and track muted.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            this._onMediaSessionStarted.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_ADDED,\r\n            track => track.isLocal() && this._onLocalTrackAdded(track));\r\n        this.conference.rtc.on(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n            this._trackMuteChanged.bind(this));\r\n\r\n        // Olm signalling events.\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.OLM_ID_KEY_READY,\r\n            this._onOlmIdKeyReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\r\n            this._onParticipantE2EEChannelReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\r\n            this._onParticipantKeyUpdated.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Indicates if E2EE is supported in the current platform.\r\n     *\r\n     * @param {object} config - Global configuration.\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported(config) {\r\n        return !(config.testing && config.testing.disableE2EE)\r\n            && (browser.supportsInsertableStreams()\r\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()))\r\n            && OlmAdapter.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Indicates whether E2EE is currently enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Enables / disables End-To-End encryption.\r\n     *\r\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\r\n     * @returns {void}\r\n     */\r\n    async setEnabled(enabled) {\r\n        if (enabled === this._enabled) {\r\n            return;\r\n        }\r\n\r\n        this._enabling && await this._enabling;\r\n\r\n        this._enabling = new Deferred();\r\n\r\n        this._enabled = enabled;\r\n\r\n        if (enabled) {\r\n            await this._olmAdapter.initSessions();\r\n        } else {\r\n            for (const participant of this.conference.getParticipants()) {\r\n                this._e2eeCtx.cleanup(participant.getId());\r\n            }\r\n            this._olmAdapter.clearAllParticipantsSessions();\r\n        }\r\n\r\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\r\n\r\n        this.conference._restartMediaSessions();\r\n\r\n        // Generate a random key in case we are enabling.\r\n        this._key = enabled ? this._generateKey() : false;\r\n\r\n        // Send it to others using the E2EE olm channel.\r\n        const index = await this._olmAdapter.updateKey(this._key);\r\n\r\n        // Set our key so we begin encrypting.\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n\r\n        this._enabling.resolve();\r\n    }\r\n\r\n    /**\r\n     * Generates a new 256 bit random key.\r\n     *\r\n     * @returns {Uint8Array}\r\n     * @private\r\n     */\r\n    _generateKey() {\r\n        return window.crypto.getRandomValues(new Uint8Array(32));\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\r\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\r\n     * @private\r\n     */\r\n    _onLocalTrackAdded(track) {\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups E2E encryption for the new session.\r\n     * @param {JingleSessionPC} session - the new media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(session) {\r\n        const localTracks = this.conference.getLocalTracks();\r\n\r\n        for (const track of localTracks) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Publushes our own Olmn id key in presence.\r\n     * @private\r\n     */\r\n    _onOlmIdKeyReady(idKey) {\r\n        logger.debug(`Olm id key ready: ${idKey}`);\r\n\r\n        // Publish it in presence.\r\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\r\n    }\r\n\r\n    /**\r\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\r\n     * @private\r\n     */\r\n    _onParticipantJoined() {\r\n        if (this._conferenceJoined && this._enabled) {\r\n            this._ratchetKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotates the current key when a participant leaves the conference.\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id) {\r\n        this._e2eeCtx.cleanup(id);\r\n\r\n        if (this._enabled) {\r\n            this._rotateKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event posted when the E2EE signalling channel has been established with the given participant.\r\n     * @private\r\n     */\r\n    _onParticipantE2EEChannelReady(id) {\r\n        logger.debug(`E2EE channel with participant ${id} is ready`);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's key.\r\n     *\r\n     * @param {string} id - The participant ID.\r\n     * @param {Uint8Array | boolean} key - The new key for the participant.\r\n     * @param {Number} index - The new key's index.\r\n     * @private\r\n     */\r\n    _onParticipantKeyUpdated(id, key, index) {\r\n        logger.debug(`Participant ${id} updated their key`);\r\n\r\n        this._e2eeCtx.setKey(id, key, index);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's presence property.\r\n     *\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @param {string} name - The name of the property that changed.\r\n     * @param {*} oldValue - The property's previous value.\r\n     * @param {*} newValue - The property's new value.\r\n     * @private\r\n     */\r\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\r\n        switch (name) {\r\n        case 'e2ee.idKey':\r\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\r\n            break;\r\n        case 'e2ee.enabled':\r\n            if (!newValue && this._enabled) {\r\n                this._olmAdapter.clearParticipantSession(participant);\r\n\r\n                this._rotateKey();\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Advances the current key by using ratcheting.\r\n     *\r\n     * @private\r\n     */\r\n    async _ratchetKeyImpl() {\r\n        logger.debug('Ratchetting key');\r\n\r\n        const material = await importKey(this._key);\r\n        const newKey = await ratchet(material);\r\n\r\n        this._key = new Uint8Array(newKey);\r\n\r\n        const index = this._olmAdapter.updateCurrentKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\r\n     * to all participants and once they all received it, start using it.\r\n     *\r\n     * @private\r\n     */\r\n    async _rotateKeyImpl() {\r\n        logger.debug('Rotating key');\r\n\r\n        this._key = this._generateKey();\r\n        const index = await this._olmAdapter.updateKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the receiving side.\r\n     *\r\n     * @private\r\n     */\r\n    _setupReceiverE2EEForTrack(tpc, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const receiver = tpc.findReceiverForTrack(track.track);\r\n\r\n        if (receiver) {\r\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the sending side.\r\n     *\r\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\r\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\r\n     * @private\r\n     */\r\n    _setupSenderE2EEForTrack(session, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const pc = session.peerconnection;\r\n        const sender = pc && pc.findSenderForTrack(track.track);\r\n\r\n        if (sender) {\r\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the sender that is created for the unmuted local video track.\r\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\r\n     * @private\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                this._setupSenderE2EEForTrack(session, track);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Derives a set of keys from the master key.\r\n * @param {CryptoKey} material - master key to derive from\r\n *\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nexport async function deriveKeys(material) {\r\n    const info = new ArrayBuffer();\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n    const encryptionKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameEncryptionKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'AES-GCM',\r\n        length: 128\r\n    }, false, [ 'encrypt', 'decrypt' ]);\r\n\r\n    return {\r\n        material,\r\n        encryptionKey\r\n    };\r\n}\r\n\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n * @param {CryptoKey} material - base key material\r\n * @returns {ArrayBuffer} - ratcheted key material\r\n */\r\nexport async function ratchet(material) {\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n    return crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameRatchetKey'),\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer()\r\n    }, material, 256);\r\n}\r\n\r\n/**\r\n * Converts a raw key into a WebCrypto key object with default options\r\n * suitable for our usage.\r\n * @param {ArrayBuffer} keyBytes - raw key\r\n * @param {Array} keyUsages - key usages, see importKey documentation\r\n * @returns {CryptoKey} - the WebCrypto key.\r\n */\r\nexport async function importKey(keyBytes) {\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\r\n}\r\n","/* global $ */\r\n\r\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Listenable from '../util/Listenable';\r\n\r\n/**\r\n * The property\r\n */\r\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\r\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\r\nconst HASH = 'sha-1';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction compareIdentities(a, b) {\r\n    let res = 0;\r\n\r\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\r\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Produces a sha-1 from provided identity and features values.\r\n *\r\n * @param {Array<Object>} identities - The identity objects.\r\n * @param {Array<string>} features - The features.\r\n * @returns {string}\r\n */\r\nfunction generateSha(identities, features) {\r\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\r\n        (accumulatedValue, identity) => `${\r\n            IDENTITY_PROPERTIES.reduce(\r\n                (tmp, key, idx) =>\r\n                    tmp\r\n                        + (idx === 0 ? '' : '/')\r\n                        + (identity[key] ? identity[key] : ''),\r\n                '')\r\n        }<`, '');\r\n    const sortedFeatures = features.sort().reduce(\r\n        (tmp, feature) => `${tmp + feature}<`, '');\r\n\r\n    return b64_sha1(sortedIdentities + sortedFeatures);\r\n}\r\n\r\n/**\r\n * Parses the disco-info node and returns the sets of features and identities.\r\n * @param {String} node The node with results to parse.\r\n * @returns {{features: Set<any>, identities: Set<any>}}\r\n */\r\nexport function parseDiscoInfo(node) {\r\n    const features = new Set();\r\n    const identities = new Set();\r\n\r\n    $(node).find('>query>feature')\r\n        .each((_, el) => features.add(el.getAttribute('var')));\r\n    $(node).find('>query>identity')\r\n        .each((_, el) => identities.add({\r\n            type: el.getAttribute('type'),\r\n            name: el.getAttribute('name'),\r\n            category: el.getAttribute('category')\r\n        }));\r\n\r\n    return {\r\n        features,\r\n        identities\r\n    };\r\n}\r\n\r\n/**\r\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\r\n */\r\nexport default class Caps extends Listenable {\r\n    /**\r\n     * Constructs new Caps instance.\r\n     * @param {Strophe.Connection} connection the strophe connection object\r\n     * @param {String} node the value of the node attribute of the \"c\" xml node\r\n     * that will be sent to the other participants\r\n     */\r\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\r\n        super();\r\n        this.node = node;\r\n        this.disco = connection.disco;\r\n        if (!this.disco) {\r\n            throw new Error(\r\n                'Missing strophe-plugins '\r\n                + '(disco plugin is required)!');\r\n        }\r\n\r\n        this.version = '';\r\n        this.rooms = new Set();\r\n\r\n        // We keep track of features added outside the library and we publish them\r\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\r\n        this.externalFeatures = new Set();\r\n\r\n        const emuc = connection.emuc;\r\n\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\r\n            room => this._addChatRoom(room));\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\r\n            room => this._removeChatRoom(room));\r\n        Object.keys(emuc.rooms).forEach(jid => {\r\n            this._addChatRoom(emuc.rooms[jid]);\r\n        });\r\n\r\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\r\n        this.disco.addFeature(Strophe.NS.CAPS);\r\n    }\r\n\r\n    /**\r\n     * Adds new feature to the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     * @param {boolean} external whether this feature was added externally to the library.\r\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\r\n     * to avoid additional disco-info queries by those clients.\r\n     */\r\n    addFeature(feature, submit = false, external = false) {\r\n        this.disco.addFeature(feature);\r\n        this._generateVersion();\r\n\r\n        if (external && !this.externalFeatures.has(feature)) {\r\n            this.externalFeatures.add(feature);\r\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\r\n        }\r\n\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a feature from the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     * @param {boolean} external whether this feature was added externally to the library.\r\n     */\r\n    removeFeature(feature, submit = false, external = false) {\r\n        this.disco.removeFeature(feature);\r\n        this._generateVersion();\r\n\r\n        if (external && this.externalFeatures.has(feature)) {\r\n            this.externalFeatures.delete(feature);\r\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\r\n        }\r\n\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends new presence stanza for every room from the list of rooms.\r\n     */\r\n    submit() {\r\n        this.rooms.forEach(room => room.sendPresence());\r\n    }\r\n\r\n    /**\r\n     * Updates the presences in the room based on the current values in externalFeatures.\r\n     * @param {ChatRoom} room the room to update.\r\n     * @private\r\n     */\r\n    _updateRoomWithExternalFeatures(room) {\r\n        if (this.externalFeatures.size === 0) {\r\n            room.removeFromPresence('features');\r\n        } else {\r\n            const children = [];\r\n\r\n            this.externalFeatures.forEach(f => {\r\n                children.push({\r\n                    'tagName': 'feature',\r\n                    attributes: { 'var': f }\r\n                });\r\n            });\r\n\r\n            room.addOrReplaceInPresence('features', { children });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\r\n        return this._getDiscoInfo(jid, node, timeout);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features and identities for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {String|null} node the node to query\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Object>}\r\n     * @private\r\n     */\r\n    _getDiscoInfo(jid, node, timeout) {\r\n        return new Promise((resolve, reject) =>\r\n            this.disco.info(jid, node, response => {\r\n                resolve(parseDiscoInfo(response));\r\n            }, reject, timeout)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\r\n     * and adds \"c\" element to the presences of the room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _addChatRoom(room) {\r\n        this.rooms.add(room);\r\n        this._fixChatRoomPresenceMap(room);\r\n\r\n        this._updateRoomWithExternalFeatures(room);\r\n    }\r\n\r\n    /**\r\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\r\n     * added from the Caps class.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _removeChatRoom(room) {\r\n        this.rooms.delete(room);\r\n    }\r\n\r\n    /**\r\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _fixChatRoomPresenceMap(room) {\r\n        room.addOrReplaceInPresence('c', {\r\n            attributes: {\r\n                xmlns: Strophe.NS.CAPS,\r\n                hash: HASH,\r\n                node: this.node,\r\n                ver: this.version\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles this.version changes.\r\n     */\r\n    _notifyVersionChanged() {\r\n        // update the version for all rooms\r\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\r\n    }\r\n\r\n    /**\r\n     * Generates the value for the \"ver\" attribute.\r\n     */\r\n    _generateVersion() {\r\n        this.version\r\n            = generateSha(this.disco._identities, this.disco._features);\r\n\r\n        this._notifyVersionChanged();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Module provides information about the current status of the internet\r\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\r\n * online/offline, but rather it relies on the information supplied by the app\r\n * that uses it. By default the online state is assumed and the lib acts as if\r\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\r\n */\r\nexport class NetworkInfo extends Listenable {\r\n    /**\r\n     * Creates new {@link NetworkInfo} instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._current = {\r\n            isOnline: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the network info state.\r\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\r\n     */\r\n    updateNetworkInfo({ isOnline }) {\r\n        logger.debug('updateNetworkInfo', { isOnline });\r\n        this._current = {\r\n            isOnline: isOnline === true\r\n        };\r\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\r\n    }\r\n\r\n    /**\r\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\r\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\r\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\r\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\r\n     * @returns {boolean}\r\n     */\r\n    isOnline() {\r\n        return this._current.isOnline === true;\r\n    }\r\n}\r\n\r\nconst networkInfo = new NetworkInfo();\r\n\r\nexport default networkInfo;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    default as NetworkInfo,\r\n    NETWORK_INFO_EVENT\r\n} from '../connectivity/NetworkInfo';\r\nimport { getJitterDelay } from '../util/Retry';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\r\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\r\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\r\n * the retry interval using the full jitter pattern.\r\n */\r\nexport default class ResumeTask {\r\n    /**\r\n     * Initializes new {@code RetryTask}.\r\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\r\n     */\r\n    constructor(stropheConnection) {\r\n        this._stropheConn = stropheConnection;\r\n\r\n        /**\r\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._resumeRetryN = 0;\r\n\r\n        this._retryDelay = undefined;\r\n    }\r\n\r\n    /**\r\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\r\n     * 'undefined' it means that no resume task was not scheduled.\r\n     */\r\n    get retryDelay() {\r\n        return this._retryDelay;\r\n    }\r\n\r\n    /**\r\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    schedule() {\r\n        this._cancelResume();\r\n\r\n        this._resumeRetryN += 1;\r\n\r\n        this._networkOnlineListener\r\n            = NetworkInfo.addEventListener(\r\n                NETWORK_INFO_EVENT,\r\n                ({ isOnline }) => {\r\n                    if (isOnline) {\r\n                        this._scheduleResume();\r\n                    } else {\r\n                        this._cancelResume();\r\n                    }\r\n                });\r\n\r\n        NetworkInfo.isOnline() && this._scheduleResume();\r\n    }\r\n\r\n    /**\r\n     * Schedules a delayed timeout which will execute the resume action.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _scheduleResume() {\r\n        if (this._resumeTimeout) {\r\n\r\n            // NO-OP\r\n            return;\r\n        }\r\n\r\n        // The retry delay will be:\r\n        //   1st retry: 1.5s - 3s\r\n        //   2nd retry: 3s - 9s\r\n        //   3rd and next retry: 4.5s - 27s\r\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\r\n        this._retryDelay = getJitterDelay(\r\n            /* retry */ this._resumeRetryN,\r\n            /* minDelay */ this._resumeRetryN * 1500,\r\n            3);\r\n\r\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\r\n\r\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\r\n    }\r\n\r\n    /**\r\n     * Cancels the delayed resume task.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cancelResume() {\r\n        if (this._resumeTimeout) {\r\n            logger.info('Canceling connection resume task');\r\n            clearTimeout(this._resumeTimeout);\r\n            this._resumeTimeout = undefined;\r\n            this._retryDelay = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resumes the XMPP connection using the stream management plugin.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _resumeConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement.getResumeToken();\r\n\r\n        // Things may have changed since when the task was scheduled\r\n        if (!resumeToken) {\r\n            return;\r\n        }\r\n\r\n        logger.info('Trying to resume the XMPP connection');\r\n\r\n        const url = new URL(this._stropheConn.service);\r\n        let { search } = url;\r\n        const pattern = /(previd=)([\\w-]+)/;\r\n        const oldToken = search.match(pattern);\r\n\r\n        // Replace previd if the previd value has changed.\r\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\r\n            search = search.replace(pattern, `$1${resumeToken}`);\r\n\r\n        // Append previd if it doesn't exist.\r\n        } else if (!oldToken) {\r\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\r\n        }\r\n\r\n        url.search = search;\r\n\r\n        this._stropheConn.service = url.toString();\r\n\r\n        streamManagement.resume();\r\n    }\r\n\r\n    /**\r\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\r\n     * example when the disconnect method is called.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    cancel() {\r\n        this._cancelResume();\r\n        this._resumeRetryN = 0;\r\n        if (this._networkOnlineListener) {\r\n            this._networkOnlineListener();\r\n            this._networkOnlineListener = null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n* Gets next timeout using the full jitter pattern.\r\n*\r\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\r\n*\r\n* @param {number} retry - The retry number.\r\n* @param {number} minDelay - The minimal delay in milliseconds.\r\n* @param {number} base - The exponent base.\r\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\r\n* @private\r\n*/\r\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\r\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\r\n}\r\n","/**\r\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\r\n */\r\nexport default class LastRequestTracker {\r\n    /**\r\n     * Initializes new instance.\r\n     */\r\n    constructor() {\r\n        this._lastSuccess = null;\r\n        this._lastFailedMessage = null;\r\n    }\r\n\r\n    /**\r\n     * Starts tracking requests on the given connection.\r\n     *\r\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\r\n     * @param {Object} stropheConnection - Strophe connection instance.\r\n     */\r\n    startTracking(xmppConnection, stropheConnection) {\r\n        const originalRawInput = stropheConnection.rawInput;\r\n\r\n        stropheConnection.rawInput = (...args) => {\r\n            const rawMessage = args[0];\r\n\r\n            if (rawMessage.includes('failure')) {\r\n                this._lastFailedMessage = rawMessage;\r\n            }\r\n\r\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\r\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\r\n            if (xmppConnection.connected) {\r\n                this._lastSuccess = Date.now();\r\n            }\r\n            originalRawInput.apply(stropheConnection, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the last raw failed incoming message on the xmpp connection.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    getLastFailedMessage() {\r\n        return this._lastFailedMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns how many milliseconds have passed since the last successful BOSH request.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccess\r\n            ? Date.now() - this._lastSuccess\r\n            : null;\r\n    }\r\n}\r\n","import Listenable from '../util/Listenable';\r\n\r\n/**\r\n * Creates ConnectionPlugin class that extends the passed class.\r\n * @param {Class} base the definition of the class that will be extended by\r\n * ConnectionPlugin\r\n */\r\nfunction getConnectionPluginDefinition(base = class {}) {\r\n    /**\r\n     * Base class for strophe connection plugins.\r\n     */\r\n    return class extends base {\r\n        /**\r\n         *\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this.connection = null;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param connection\r\n         */\r\n        init(connection) {\r\n            this.connection = connection;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * ConnectionPlugin class.\r\n */\r\nexport default getConnectionPluginDefinition();\r\n\r\n/**\r\n * ConnectionPlugin class that extends Listenable.\r\n */\r\nexport const ConnectionPluginListenable\r\n    = getConnectionPluginDefinition(Listenable);\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default ping every 10 sec\r\n */\r\nconst PING_DEFAULT_INTERVAL = 10000;\r\n\r\n/**\r\n * Default ping timeout error after 5 sec of waiting.\r\n */\r\nconst PING_DEFAULT_TIMEOUT = 5000;\r\n\r\n/**\r\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\r\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\r\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\r\n */\r\nconst PING_DEFAULT_THRESHOLD = 2;\r\n\r\n/**\r\n * XEP-0199 ping plugin.\r\n *\r\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\r\n */\r\nexport default class PingConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Constructs new object\r\n     * @param {Object} options\r\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\r\n     * by the {@link PING_THRESHOLD} constant).\r\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\r\n     * response from the server.\r\n     * @param {Object} options.pingOptions - The ping options if any.\r\n     * @constructor\r\n     */\r\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\r\n        super();\r\n        this.failedPings = 0;\r\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\r\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\r\n\r\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\r\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\r\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\r\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\r\n\r\n        // The number of timestamps of send pings to keep.\r\n        // The current value is 2 minutes.\r\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\r\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\r\n    }\r\n\r\n    /**\r\n     * Initializes the plugin. Method called by Strophe.\r\n     * @param connection Strophe connection instance.\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Sends \"ping\" to given <tt>jid</tt>\r\n     * @param jid the JID to which ping request will be sent.\r\n     * @param success callback called on success.\r\n     * @param error callback called on error.\r\n     * @param timeout ms how long are we going to wait for the response. On\r\n     * timeout <tt>error<//t> callback is called with undefined error argument.\r\n     */\r\n    ping(jid, success, error, timeout) {\r\n        this._addPingExecutionTimestamp();\r\n\r\n        const iq = $iq({\r\n            type: 'get',\r\n            to: jid\r\n        });\r\n\r\n        iq.c('ping', { xmlns: Strophe.NS.PING });\r\n        this.connection.sendIQ2(iq, { timeout })\r\n            .then(success, error);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Starts to send ping in given interval to specified remote JID.\r\n     * This plugin supports only one such task and <tt>stopInterval</tt>\r\n     * must be called before starting a new one.\r\n     * @param remoteJid remote JID to which ping requests will be sent to.\r\n     */\r\n    startInterval(remoteJid) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = window.setInterval(() => {\r\n\r\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\r\n            // let's skip the ping\r\n\r\n            const now = Date.now();\r\n\r\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\r\n                // do this just to keep in sync the intervals so we can detect suspended device\r\n                this._addPingExecutionTimestamp();\r\n\r\n                this._lastServerCheck = now;\r\n                this.failedPings = 0;\r\n\r\n                return;\r\n            }\r\n\r\n            this.ping(remoteJid, () => {\r\n                // server response is measured on raw input and ping response time is measured after all the xmpp\r\n                // processing is done in js, so there can be some misalignment when we do the check above.\r\n                // That's why we store the last time we got the response\r\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\r\n\r\n                this.failedPings = 0;\r\n            }, error => {\r\n                this.failedPings += 1;\r\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\r\n\r\n                if (this.failedPings >= this.pingThreshold) {\r\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                    logger.error(errmsg, error);\r\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\r\n                } else {\r\n                    logger.warn(errmsg, error);\r\n                }\r\n            }, this.pingTimeout);\r\n        }, this.pingInterval);\r\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\r\n    }\r\n\r\n    /**\r\n     * Stops current \"ping\"  interval task.\r\n     */\r\n    stopInterval() {\r\n        if (this.intervalId) {\r\n            window.clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n            this.failedPings = 0;\r\n            logger.info('Ping interval cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the current time to the array of send ping timestamps.\r\n     * @private\r\n     */\r\n    _addPingExecutionTimestamp() {\r\n        this.pingExecIntervals.push(new Date().getTime());\r\n\r\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\r\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\r\n            this.pingExecIntervals.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum time between the recent sent pings, if there is a\r\n     * big value it means the computer was inactive for some time(suspended).\r\n     * Checks the maximum gap between sending pings, considering and the\r\n     * current time. Trying to detect computer inactivity (sleep).\r\n     *\r\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\r\n     */\r\n    getPingSuspendTime() {\r\n        const pingIntervals = this.pingExecIntervals.slice();\r\n\r\n        // we need current time, as if ping was sent now\r\n        // if computer sleeps we will get correct interval after next\r\n        // scheduled ping, bet we sometimes need that interval before waiting\r\n        // for the next ping, on closing the connection on error.\r\n        pingIntervals.push(new Date().getTime());\r\n\r\n        let maxInterval = 0;\r\n        let previousTS = pingIntervals[0];\r\n\r\n        pingIntervals.forEach(e => {\r\n            const currentInterval = e - previousTS;\r\n\r\n            if (currentInterval > maxInterval) {\r\n                maxInterval = currentInterval;\r\n            }\r\n\r\n            previousTS = e;\r\n        });\r\n\r\n        // remove the interval between the ping sent\r\n        // this way in normal execution there is no suspend and the return\r\n        // will be 0 or close to 0.\r\n        maxInterval -= this.pingInterval;\r\n\r\n        // make sure we do not return less than 0\r\n        return Math.max(maxInterval, 0);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $pres, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-stream-management';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport ResumeTask from './ResumeTask';\r\nimport LastSuccessTracker from './StropheLastSuccess';\r\nimport PingConnectionPlugin from './strophe.ping';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\r\n */\r\nexport default class XmppConnection extends Listenable {\r\n    /**\r\n     * The list of {@link XmppConnection} events.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    static get Events() {\r\n        return {\r\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\r\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The list of Xmpp connection statuses.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    static get Status() {\r\n        return Strophe.Status;\r\n    }\r\n\r\n    /**\r\n     * Initializes new connection instance.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\r\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\r\n     * Useful for detecting when shard changes.\r\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\r\n     * It will enable automatically by default if supported by the XMPP server.\r\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\r\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\r\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\r\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\r\n     * if missing the serviceUrl url will be used.\r\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\r\n     */\r\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\r\n        super();\r\n        this._options = {\r\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\r\n            pingOptions: xmppPing,\r\n            shard,\r\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\r\n            websocketKeepAliveUrl\r\n        };\r\n\r\n        this._stropheConn = new Strophe.Connection(serviceUrl);\r\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\r\n\r\n        // The default maxRetries is 5, which is too long.\r\n        this._stropheConn.maxRetries = 3;\r\n\r\n        this._rawInputTracker = new LastSuccessTracker();\r\n        this._rawInputTracker.startTracking(this, this._stropheConn);\r\n\r\n        this._resumeTask = new ResumeTask(this._stropheConn);\r\n\r\n        /**\r\n         * @typedef DeferredSendIQ Object\r\n         * @property {Element} iq - The IQ to send.\r\n         * @property {function} resolve - The resolve method of the deferred Promise.\r\n         * @property {function} reject - The reject method of the deferred Promise.\r\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\r\n         */\r\n        /**\r\n         * Deferred IQs to be sent upon reconnect.\r\n         * @type {Array<DeferredSendIQ>}\r\n         * @private\r\n         */\r\n        this._deferredIQs = [];\r\n\r\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\r\n        // is broken (WebSocket/TCP connection not closed gracefully).\r\n        this.addConnectionPlugin(\r\n            'ping',\r\n            new PingConnectionPlugin({\r\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\r\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\r\n                pingOptions: xmppPing\r\n            }));\r\n\r\n        // tracks whether this is the initial connection or a reconnect\r\n        this._oneSuccessfulConnect = false;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connected state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get connected() {\r\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\r\n\r\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\r\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\r\n    }\r\n\r\n    /**\r\n     * Retrieves the feature discovery plugin instance.\r\n     *\r\n     * @returns {Strophe.Connection.disco}\r\n     */\r\n    get disco() {\r\n        return this._stropheConn.disco;\r\n    }\r\n\r\n    /**\r\n     * A getter for the disconnecting state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get disconnecting() {\r\n        return this._stropheConn.disconnecting === true;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get domain() {\r\n        return this._stropheConn.domain;\r\n    }\r\n\r\n    /**\r\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\r\n     * for BOSH.\r\n     * @returns {boolean}\r\n     */\r\n    get isUsingWebSocket() {\r\n        return this._usesWebsocket;\r\n    }\r\n\r\n    /**\r\n     * A getter for the JID.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get jid() {\r\n        return this._stropheConn.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns headers for the last BOSH response received.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get lastResponseHeaders() {\r\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\r\n    }\r\n\r\n    /**\r\n     * A getter for the logger plugin instance.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get logger() {\r\n        return this._stropheConn.logger;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connection options.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get options() {\r\n        return this._stropheConn.options;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain to be used for ping.\r\n     */\r\n    get pingDomain() {\r\n        return this._options.pingOptions?.domain || this.domain;\r\n    }\r\n\r\n    /**\r\n     * A getter for the service URL.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get service() {\r\n        return this._stropheConn.service;\r\n    }\r\n\r\n    /**\r\n     * Sets new value for shard.\r\n     * @param value the new shard value.\r\n     */\r\n    set shard(value) {\r\n        this._options.shard = value;\r\n\r\n        // shard setting changed so let's schedule a new keep-alive check if connected\r\n        if (this._oneSuccessfulConnect) {\r\n            this._maybeStartWSKeepAlive();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current connection status.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection plugin to this instance.\r\n     *\r\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\r\n     * instance.\r\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\r\n     */\r\n    addConnectionPlugin(name, plugin) {\r\n        this[name] = plugin;\r\n        plugin.init(this);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.addHandler}\r\n     *\r\n     * @returns {void}\r\n     */\r\n    addHandler(...args) {\r\n        this._stropheConn.addHandler(...args);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.attach} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(jid, sid, rid, callback, ...args) {\r\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /**\r\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.connect} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    connect(jid, pass, callback, ...args) {\r\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Handles {@link Strophe.Status} updates for the current connection.\r\n     *\r\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\r\n     * the connect methods.\r\n     * @param {Strophe.Status} status - The new connection status.\r\n     * @param {*} args - The rest of the arguments passed by Strophe.\r\n     * @private\r\n     */\r\n    _stropheConnectionCb(targetCallback, status, ...args) {\r\n        this._status = status;\r\n\r\n        let blockCallback = false;\r\n\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this._maybeEnableStreamResume();\r\n\r\n            // after connecting - immediately check whether shard changed,\r\n            // we need this only when using websockets as bosh checks headers from every response\r\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\r\n                this._keepAliveAndCheckShard();\r\n            }\r\n            this._oneSuccessfulConnect = true;\r\n\r\n            this._maybeStartWSKeepAlive();\r\n            this._processDeferredIQs();\r\n            this._resumeTask.cancel();\r\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            this.ping.stopInterval();\r\n\r\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\r\n            blockCallback = this._tryResumingConnection();\r\n            if (!blockCallback) {\r\n                clearTimeout(this._wsKeepAlive);\r\n            }\r\n        }\r\n\r\n        if (!blockCallback) {\r\n            targetCallback(status, ...args);\r\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the list of IQs and rejects deferred Promises with an error.\r\n     *\r\n     * @private\r\n     */\r\n    _clearDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            deferred.reject(new Error('disconnect'));\r\n        }\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    closeWebsocket() {\r\n        if (this._stropheConn && this._stropheConn._proto) {\r\n            this._stropheConn._proto._closeSocket();\r\n            this._stropheConn._proto._onClose(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.disconnect}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect(...args) {\r\n        this._resumeTask.cancel();\r\n        clearTimeout(this._wsKeepAlive);\r\n        this._clearDeferredIQs();\r\n        this._stropheConn.disconnect(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.flush}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    flush(...args) {\r\n        this._stropheConn.flush(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._rawInputTracker.getTimeSinceLastSuccess();\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getLastFailedMessage}.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    getLastFailedMessage() {\r\n        return this._rawInputTracker.getLastFailedMessage();\r\n    }\r\n\r\n    /**\r\n     * Requests a resume token from the server if enabled and all requirements are met.\r\n     *\r\n     * @private\r\n     */\r\n    _maybeEnableStreamResume() {\r\n        if (!this._options.enableWebsocketResume) {\r\n\r\n            return;\r\n        }\r\n\r\n        const { streamManagement } = this._stropheConn;\r\n\r\n        if (!this.isUsingWebSocket) {\r\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\r\n        } else if (!streamManagement) {\r\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\r\n        } else if (!streamManagement.isSupported()) {\r\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\r\n        } else if (!streamManagement.getResumeToken()) {\r\n            logger.info('Enabling XEP-0198 stream management');\r\n            streamManagement.enable(/* resume */ true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the Websocket keep alive if enabled.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _maybeStartWSKeepAlive() {\r\n        const { websocketKeepAlive } = this._options;\r\n\r\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\r\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\r\n            clearTimeout(this._wsKeepAlive);\r\n\r\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\r\n\r\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\r\n\r\n            this._wsKeepAlive = setTimeout(\r\n                () => this._keepAliveAndCheckShard()\r\n                    .then(() => this._maybeStartWSKeepAlive()),\r\n                intervalWithJitter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Do a http GET to the shard and if shard change will throw an event.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _keepAliveAndCheckShard() {\r\n        const { shard, websocketKeepAliveUrl } = this._options;\r\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\r\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\r\n\r\n        return fetch(url)\r\n            .then(response => {\r\n\r\n                // skips header checking if there is no info in options\r\n                if (!shard) {\r\n                    return;\r\n                }\r\n\r\n                const responseShard = response.headers.get('x-jitsi-shard');\r\n\r\n                if (responseShard !== shard) {\r\n                    logger.error(\r\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\r\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _processDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            if (deferred.iq) {\r\n                clearTimeout(deferred.timeout);\r\n\r\n                const timeLeft = Date.now() - deferred.start;\r\n\r\n                this.sendIQ(\r\n                    deferred.iq,\r\n                    result => deferred.resolve(result),\r\n                    error => deferred.reject(error),\r\n                    timeLeft);\r\n            }\r\n        }\r\n\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\r\n     *\r\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\r\n     * @returns {void}\r\n     */\r\n    send(stanza) {\r\n        if (!this.connected) {\r\n            throw new Error('Not connected');\r\n        }\r\n        this._stropheConn.send(stanza);\r\n    }\r\n\r\n    /**\r\n     * Helper function to send IQ stanzas.\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the IQ.\r\n     */\r\n    sendIQ(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n\r\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\r\n     * which would fail immediately if disconnected).\r\n     *\r\n     * @param {Element} iq - The IQ to send.\r\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\r\n     * included, which means that the IQ may never be sent and still fail with a timeout.\r\n     */\r\n    sendIQ2(iq, { timeout }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.connected) {\r\n                this.sendIQ(\r\n                    iq,\r\n                    result => resolve(result),\r\n                    error => reject(error),\r\n                    timeout);\r\n            } else {\r\n                const deferred = {\r\n                    iq,\r\n                    resolve,\r\n                    reject,\r\n                    start: Date.now(),\r\n                    timeout: setTimeout(() => {\r\n                        // clears the IQ on timeout and invalidates the deferred task\r\n                        deferred.iq = undefined;\r\n\r\n                        // Strophe calls with undefined on timeout\r\n                        reject(undefined);\r\n                    }, timeout)\r\n                };\r\n\r\n                this._deferredIQs.push(deferred);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called by the ping plugin when ping fails too many times.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _onPingErrorThresholdExceeded() {\r\n        if (this.isUsingWebSocket) {\r\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\r\n            this.closeWebsocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\r\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the presence.\r\n     */\r\n    sendPresence(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\r\n     *\r\n     * @returns {boolean} - true if the beacon was sent.\r\n     */\r\n    sendUnavailableBeacon() {\r\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\r\n            return false;\r\n        }\r\n\r\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\r\n        this._stropheConn.disconnecting = true;\r\n\r\n        const body = this._stropheConn._proto._buildBody()\r\n            .attrs({\r\n                type: 'terminate'\r\n            });\r\n        const pres = $pres({\r\n            xmlns: Strophe.NS.CLIENT,\r\n            type: 'unavailable'\r\n        });\r\n\r\n        body.cnode(pres.tree());\r\n\r\n        const res = navigator.sendBeacon(\r\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\r\n            Strophe.serialize(body.tree()));\r\n\r\n        logger.info(`Successfully send unavailable beacon ${res}`);\r\n\r\n        this._stropheConn._proto._abortAllRequests();\r\n        this._stropheConn._doDisconnect();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\r\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\r\n     * the token is present it means the connection can be resumed.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n    _tryResumingConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\r\n\r\n        if (resumeToken) {\r\n            this._resumeTask.schedule();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * The transciption is on.\r\n *\r\n * @type {String}\r\n */\r\nexport const ON = 'on';\r\n\r\n/**\r\n * The transciption is off.\r\n *\r\n * @type {String}\r\n */\r\nexport const OFF = 'off';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AVModeration logic.\r\n */\r\nexport default class AVModeration {\r\n\r\n    /**\r\n     * Constructs AV moderation room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this._xmpp = room.xmpp;\r\n\r\n        this._mainRoom = room;\r\n\r\n        this._moderationEnabledByType = {\r\n            [MediaType.AUDIO]: false,\r\n            [MediaType.VIDEO]: false\r\n        };\r\n\r\n        this._whitelistAudio = [];\r\n        this._whitelistVideo = [];\r\n\r\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Whether AV moderation is supported on backend.\r\n     *\r\n     * @returns {boolean} whether AV moderation is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return Boolean(this._xmpp.avModerationComponentAddress);\r\n    }\r\n\r\n    /**\r\n     * Enables or disables AV Moderation by sending a msg with command to the component.\r\n     */\r\n    enable(state, mediaType) {\r\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\r\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \r\n                moderator:${this._mainRoom.isModerator()}`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (state === this._moderationEnabledByType[mediaType]) {\r\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\r\n\r\n            return;\r\n        }\r\n\r\n        // send the enable/disable message\r\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\r\n\r\n        msg.c('av_moderation', {\r\n            enable: state,\r\n            mediaType\r\n        }).up();\r\n\r\n        this._xmpp.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\r\n     */\r\n    approve(mediaType, jid) {\r\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\r\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \r\n                moderator:${this._mainRoom.isModerator()}`);\r\n\r\n            return;\r\n        }\r\n\r\n        // send a message to whitelist the jid and approve it to unmute\r\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\r\n\r\n        msg.c('av_moderation', {\r\n            mediaType,\r\n            jidToWhitelist: jid }).up();\r\n\r\n        this._xmpp.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\r\n     */\r\n    reject(mediaType, jid) {\r\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\r\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\r\n                moderator:${this._mainRoom.isModerator()}`);\r\n\r\n            return;\r\n        }\r\n\r\n        // send a message to remove from whitelist the jid and reject it to unmute\r\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\r\n\r\n        msg.c('av_moderation', {\r\n            mediaType,\r\n            jidToBlacklist: jid\r\n        }).up();\r\n\r\n        this._xmpp.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Receives av_moderation parsed messages as json.\r\n     * @param obj the parsed json content of the message to process.\r\n     * @private\r\n     */\r\n    _onMessage(obj) {\r\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\r\n\r\n        if (newWhitelists) {\r\n            const oldList = media === MediaType.AUDIO\r\n                ? this._whitelistAudio\r\n                : this._whitelistVideo;\r\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\r\n\r\n            if (removed) {\r\n                oldList.filter(x => !newList.includes(x))\r\n                    .forEach(jid => this._xmpp.eventEmitter\r\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\r\n            } else {\r\n                newList.filter(x => !oldList.includes(x))\r\n                    .forEach(jid => this._xmpp.eventEmitter\r\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\r\n            }\r\n\r\n            if (media === MediaType.AUDIO) {\r\n                this._whitelistAudio = newList;\r\n            } else {\r\n                this._whitelistVideo = newList;\r\n            }\r\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\r\n            this._moderationEnabledByType[media] = enabled;\r\n\r\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\r\n        } else if (approved) {\r\n            const event = removed ? XMPPEvents.AV_MODERATION_REJECTED : XMPPEvents.AV_MODERATION_APPROVED;\r\n\r\n            this._xmpp.eventEmitter.emit(event, media);\r\n        }\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The command type for updating a lobby participant's e-mail address.\r\n *\r\n * @type {string}\r\n */\r\nconst EMAIL_COMMAND = 'email';\r\n\r\n/**\r\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\r\n * approving or denying access to participants from the lobby room.\r\n */\r\nexport default class Lobby {\r\n\r\n    /**\r\n     * Constructs lobby room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this.xmpp = room.xmpp;\r\n        this.mainRoom = room;\r\n\r\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.LOCAL_ROLE_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n            jid => {\r\n                this.lobbyRoomJid = jid;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Whether lobby is supported on backend.\r\n     *\r\n     * @returns {boolean} whether lobby is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return this.xmpp.lobbySupported;\r\n    }\r\n\r\n    /**\r\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    enable() {\r\n        if (!this.isSupported()) {\r\n            return Promise.reject(new Error('Lobby not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.mainRoom.setMembersOnly(true, resolve, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disable() {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()\r\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.mainRoom.setMembersOnly(false);\r\n    }\r\n\r\n    /**\r\n     * Leaves the lobby room.\r\n     * @private\r\n     */\r\n    _leaveLobbyRoom() {\r\n        if (this.lobbyRoom) {\r\n            this.lobbyRoom.leave()\r\n                .then(() => {\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left!');\r\n                })\r\n                .catch(() => {}); // eslint-disable-line no-empty-function\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We had received a jid for the lobby room.\r\n     *\r\n     * @param jid the lobby room jid to join.\r\n     */\r\n    setLobbyRoomJid(jid) {\r\n        this.lobbyRoomJid = jid;\r\n    }\r\n\r\n    /**\r\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\r\n     * @private\r\n     */\r\n    _maybeJoinLobbyRoom() {\r\n        if (!this.isSupported()) {\r\n            return;\r\n        }\r\n\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\r\n            // join the lobby\r\n            this.join()\r\n                .then(() => logger.info('Joined lobby room'))\r\n                .catch(e => logger.error('Failed joining lobby', e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\r\n     *\r\n     * @param {string} username is required.\r\n     * @param {string} email is optional.\r\n     * @returns {Promise} resolves once we join the room.\r\n     */\r\n    join(displayName, email) {\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (!this.lobbyRoomJid) {\r\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\r\n        }\r\n\r\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\r\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\r\n\r\n        this.lobbyRoom = this.xmpp.createRoom(\r\n            roomName, {\r\n                customDomain,\r\n                disableDiscoInfo: true,\r\n                disableFocus: true,\r\n                enableLobby: false\r\n            }\r\n        );\r\n\r\n        if (displayName) {\r\n            // remove previously set nickname\r\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\r\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n                value: displayName\r\n            });\r\n        }\r\n\r\n        if (isModerator) {\r\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\r\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\r\n            });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_JOINED,\r\n                // eslint-disable-next-line max-params\r\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\r\n                    // we need to ignore joins on lobby for participants that are already in the main room\r\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\r\n                        return;\r\n                    }\r\n\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n                        Strophe.getResourceFromJid(from),\r\n                        nick,\r\n                        identity ? identity.avatar : undefined\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n                        Strophe.getResourceFromJid(from)\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                () => {\r\n                    // let's make sure we emit that all lobby users had left\r\n                    Object.keys(this.lobbyRoom.members)\r\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\r\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left(destroyed)!');\r\n                });\r\n        } else {\r\n            // this should only be handled by those waiting in lobby\r\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\r\n                if (isSelfPresence) {\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    return;\r\n                }\r\n            });\r\n\r\n            // As there is still reference of the main room\r\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\r\n            // the invite message should be received directly to the xmpp conn in general\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                (roomJid, from, txt, invitePassword) => {\r\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\r\n                    if (roomJid === this.mainRoom.roomjid) {\r\n                        // we are now allowed let's join and leave lobby\r\n                        this.mainRoom.join(invitePassword);\r\n\r\n                        this._leaveLobbyRoom();\r\n                    }\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                (reason, jid) => {\r\n                    // we are receiving the jid of the main room\r\n                    // means we are invited to join, maybe lobby was disabled\r\n                    if (jid) {\r\n                        this.mainRoom.join();\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\r\n                });\r\n\r\n            // If participant retries joining shared password while waiting in the lobby\r\n            // and succeeds make sure we leave lobby\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.MUC_JOINED,\r\n                () => {\r\n                    this._leaveLobbyRoom();\r\n                });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\r\n                resolve();\r\n\r\n                // send our email, as we do not handle this on initial presence we need a second one\r\n                if (email && !isModerator) {\r\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\r\n                        && this.lobbyRoom.sendPresence();\r\n                }\r\n            });\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\r\n\r\n            this.lobbyRoom.join();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    denyAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const jid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (jid) {\r\n            this.lobbyRoom.kick(jid);\r\n        } else {\r\n            logger.error(`Not found member for ${id} in lobby room.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    approveAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (memberRoomJid) {\r\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\r\n            const msgToSend\r\n                = $msg({ to: this.mainRoom.roomjid })\r\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\r\n                    .c('invite', { to: jid });\r\n\r\n            this.xmpp.connection.sendIQ(msgToSend,\r\n                () => { }, // eslint-disable-line no-empty-function\r\n                e => {\r\n                    logger.error(`Error sending invite for ${jid}`, e);\r\n                });\r\n        } else {\r\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\r\n        }\r\n    }\r\n}\r\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nimport UsernameGenerator from '../util/UsernameGenerator';\r\n\r\nlet _callStatsUserName;\r\n\r\nlet _machineId;\r\n\r\n/**\r\n *\r\n */\r\nexport default {\r\n\r\n    /**\r\n     * The storage used to store the settings.\r\n     */\r\n    _storage: jitsiLocalStorage,\r\n\r\n    /**\r\n     * Initializes the Settings class.\r\n     *\r\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\r\n     * used for storing data instead of jitsiLocalStorage if specified.\r\n     */\r\n    init(externalStorage) {\r\n        this._storage = externalStorage || jitsiLocalStorage;\r\n    },\r\n\r\n    /**\r\n     * Returns fake username for callstats\r\n     * @returns {string} fake username for callstats\r\n     */\r\n    get callStatsUserName() {\r\n        if (!_callStatsUserName) {\r\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\r\n            if (!_callStatsUserName) {\r\n                _callStatsUserName = generateCallStatsUserName();\r\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\r\n            }\r\n        }\r\n\r\n        return _callStatsUserName;\r\n    },\r\n\r\n    /**\r\n     * Returns current machine id.\r\n     * @returns {string} machine id\r\n     */\r\n    get machineId() {\r\n        if (!_machineId) {\r\n            const amDid = this._storage.getItem('billingId');\r\n\r\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\r\n\r\n            if (amDid) {\r\n                this._storage.setItem('jitsiMeetId', amDid);\r\n            } else if (!_machineId) {\r\n                _machineId = generateJitsiMeetId();\r\n                this._storage.setItem('jitsiMeetId', _machineId);\r\n            }\r\n        }\r\n\r\n        return _machineId;\r\n    },\r\n\r\n    /**\r\n     * Returns current session id.\r\n     * @returns {string} current session id\r\n     */\r\n    get sessionId() {\r\n        // We may update sessionId in localStorage from another JitsiConference\r\n        // instance and that's why we should always re-read it.\r\n        return this._storage.getItem('sessionId');\r\n    },\r\n\r\n    /**\r\n     * Save current session id.\r\n     * @param {string} sessionId session id\r\n     */\r\n    set sessionId(sessionId) {\r\n        if (sessionId) {\r\n            this._storage.setItem('sessionId', sessionId);\r\n        } else {\r\n            this._storage.removeItem('sessionId');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Generate fake username for callstats.\r\n * @returns {string} fake random username\r\n */\r\nfunction generateCallStatsUserName() {\r\n    const username = UsernameGenerator.generateUsername();\r\n\r\n    logger.log('generated callstats uid', username);\r\n\r\n    return username;\r\n}\r\n\r\n/**\r\n * Generate unique id.\r\n * @returns {string} random unique id\r\n */\r\nfunction generateJitsiMeetId() {\r\n    const jitsiMeetId = generateUniqueId();\r\n\r\n    logger.log('generated id', jitsiMeetId);\r\n\r\n    return jitsiMeetId;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction generateUniqueId() {\r\n    return _p8() + _p8() + _p8() + _p8();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _p8() {\r\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\r\n}\r\n","/* global $, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\nconst AuthenticationEvents\r\n    = require('../../service/authentication/AuthenticationEvents');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n *\r\n * @param step\r\n */\r\nfunction createExpBackoffTimer(step) {\r\n    let count = 1;\r\n\r\n    return function(reset) {\r\n        // Reset call\r\n        if (reset) {\r\n            count = 1;\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate next timeout\r\n        const timeout = Math.pow(2, count - 1);\r\n\r\n        count += 1;\r\n\r\n        return timeout * step;\r\n    };\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n *\r\n * @param roomName\r\n * @param xmpp\r\n * @param emitter\r\n * @param options\r\n */\r\nexport default function Moderator(roomName, xmpp, emitter, options) {\r\n    this.roomName = roomName;\r\n    this.xmppService = xmpp;\r\n    this.getNextTimeout = createExpBackoffTimer(1000);\r\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\r\n\r\n    // External authentication stuff\r\n    this.externalAuthEnabled = false;\r\n    this.options = options;\r\n\r\n    // Whether SIP gateway (jigasi) support is enabled. This is set\r\n    // based on conference properties received in presence.\r\n    this.sipGatewayEnabled = false;\r\n\r\n    this.eventEmitter = emitter;\r\n\r\n    this.connection = this.xmppService.connection;\r\n\r\n    // FIXME: Message listener that talks to POPUP window\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    function listener(event) {\r\n        if (event.data && event.data.sessionId) {\r\n            if (event.origin !== window.location.origin) {\r\n                logger.warn(\r\n                    `Ignoring sessionId from different origin: ${\r\n                        event.origin}`);\r\n\r\n                return;\r\n            }\r\n            Settings.sessionId = event.data.sessionId;\r\n\r\n            // After popup is closed we will authenticate\r\n        }\r\n    }\r\n\r\n    // Register\r\n    if (window.addEventListener) {\r\n        window.addEventListener('message', listener, false);\r\n    } else {\r\n        window.attachEvent('onmessage', listener);\r\n    }\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\nModerator.prototype.isExternalAuthEnabled = function() {\r\n    return this.externalAuthEnabled;\r\n};\r\n\r\nModerator.prototype.isSipGatewayEnabled = function() {\r\n    return this.sipGatewayEnabled;\r\n};\r\n\r\nModerator.prototype.onMucMemberLeft = function(jid) {\r\n    const resource = Strophe.getResourceFromJid(jid);\r\n\r\n    if (resource === 'focus') {\r\n        logger.info(\r\n            'Focus has left the room - leaving conference');\r\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\r\n    }\r\n};\r\n\r\nModerator.prototype.setFocusUserJid = function(focusJid) {\r\n    if (!this.focusUserJid) {\r\n        this.focusUserJid = focusJid;\r\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\r\n    }\r\n};\r\n\r\nModerator.prototype.getFocusUserJid = function() {\r\n    return this.focusUserJid;\r\n};\r\n\r\nModerator.prototype.getFocusComponent = function() {\r\n    // Get focus component address\r\n    let focusComponent = this.options.connection.hosts.focus;\r\n\r\n    // If not specified use default:  'focus.domain'\r\n\r\n    if (!focusComponent) {\r\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\r\n    }\r\n\r\n    return focusComponent;\r\n};\r\n\r\nModerator.prototype.createConferenceIq = function() {\r\n    // Generate create conference IQ\r\n    const elem = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n\r\n    // Session Id used for authentication\r\n    const { sessionId } = Settings;\r\n    const machineUID = Settings.machineId;\r\n    const config = this.options.conference;\r\n\r\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\r\n\r\n    elem.c('conference', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': machineUID\r\n    });\r\n\r\n    if (sessionId) {\r\n        elem.attrs({ 'session-id': sessionId });\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'disableRtx',\r\n            value: Boolean(config.disableRtx)\r\n        }).up();\r\n\r\n    if (config.audioPacketDelay !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'audioPacketDelay',\r\n                value: config.audioPacketDelay\r\n            }).up();\r\n    }\r\n    if (config.startBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startBitrate',\r\n                value: config.startBitrate\r\n            }).up();\r\n    }\r\n    if (config.minBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'minBitrate',\r\n                value: config.minBitrate\r\n            }).up();\r\n    }\r\n\r\n    if (this.options.conference.startAudioMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startAudioMuted',\r\n                value: this.options.conference.startAudioMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startVideoMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startVideoMuted',\r\n                value: this.options.conference.startVideoMuted\r\n            }).up();\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\n\r\nModerator.prototype.parseSessionId = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const sessionId = $(resultIq).find('conference').attr('session-id');\r\n\r\n    if (sessionId) {\r\n        logger.info(`Received sessionId:  ${sessionId}`);\r\n        Settings.sessionId = sessionId;\r\n    }\r\n};\r\n\r\nModerator.prototype.parseConfigOptions = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\r\n\r\n    const authenticationEnabled\r\n        = $(resultIq).find(\r\n            '>conference>property'\r\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\r\n\r\n    this.externalAuthEnabled = $(resultIq).find(\r\n        '>conference>property'\r\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(\r\n        `External authentication enabled: ${this.externalAuthEnabled}`);\r\n\r\n    if (!this.externalAuthEnabled) {\r\n        // We expect to receive sessionId in 'internal' authentication mode\r\n        this.parseSessionId(resultIq);\r\n    }\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\r\n\r\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\r\n        authenticationEnabled, authIdentity);\r\n\r\n    // Check if jicofo has jigasi support enabled.\r\n    if ($(resultIq).find(\r\n        '>conference>property'\r\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\r\n        this.sipGatewayEnabled = true;\r\n    }\r\n\r\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\r\n};\r\n\r\n// FIXME We need to show the fact that we're waiting for the focus to the user\r\n// (or that the focus is not available)\r\n/**\r\n * Allocates the conference focus.\r\n *\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\r\n * rejected and it'll keep on pinging Jicofo forever.\r\n */\r\nModerator.prototype.allocateConferenceFocus = function() {\r\n    return new Promise(resolve => {\r\n        // Try to use focus user JID from the config\r\n        this.setFocusUserJid(this.options.connection.focusUserJid);\r\n\r\n        // Send create conference IQ\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => this._allocateConferenceFocusSuccess(result, resolve),\r\n            error => this._allocateConferenceFocusError(error, resolve));\r\n\r\n        // XXX We're pressed for time here because we're beginning a complex\r\n        // and/or lengthy conference-establishment process which supposedly\r\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\r\n        // decide to send our IQ.\r\n        this.connection.flush();\r\n    });\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\r\n * error result.\r\n *\r\n * @param error - the error result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\r\n    // If the session is invalid, remove and try again without session ID to get\r\n    // a new one\r\n    const invalidSession\r\n        = $(error).find('>error>session-invalid').length\r\n            || $(error).find('>error>not-acceptable').length;\r\n\r\n    if (invalidSession) {\r\n        logger.info('Session expired! - removing');\r\n        Settings.sessionId = undefined;\r\n    }\r\n    if ($(error).find('>error>graceful-shutdown').length) {\r\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\r\n\r\n        return;\r\n    }\r\n\r\n    // Check for error returned by the reservation system\r\n    const reservationErr = $(error).find('>error>reservation-error');\r\n\r\n    if (reservationErr.length) {\r\n        // Trigger error event\r\n        const errorCode = reservationErr.attr('error-code');\r\n        const errorTextNode = $(error).find('>error>text');\r\n        let errorMsg;\r\n\r\n        if (errorTextNode) {\r\n            errorMsg = errorTextNode.text();\r\n        }\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.RESERVATION_ERROR,\r\n            errorCode,\r\n            errorMsg);\r\n\r\n        return;\r\n    }\r\n\r\n    // Not authorized to create new room\r\n    if ($(error).find('>error>not-authorized').length) {\r\n        logger.warn('Unauthorized to start the conference', error);\r\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\r\n\r\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\r\n            // FIXME \"is external\" should come either from the focus or\r\n            // config.js\r\n            this.externalAuthEnabled = true;\r\n        }\r\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\r\n\r\n        return;\r\n    }\r\n    const waitMs = this.getNextErrorTimeout();\r\n    const errmsg = `Focus error, retry after ${waitMs}`;\r\n\r\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n    logger.error(errmsg, error);\r\n\r\n    // Show message\r\n    const focusComponent = this.getFocusComponent();\r\n    const retrySec = waitMs / 1000;\r\n\r\n    // FIXME: message is duplicated ? Do not show in case of session invalid\r\n    // which means just a retry\r\n\r\n    if (!invalidSession) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.FOCUS_DISCONNECTED,\r\n            focusComponent,\r\n            retrySec);\r\n    }\r\n\r\n    // Reset response timeout\r\n    this.getNextTimeout(true);\r\n    window.setTimeout(\r\n        () => this.allocateConferenceFocus().then(callback),\r\n        waitMs);\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\r\n * success (i.e. non-error) result.\r\n *\r\n * @param result - the success (i.e. non-error) result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusSuccess = function(\r\n        result,\r\n        callback) {\r\n    // Setup config options\r\n    this.parseConfigOptions(result);\r\n\r\n    // Reset the error timeout (because we haven't failed here).\r\n    this.getNextErrorTimeout(true);\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    if ($(result).find('conference').attr('ready') === 'true') {\r\n        // Reset the non-error timeout (because we've succeeded here).\r\n        this.getNextTimeout(true);\r\n\r\n        // Exec callback\r\n        callback();\r\n    } else {\r\n        const waitMs = this.getNextTimeout();\r\n\r\n        logger.info(`Waiting for the focus... ${waitMs}`);\r\n        window.setTimeout(\r\n            () => this.allocateConferenceFocus().then(callback),\r\n            waitMs);\r\n    }\r\n};\r\n\r\nModerator.prototype.authenticate = function() {\r\n    return new Promise((resolve, reject) => {\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => {\r\n                this.parseSessionId(result);\r\n                resolve();\r\n            },\r\n            errorIq => reject({\r\n                error: $(errorIq).find('iq>error :first')\r\n                    .prop('tagName'),\r\n                message: $(errorIq).find('iq>error>text')\r\n                    .text()\r\n            })\r\n        );\r\n    });\r\n};\r\n\r\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\r\n * {@link Moderator#getPopupLoginUrl}\r\n * @param urlCb\r\n * @param failureCb\r\n */\r\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'get' });\r\n    const attrs = {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': Settings.machineId\r\n    };\r\n    let str = 'auth url'; // for logger\r\n\r\n    if (popup) {\r\n        attrs.popup = true;\r\n        str = `POPUP ${str}`;\r\n    }\r\n    iq.c('login-url', attrs);\r\n\r\n    /**\r\n     * Implements a failure callback which reports an error message and an error\r\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\r\n     *\r\n     * @param {string} errmsg the error messsage to report\r\n     * @param {*} error the error to report (in addition to errmsg)\r\n     */\r\n    function reportError(errmsg, err) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n        logger.error(errmsg, err);\r\n        failureCb(err);\r\n    }\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let url = $(result).find('login-url').attr('url');\r\n\r\n            url = decodeURIComponent(url);\r\n            if (url) {\r\n                logger.info(`Got ${str}: ${url}`);\r\n                urlCb(url);\r\n            } else {\r\n                reportError(`Failed to get ${str} from the focus`, result);\r\n            }\r\n        },\r\n        reportError.bind(undefined, `Get ${str} error`)\r\n    );\r\n};\r\n\r\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\r\n};\r\n\r\nModerator.prototype.logout = function(callback) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n    const { sessionId } = Settings;\r\n\r\n    if (!sessionId) {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n    iq.c('logout', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        'session-id': sessionId\r\n    });\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let logoutUrl = $(result).find('logout').attr('logout-url');\r\n\r\n            if (logoutUrl) {\r\n                logoutUrl = decodeURIComponent(logoutUrl);\r\n            }\r\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\r\n            Settings.sessionId = undefined;\r\n            callback(logoutUrl);\r\n        },\r\n        error => {\r\n            const errmsg = 'Logout error';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg, error);\r\n        }\r\n    );\r\n};\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport AVModeration from './AVModeration';\r\nimport Lobby from './Lobby';\r\nimport XmppConnection from './XmppConnection';\r\nimport Moderator from './moderator';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const parser = {\r\n    packet2JSON(xmlElement, nodes) {\r\n        for (const child of Array.from(xmlElement.children)) {\r\n            const node = {\r\n                attributes: {},\r\n                children: [],\r\n                tagName: child.tagName\r\n            };\r\n\r\n            for (const attr of Array.from(child.attributes)) {\r\n                node.attributes[attr.name] = attr.value;\r\n            }\r\n            const text = Strophe.getText(child);\r\n\r\n            if (text) {\r\n                // Using Strophe.getText will do work for traversing all direct\r\n                // child text nodes but returns an escaped value, which is not\r\n                // desirable at this point.\r\n                node.value = Strophe.xmlunescape(text);\r\n            }\r\n            nodes.push(node);\r\n            this.packet2JSON(child, node.children);\r\n        }\r\n    },\r\n    json2packet(nodes, packet) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            if (node) {\r\n                packet.c(node.tagName, node.attributes);\r\n                if (node.value) {\r\n                    packet.t(node.value);\r\n                }\r\n                if (node.children) {\r\n                    this.json2packet(node.children, packet);\r\n                }\r\n                packet.up();\r\n            }\r\n        }\r\n\r\n        // packet.up();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns array of JS objects from the presence JSON associated with the passed\r\n / nodeName\r\n * @param pres the presence JSON\r\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\r\n */\r\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < pres.length; i++) {\r\n        if (pres[i].tagName === nodeName) {\r\n            res.push(pres[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\r\n// of chaining function calls, allow long function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Array of affiliations that are allowed in members only room.\r\n * @type {string[]}\r\n */\r\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\r\n\r\n/**\r\n *\r\n */\r\nexport default class ChatRoom extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param jid\r\n     * @param password\r\n     * @param XMPP\r\n     * @param options\r\n     * @param {boolean} options.disableFocus - when set to {@code false} will\r\n     * not invite Jicofo into the room.\r\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\r\n     * This is intended to be used only for lobby rooms.\r\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\r\n     */\r\n    constructor(connection, jid, password, XMPP, options) {\r\n        super();\r\n        this.xmpp = XMPP;\r\n        this.connection = connection;\r\n        this.roomjid = Strophe.getBareJidFromJid(jid);\r\n        this.myroomjid = jid;\r\n        this.password = password;\r\n        this.replaceParticipant = false;\r\n        logger.info(`Joined MUC as ${this.myroomjid}`);\r\n        this.members = {};\r\n        this.presMap = {};\r\n        this.presHandlers = {};\r\n        this._removeConnListeners = [];\r\n        this.joined = false;\r\n        this.role = null;\r\n        this.focusMucJid = null;\r\n        this.noBridgeAvailable = false;\r\n        this.options = options || {};\r\n        this.moderator\r\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\r\n                connection: this.xmpp.options,\r\n                conference: this.options\r\n            });\r\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\r\n            this.lobby = new Lobby(this);\r\n        }\r\n        this.avModeration = new AVModeration(this);\r\n        this.initPresenceMap(options);\r\n        this.lastPresences = {};\r\n        this.phoneNumber = null;\r\n        this.phonePin = null;\r\n        this.connectionTimes = {};\r\n        this.participantPropertyListener = null;\r\n\r\n        this.locked = false;\r\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    initPresenceMap(options = {}) {\r\n        this.presMap.to = this.myroomjid;\r\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\r\n        this.presMap.nodes = [];\r\n\r\n        if (options.statsId) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'stats-id',\r\n                'value': options.statsId\r\n            });\r\n        }\r\n\r\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'region',\r\n                'attributes': {\r\n                    id: options.deploymentInfo.userRegion,\r\n                    xmlns: 'http://jitsi.org/jitsi-meet'\r\n                }\r\n            });\r\n        }\r\n\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Joins the chat room.\r\n     * @param {string} password - Password to unlock room on joining.\r\n     * @returns {Promise} - resolved when join completes. At the time of this\r\n     * writing it's never rejected.\r\n     */\r\n    join(password, replaceParticipant) {\r\n        this.password = password;\r\n        this.replaceParticipant = replaceParticipant;\r\n\r\n        return new Promise(resolve => {\r\n            this.options.disableFocus\r\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\r\n\r\n            const preJoin\r\n                = this.options.disableFocus\r\n                    ? Promise.resolve()\r\n                    : this.moderator.allocateConferenceFocus();\r\n\r\n            preJoin.then(() => {\r\n                this.sendPresence(true);\r\n                this._removeConnListeners.push(\r\n                    this.connection.addEventListener(\r\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                        this.onConnStatusChanged.bind(this))\r\n                );\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fromJoin - Whether this is initial presence to join the room.\r\n     */\r\n    sendPresence(fromJoin) {\r\n        const to = this.presMap.to;\r\n\r\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\r\n            // Too early to send presence - not initialized\r\n            return;\r\n        }\r\n\r\n        const pres = $pres({ to });\r\n\r\n        // xep-0045 defines: \"including in the initial presence stanza an empty\r\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\r\n        // namespace\" and subsequent presences should not include that or it can\r\n        // be considered as joining, and server can send us the message history\r\n        // for the room on every presence\r\n        if (fromJoin) {\r\n            if (this.replaceParticipant) {\r\n                pres.c('flip_device').up();\r\n            }\r\n\r\n            pres.c('x', { xmlns: this.presMap.xns });\r\n\r\n            if (this.password) {\r\n                pres.c('password').t(this.password).up();\r\n            }\r\n            if (this.options.billingId) {\r\n                pres.c('billingid').t(this.options.billingId).up();\r\n            }\r\n\r\n            pres.up();\r\n        }\r\n\r\n        parser.json2packet(this.presMap.nodes, pres);\r\n\r\n        // we store time we last synced presence state\r\n        this.presenceSyncTime = Date.now();\r\n\r\n        this.connection.send(pres);\r\n        if (fromJoin) {\r\n            // XXX We're pressed for time here because we're beginning a complex\r\n            // and/or lengthy conference-establishment process which supposedly\r\n            // involves multiple RTTs. We don't have the time to wait for\r\n            // Strophe to decide to send our IQ.\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the presence unavailable, signaling the server\r\n     * we want to leave the room.\r\n     */\r\n    doLeave() {\r\n        logger.log('do leave', this.myroomjid);\r\n        const pres = $pres({ to: this.myroomjid,\r\n            type: 'unavailable' });\r\n\r\n        this.presMap.length = 0;\r\n\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\r\n        // means that there may not be enough time to send the unavailable\r\n        // presence. Switching Strophe to synchronous sending is not much of an\r\n        // option because it may lead to a noticeable delay in navigating away\r\n        // from the current location. As a compromise, we will try to increase\r\n        // the chances of sending the unavailable presence within the short time\r\n        // span that we have upon unloading by invoking flush() on the\r\n        // connection. We flush() once before sending/queuing the unavailable\r\n        // presence in order to attemtp to have the unavailable presence at the\r\n        // top of the send queue. We flush() once more after sending/queuing the\r\n        // unavailable presence in order to attempt to have it sent as soon as\r\n        // possible.\r\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n        this.connection.send(pres);\r\n        this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    discoRoomInfo() {\r\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\r\n\r\n        const getInfo\r\n            = $iq({\r\n                type: 'get',\r\n                to: this.roomjid\r\n            })\r\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\r\n\r\n        this.connection.sendIQ(getInfo, result => {\r\n            const locked\r\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\r\n                    .length\r\n                    === 1;\r\n\r\n            if (locked !== this.locked) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\r\n                this.locked = locked;\r\n            }\r\n\r\n            const meetingIdValEl\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\r\n\r\n            if (meetingIdValEl.length) {\r\n                this.setMeetingId(meetingIdValEl.text());\r\n            } else {\r\n                logger.warn('No meeting ID from backend');\r\n            }\r\n\r\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\r\n\r\n            const lobbyRoomField\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\r\n\r\n            if (this.lobby) {\r\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\r\n            }\r\n\r\n            if (membersOnly !== this.membersOnlyEnabled) {\r\n                this.membersOnlyEnabled = membersOnly;\r\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\r\n            }\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room info: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the meeting unique Id (received from the backend).\r\n     *\r\n     * @param {string} meetingId - The new meetings id.\r\n     * @returns {void}\r\n     */\r\n    setMeetingId(meetingId) {\r\n        if (this.meetingId !== meetingId) {\r\n            if (this.meetingId) {\r\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\r\n            }\r\n            this.meetingId = meetingId;\r\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    createNonAnonymousRoom() {\r\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\r\n\r\n        if (this.options.disableDiscoInfo) {\r\n            return;\r\n        }\r\n\r\n        const getForm = $iq({ type: 'get',\r\n            to: this.roomjid })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\r\n            .c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n        this.connection.sendIQ(getForm, form => {\r\n            if (!$(form).find(\r\n                    '>query>x[xmlns=\"jabber:x:data\"]'\r\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\r\n                const errmsg = 'non-anonymous rooms not supported';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                logger.error(errmsg);\r\n\r\n                return;\r\n            }\r\n\r\n            const formSubmit = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\r\n                .c('value')\r\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\r\n\r\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\r\n                .c('value').t('anyone').up().up();\r\n\r\n            this.connection.sendIQ(formSubmit);\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room configuration form: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles Xmpp Connection status updates.\r\n     *\r\n     * @param {Strophe.Status} status - The Strophe connection status.\r\n     */\r\n    onConnStatusChanged(status) {\r\n        // Send cached presence when the XMPP connection is re-established.\r\n        if (status === XmppConnection.Status.CONNECTED) {\r\n            this.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const member = {};\r\n        const statusEl = pres.getElementsByTagName('status')[0];\r\n\r\n        if (statusEl) {\r\n            member.status = statusEl.textContent || '';\r\n        }\r\n        let hasStatusUpdate = false;\r\n        let hasVersionUpdate = false;\r\n        const xElement\r\n            = pres.getElementsByTagNameNS(\r\n                'http://jabber.org/protocol/muc#user', 'x')[0];\r\n        const mucUserItem\r\n            = xElement && xElement.getElementsByTagName('item')[0];\r\n\r\n        member.isReplaceParticipant\r\n            = pres.getElementsByTagName('flip_device').length;\r\n\r\n        member.affiliation\r\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\r\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\r\n\r\n        // Focus recognition\r\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\r\n\r\n        member.jid = jid;\r\n        member.isFocus\r\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\r\n        member.isHiddenDomain\r\n            = jid && jid.indexOf('@') > 0\r\n                && this.options.hiddenDomain\r\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\r\n\r\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\r\n            fromHiddenDomain: member.isHiddenDomain,\r\n            presence: pres\r\n        });\r\n\r\n        const xEl = pres.querySelector('x');\r\n\r\n        if (xEl) {\r\n            xEl.remove();\r\n        }\r\n\r\n        const nodes = [];\r\n\r\n        parser.packet2JSON(pres, nodes);\r\n        this.lastPresences[from] = nodes;\r\n\r\n        // process nodes to extract data needed for MUC_JOINED and\r\n        // MUC_MEMBER_JOINED events\r\n        const extractIdentityInformation = node => {\r\n            const identity = {};\r\n            const userInfo = node.children.find(c => c.tagName === 'user');\r\n\r\n            if (userInfo) {\r\n                identity.user = {};\r\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\r\n                    const child\r\n                        = userInfo.children.find(c => c.tagName === tag);\r\n\r\n                    if (child) {\r\n                        identity.user[tag] = child.value;\r\n                    }\r\n                }\r\n            }\r\n            const groupInfo = node.children.find(c => c.tagName === 'group');\r\n\r\n            if (groupInfo) {\r\n                identity.group = groupInfo.value;\r\n            }\r\n\r\n            return identity;\r\n        };\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'bot': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { type } = attributes;\r\n\r\n                member.botType = type;\r\n                break;\r\n            }\r\n            case 'nick':\r\n                member.nick = node.value;\r\n                break;\r\n            case 'userId':\r\n                member.id = node.value;\r\n                break;\r\n            case 'stats-id':\r\n                member.statsID = node.value;\r\n                break;\r\n            case 'identity':\r\n                member.identity = extractIdentityInformation(node);\r\n                break;\r\n            case 'features': {\r\n                member.features = this._extractFeatures(node);\r\n                break;\r\n            }\r\n            case 'stat': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { name } = attributes;\r\n\r\n                if (name === 'version') {\r\n                    member.version = attributes.value;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        if (from === this.myroomjid) {\r\n            const newRole\r\n                = member.affiliation === 'owner' ? member.role : 'none';\r\n\r\n            if (this.role !== newRole) {\r\n                this.role = newRole;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\r\n                    this.role);\r\n            }\r\n            if (!this.joined) {\r\n                this.joined = true;\r\n                const now = this.connectionTimes['muc.joined']\r\n                    = window.performance.now();\r\n\r\n                logger.log('(TIME) MUC joined:\\t', now);\r\n\r\n                // set correct initial state of locked\r\n                if (this.password) {\r\n                    this.locked = true;\r\n                }\r\n\r\n                // Re-send presence in case any presence updates were added,\r\n                // but blocked from sending, during the join process.\r\n                // send the presence only if there was a modification after we had synced it\r\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\r\n                    this.sendPresence();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\r\n\r\n                // Now let's check the disco-info to retrieve the\r\n                // meeting Id if any\r\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\r\n            }\r\n        } else if (jid === undefined) {\r\n            logger.info('Ignoring member with undefined JID');\r\n        } else if (this.members[from] === undefined) {\r\n            // new participant\r\n            this.members[from] = member;\r\n            logger.log('entered', from, member);\r\n            hasStatusUpdate = member.status !== undefined;\r\n            hasVersionUpdate = member.version !== undefined;\r\n            if (member.isFocus) {\r\n                this._initFocus(from, member.features);\r\n            } else {\r\n                // identity is being added to member joined, so external\r\n                // services can be notified for that (currently identity is\r\n                // not used inside library)\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_JOINED,\r\n                    from,\r\n                    member.nick,\r\n                    member.role,\r\n                    member.isHiddenDomain,\r\n                    member.statsID,\r\n                    member.status,\r\n                    member.identity,\r\n                    member.botType,\r\n                    member.jid,\r\n                    member.features,\r\n                    member.isReplaceParticipant);\r\n\r\n                // we are reporting the status with the join\r\n                // so we do not want a second event about status update\r\n                hasStatusUpdate = false;\r\n            }\r\n        } else {\r\n            // Presence update for existing participant\r\n            // Watch role change:\r\n            const memberOfThis = this.members[from];\r\n\r\n            if (memberOfThis.role !== member.role) {\r\n                memberOfThis.role = member.role;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\r\n            }\r\n\r\n            // affiliation changed\r\n            if (memberOfThis.affiliation !== member.affiliation) {\r\n                memberOfThis.affiliation = member.affiliation;\r\n            }\r\n\r\n            // fire event that botType had changed\r\n            if (memberOfThis.botType !== member.botType) {\r\n                memberOfThis.botType = member.botType;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n                    from,\r\n                    member.botType);\r\n            }\r\n\r\n            if (member.isFocus) {\r\n                // From time to time first few presences of the focus are not\r\n                // containing it's jid. That way we can mark later the focus\r\n                // member instead of not marking it at all and not starting the\r\n                // conference.\r\n                // FIXME: Maybe there is a better way to handle this issue. It\r\n                // seems there is some period of time in prosody that the\r\n                // configuration form is received but not applied. And if any\r\n                // participant joins during that period of time the first\r\n                // presence from the focus won't contain\r\n                // <item jid=\"focus...\" />.\r\n                // By default we are disabling the waiting for form submission in order to use the room\r\n                // and we had enabled by default that jids are public in the room ,\r\n                // so this case should not happen, if public jid is turned off we will receive the jid\r\n                // when we become moderator in the room\r\n                memberOfThis.isFocus = true;\r\n                this._initFocus(from, member.features);\r\n            }\r\n\r\n            // store the new display name\r\n            if (member.displayName) {\r\n                memberOfThis.displayName = member.displayName;\r\n            }\r\n\r\n            // update stored status message to be able to detect changes\r\n            if (memberOfThis.status !== member.status) {\r\n                hasStatusUpdate = true;\r\n                memberOfThis.status = member.status;\r\n            }\r\n\r\n            if (memberOfThis.version !== member.version) {\r\n                hasVersionUpdate = true;\r\n                memberOfThis.version = member.version;\r\n            }\r\n\r\n            if (!isEqual(memberOfThis.features, member.features)) {\r\n                memberOfThis.features = member.features;\r\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\r\n            }\r\n        }\r\n\r\n        // after we had fired member or room joined events, lets fire events\r\n        // for the rest info we got in presence\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'nick':\r\n                if (!member.isFocus) {\r\n                    const displayName\r\n                        = this.xmpp.options.displayJids\r\n                            ? Strophe.getResourceFromJid(from)\r\n                            : member.nick;\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\r\n                        from,\r\n                        displayName);\r\n                }\r\n                break;\r\n            case 'bridgeNotAvailable':\r\n                if (member.isFocus && !this.noBridgeAvailable) {\r\n                    this.noBridgeAvailable = true;\r\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\r\n                }\r\n                break;\r\n            case 'conference-properties':\r\n                if (member.isFocus) {\r\n                    const properties = {};\r\n\r\n                    for (let j = 0; j < node.children.length; j++) {\r\n                        const { attributes } = node.children[j];\r\n\r\n                        if (attributes && attributes.key) {\r\n                            properties[attributes.key] = attributes.value;\r\n                        }\r\n                    }\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\r\n\r\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\r\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\r\n                }\r\n                break;\r\n            case 'transcription-status': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n\r\n                const { status } = attributes;\r\n\r\n                if (status && status !== this.transcriptionStatus) {\r\n                    this.transcriptionStatus = status;\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n                        status\r\n                    );\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case 'call-control': {\r\n                const att = node.attributes;\r\n\r\n                if (!att) {\r\n                    break;\r\n                }\r\n                this.phoneNumber = att.phone || null;\r\n                this.phonePin = att.pin || null;\r\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\r\n                break;\r\n            }\r\n            default:\r\n                this.processNode(node, from);\r\n            }\r\n        }\r\n\r\n        // Trigger status message update if necessary\r\n        if (hasStatusUpdate) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.PRESENCE_STATUS,\r\n                from,\r\n                member.status);\r\n        }\r\n\r\n        if (hasVersionUpdate) {\r\n            logger.info(`Received version for ${jid}: ${member.version}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts the features from the presence.\r\n     * @param node the node to process.\r\n     * @return features the Set of features where extracted data is added.\r\n     * @private\r\n     */\r\n    _extractFeatures(node) {\r\n        const features = new Set();\r\n\r\n        for (let j = 0; j < node.children.length; j++) {\r\n            const { attributes } = node.children[j];\r\n\r\n            if (attributes && attributes.var) {\r\n                features.add(attributes.var);\r\n            }\r\n        }\r\n\r\n        return features;\r\n    }\r\n\r\n    /**\r\n     * Initialize some properties when the focus participant is verified.\r\n     * @param from jid of the focus\r\n     * @param features the features reported in jicofo presence\r\n     */\r\n    _initFocus(from, features) {\r\n        this.focusMucJid = from;\r\n        this.focusFeatures = features;\r\n    }\r\n\r\n    /**\r\n     * Sets the special listener to be used for \"command\"s whose name starts\r\n     * with \"jitsi_participant_\".\r\n     */\r\n    setParticipantPropertyListener(listener) {\r\n        this.participantPropertyListener = listener;\r\n    }\r\n\r\n    /**\r\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\r\n     * @returns {boolean}\r\n     */\r\n    supportsRestartByTerminate() {\r\n        return this.restartByTerminateSupported;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param from\r\n     */\r\n    processNode(node, from) {\r\n        // make sure we catch all errors coming from any handler\r\n        // otherwise we can remove the presence handler from strophe\r\n        try {\r\n            let tagHandlers = this.presHandlers[node.tagName];\r\n\r\n            if (node.tagName.startsWith('jitsi_participant_')) {\r\n                tagHandlers = [ this.participantPropertyListener ];\r\n            }\r\n\r\n            if (tagHandlers) {\r\n                tagHandlers.forEach(handler => {\r\n                    handler(node, Strophe.getResourceFromJid(from), from);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            logger.error(`Error processing:${node.tagName} node.`, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send text message to the other participants in the conference\r\n     * @param message\r\n     * @param elementName\r\n     */\r\n    sendMessage(message, elementName) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        // We are adding the message in a packet extension. If this element\r\n        // is different from 'body', we add a custom namespace.\r\n        // e.g. for 'json-message' extension of message stanza.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, {}, message);\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Send private text message to another participant of the conference\r\n     * @param id id/muc resource of the receiver\r\n     * @param message\r\n     * @param elementName\r\n     */\r\n    sendPrivateMessage(id, message, elementName) {\r\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\r\n            type: 'chat' });\r\n\r\n        // We are adding the message in packet. If this element is different\r\n        // from 'body', we add our custom namespace for the same.\r\n        // e.g. for 'json-message' message extension.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\r\n    }\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param subject\r\n     */\r\n    setSubject(subject) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        msg.c('subject', subject);\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Called when participant leaves.\r\n     * @param jid the jid of the participant that leaves\r\n     * @param skipEvents optional params to skip any events, including check\r\n     * whether this is the focus that left\r\n     */\r\n    onParticipantLeft(jid, skipEvents) {\r\n        delete this.lastPresences[jid];\r\n\r\n        if (skipEvents) {\r\n            return;\r\n        }\r\n\r\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\r\n\r\n        this.moderator.onMucMemberLeft(jid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceUnavailable(pres, from) {\r\n        // ignore presence\r\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\r\n            return true;\r\n        }\r\n\r\n        // room destroyed ?\r\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\r\n\r\n        if (destroySelect.length) {\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>destroy>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Status code 110 indicates that this notification is \"self-presence\".\r\n        const isSelfPresence\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\r\n                        + 'status[code=\"110\"]')\r\n                .length;\r\n        const isKick\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>status[code=\"307\"]')\r\n                .length;\r\n        const membersKeys = Object.keys(this.members);\r\n        const isReplaceParticipant = $(pres).find('flip_device').length;\r\n\r\n        if (isKick) {\r\n            const actorSelect\r\n                = $(pres)\r\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\r\n            let actorNick;\r\n\r\n            if (actorSelect.length) {\r\n                actorNick = actorSelect.attr('nick');\r\n            }\r\n\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                + '>item>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            // we first fire the kicked so we can show the participant\r\n            // who kicked, before notifying that participant left\r\n            // we fire kicked for us and for any participant kicked\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.KICKED,\r\n                isSelfPresence,\r\n                actorNick,\r\n                Strophe.getResourceFromJid(from),\r\n                reason,\r\n                isReplaceParticipant);\r\n        }\r\n\r\n        if (isSelfPresence) {\r\n            // If the status code is 110 this means we're leaving and we would\r\n            // like to remove everyone else from our view, so we trigger the\r\n            // event.\r\n            membersKeys.forEach(jid => {\r\n                const member = this.members[jid];\r\n\r\n                delete this.members[jid];\r\n                this.onParticipantLeft(jid, member.isFocus);\r\n            });\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            // we fire muc_left only if this is not a kick,\r\n            // kick has both statuses 110 and 307.\r\n            if (!isKick) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\r\n            }\r\n        } else {\r\n            delete this.members[from];\r\n            this.onParticipantLeft(from, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     * @param from\r\n     */\r\n    onMessage(msg, from) {\r\n        const type = msg.getAttribute('type');\r\n\r\n        if (type === 'error') {\r\n            const errorMsg = $(msg).find('>error>text').text();\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\r\n\r\n            return true;\r\n        }\r\n\r\n        const txt = $(msg).find('>body').text();\r\n        const subject = $(msg).find('>subject');\r\n\r\n        if (subject.length) {\r\n            const subjectText = subject.text();\r\n\r\n            if (subjectText || subjectText === '') {\r\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\r\n                logger.log(`Subject is changed to ${subjectText}`);\r\n            }\r\n        }\r\n\r\n        // xep-0203 delay\r\n        let stamp = $(msg).find('>delay').attr('stamp');\r\n\r\n        if (!stamp) {\r\n            // or xep-0091 delay, UTC timestamp\r\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\r\n\r\n            if (stamp) {\r\n                // the format is CCYYMMDDThh:mm:ss\r\n                const dateParts\r\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\r\n\r\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\r\n            }\r\n        }\r\n\r\n        if (from === this.roomjid) {\r\n            let invite;\r\n\r\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\r\n                this.discoRoomInfo();\r\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\r\n                        && invite.length) {\r\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\r\n                let password;\r\n\r\n                if (passwordSelect && passwordSelect.length) {\r\n                    password = passwordSelect.text();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                    from, invite.attr('from'), txt, password);\r\n            }\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message').text();\r\n\r\n        if (jsonMessage) {\r\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\r\n\r\n            // We emit this event if the message is a valid json, and is not\r\n            // delivered after a delay, i.e. stamp is undefined.\r\n            // e.g. - subtitles should not be displayed if delayed.\r\n            if (parsedJson && stamp === undefined) {\r\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n                    from, parsedJson);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (txt) {\r\n            if (type === 'chat') {\r\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                        from, txt, this.myroomjid, stamp);\r\n            } else if (type === 'groupchat') {\r\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\r\n                        from, txt, this.myroomjid, stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceError(pres, from) {\r\n        if ($(pres)\r\n                .find(\r\n                    '>error[type=\"auth\"]'\r\n                        + '>not-authorized['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            logger.log('on password required', from);\r\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\r\n        } else if ($(pres)\r\n                .find(\r\n                    '>error[type=\"cancel\"]'\r\n                        + '>not-allowed['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\r\n\r\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\r\n                // enter the room by replying with 'not-authorized'. This would\r\n                // result in reconnection from authorized domain.\r\n                // We're either missing Jicofo/Prosody config for anonymous\r\n                // domains or something is wrong.\r\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\r\n\r\n            } else {\r\n                logger.warn('onPresError ', pres);\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\r\n            }\r\n        } else if ($(pres).find('>error>service-unavailable').length) {\r\n            logger.warn('Maximum users limit for the room has been reached',\r\n                pres);\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\r\n        } else if ($(pres)\r\n            .find(\r\n                '>error[type=\"auth\"]'\r\n                + '>registration-required['\r\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\r\n\r\n            // let's extract the lobby jid from the custom field\r\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\r\n            let lobbyRoomJid;\r\n\r\n            if (lobbyRoomNode.length) {\r\n                lobbyRoomJid = lobbyRoomNode.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\r\n        } else {\r\n            logger.warn('onPresError ', pres);\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param affiliation\r\n     */\r\n    setAffiliation(jid, affiliation) {\r\n        const grantIQ = $iq({\r\n            to: this.roomjid,\r\n            type: 'set'\r\n        })\r\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n        .c('item', {\r\n            affiliation,\r\n            nick: Strophe.getResourceFromJid(jid)\r\n        })\r\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\r\n        .up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            grantIQ,\r\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\r\n            error => logger.log('Set affiliation of participant error: ', error));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param reason\r\n     */\r\n    kick(jid, reason = 'You have been kicked.') {\r\n        const kickIQ = $iq({ to: this.roomjid,\r\n            type: 'set' })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\r\n                role: 'none' })\r\n            .c('reason').t(reason).up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            kickIQ,\r\n            result => logger.log('Kick participant with jid: ', jid, result),\r\n            error => logger.log('Kick participant error: ', error));\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onNotSupported\r\n     */\r\n    lockRoom(key, onSuccess, onError, onNotSupported) {\r\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\r\n        this.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res)\r\n                        .find(\r\n                            '>query>x[xmlns=\"jabber:x:data\"]'\r\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\r\n                        .length) {\r\n                    const formsubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        })\r\n                            .c('query', {\r\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\r\n                            });\r\n\r\n                    formsubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formsubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\r\n                        .c('value')\r\n                        .t(key)\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field',\r\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                        .c('value')\r\n                        .t(key === null || key.length === 0 ? '0' : '1')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if members only enabled\r\n                    if (this.membersOnlyEnabled) {\r\n                        formsubmit\r\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                            .c('value')\r\n                            .t('true')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    // Fixes a bug in prosody 0.9.+\r\n                    // https://prosody.im/issues/issue/373\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\r\n                        .c('value')\r\n                        .t('anyone')\r\n                        .up()\r\n                        .up();\r\n\r\n                    this.connection.sendIQ(\r\n                        formsubmit,\r\n                        () => {\r\n\r\n                            // we set the password in chat room so we can use it\r\n                            // later when dialing out\r\n                            this.password = key;\r\n                            onSuccess();\r\n                        },\r\n                        onError);\r\n                } else {\r\n                    onNotSupported();\r\n                }\r\n            },\r\n            onError);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Turns off or on the members only config for the main room.\r\n     *\r\n     * @param {boolean} enabled - Whether to turn it on or off.\r\n     * @param onSuccess - optional callback.\r\n     * @param onError - optional callback.\r\n     */\r\n    setMembersOnly(enabled, onSuccess, onError) {\r\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\r\n            // first grant membership to all that are in the room\r\n            // currently there is a bug in prosody where it handles only the first item\r\n            // that's why we will send iq per member\r\n            Object.values(this.members).forEach(m => {\r\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\r\n                    this.xmpp.connection.sendIQ(\r\n                        $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set' })\r\n                        .c('query', {\r\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n                        .c('item', {\r\n                            'affiliation': 'member',\r\n                            'jid': m.jid\r\n                        }).up().up());\r\n                }\r\n            });\r\n        }\r\n\r\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\r\n\r\n        this.xmpp.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\r\n                    const formToSubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n                    formToSubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                        .c('value')\r\n                        .t(enabled ? 'true' : 'false')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if room is locked from other participant or we are locking it\r\n                    if (this.locked) {\r\n                        formToSubmit\r\n                            .c('field',\r\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                            .c('value')\r\n                            .t('1')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\r\n                } else {\r\n                    errorCallback(new Error('Setting members only room not supported!'));\r\n                }\r\n            },\r\n            errorCallback);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * This method is used by jibri.\r\n     *\r\n     * @param key The key to add or replace.\r\n     * @param values The new values.\r\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\r\n     * performed as the value was already there.\r\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\r\n     */\r\n    addToPresence(key, values) {\r\n        return this.addOrReplaceInPresence(key, values);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key The key to add or replace.\r\n     * @param values The new values.\r\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\r\n     * performed as the value was already there.\r\n     */\r\n    addOrReplaceInPresence(key, values) {\r\n        values.tagName = key;\r\n\r\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\r\n\r\n        // if we have found just one, let's check is it the same\r\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\r\n            return false;\r\n        }\r\n\r\n        this.removeFromPresence(key);\r\n        this.presMap.nodes.push(values);\r\n        this.presenceUpdateTime = Date.now();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the presence map.\r\n     *\r\n     * @param {string} key - The key to find the value for.\r\n     * @returns {Object?}\r\n     */\r\n    getFromPresence(key) {\r\n        return this.presMap.nodes.find(node => key === node.tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the presence map.\r\n     * @param key\r\n     */\r\n    removeFromPresence(key) {\r\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\r\n\r\n        this.presMap.nodes = nodes;\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    addPresenceListener(name, handler) {\r\n        if (typeof handler !== 'function') {\r\n            throw new Error('\"handler\" is not a function');\r\n        }\r\n        let tagHandlers = this.presHandlers[name];\r\n\r\n        if (!tagHandlers) {\r\n            this.presHandlers[name] = tagHandlers = [];\r\n        }\r\n        if (tagHandlers.indexOf(handler) === -1) {\r\n            tagHandlers.push(handler);\r\n        } else {\r\n            logger.warn(\r\n                `Trying to add the same handler more than once for: ${name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    removePresenceListener(name, handler) {\r\n        const tagHandlers = this.presHandlers[name];\r\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\r\n\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (handlerIdx !== -1) {\r\n            tagHandlers.splice(handlerIdx, 1);\r\n        } else {\r\n            logger.warn(`Handler for: ${name} was not registered`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n     * focus.\r\n     * @param mucJid the full MUC address of the user to be checked.\r\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\r\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\r\n     * the MUC then <tt>null</tt> is returned.\r\n     */\r\n    isFocus(mucJid) {\r\n        const member = this.members[mucJid];\r\n\r\n        if (member) {\r\n            return member.isFocus;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isModerator() {\r\n        return this.role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param peerJid\r\n     */\r\n    getMemberRole(peerJid) {\r\n        if (this.members[peerJid]) {\r\n            return this.members[peerJid].role;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    setVideoMute(mute) {\r\n        this.sendVideoInfoPresence(mute);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    setAudioMute(mute) {\r\n        this.sendAudioInfoPresence(mute);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addAudioInfoToPresence(mute) {\r\n        const audioMutedTagName = 'audiomuted';\r\n\r\n        // we skip adding it as muted is default value\r\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\r\n            return false;\r\n        }\r\n\r\n        return this.addOrReplaceInPresence(\r\n            audioMutedTagName,\r\n            {\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendAudioInfoPresence(mute) {\r\n        // FIXME resend presence on CONNECTED\r\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addVideoInfoToPresence(mute) {\r\n        const videoMutedTagName = 'videomuted';\r\n\r\n        // we skip adding it as muted is default value\r\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\r\n            return false;\r\n        }\r\n\r\n        return this.addOrReplaceInPresence(\r\n            videoMutedTagName,\r\n            {\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendVideoInfoPresence(mute) {\r\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given endpoint JID.\r\n     * @param {string} endpointId the endpoint ID mapped to the participant\r\n     * which corresponds to MUC nickname.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available or if\r\n     * the media type given is invalid.\r\n     */\r\n    getMediaPresenceInfo(endpointId, mediaType) {\r\n        // Will figure out current muted status by looking up owner's presence\r\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\r\n\r\n        if (!pres) {\r\n            // No presence available\r\n            return null;\r\n        }\r\n        const data = {\r\n            muted: true, // muted by default\r\n            videoType: undefined // no video type by default\r\n        };\r\n        let mutedNode = null;\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\r\n        } else if (mediaType === MediaType.VIDEO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\r\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\r\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\r\n\r\n            if (videoTypeNode.length > 0) {\r\n                data.videoType = videoTypeNode[0].value;\r\n            }\r\n            if (codecTypeNode.length > 0) {\r\n                data.codecType = codecTypeNode[0].value;\r\n            }\r\n        } else {\r\n            logger.error(`Unsupported media type: ${mediaType}`);\r\n\r\n            return null;\r\n        }\r\n\r\n        if (mutedNode.length > 0) {\r\n            data.muted = mutedNode[0].value === 'true';\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the SIP calls are supported and false otherwise\r\n     */\r\n    isSIPCallingSupported() {\r\n        if (this.moderator) {\r\n            return this.moderator.isSipGatewayEnabled();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Dials a number.\r\n     * @param number the number\r\n     */\r\n    dial(number) {\r\n        return this.connection.rayo.dial(number, 'fromnumber',\r\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\r\n            this.focusMucJid);\r\n    }\r\n\r\n    /**\r\n     * Hangup an existing call\r\n     */\r\n    hangup() {\r\n        return this.connection.rayo.hangup();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Lobby}\r\n     */\r\n    getLobby() {\r\n        return this.lobby;\r\n    }\r\n\r\n    /**\r\n     * @returns {AVModeration}\r\n     */\r\n    getAVModeration() {\r\n        return this.avModeration;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the phone number for joining the conference.\r\n     */\r\n    getPhoneNumber() {\r\n        return this.phoneNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the pin for joining the conference with phone.\r\n     */\r\n    getPhonePin() {\r\n        return this.phonePin;\r\n    }\r\n\r\n    /**\r\n     * Returns the meeting unique ID if any came from backend.\r\n     *\r\n     * @returns {string} - The meeting ID.\r\n     */\r\n    getMeetingId() {\r\n        return this.meetingId;\r\n    }\r\n\r\n    /**\r\n     * Mutes remote participant.\r\n     * @param jid of the participant\r\n     * @param mute\r\n     * @param mediaType\r\n     */\r\n    muteParticipant(jid, mute, mediaType) {\r\n        logger.info('set mute', mute);\r\n        const iqToFocus = $iq(\r\n            { to: this.focusMucJid,\r\n                type: 'set' })\r\n            .c('mute', {\r\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\r\n                jid\r\n            })\r\n            .t(mute.toString())\r\n            .up();\r\n\r\n        this.connection.sendIQ(\r\n            iqToFocus,\r\n            result => logger.log('set mute', result),\r\n            error => logger.log('set mute error', error));\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMuteVideo(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean any listeners or resources, executed on leaving.\r\n     */\r\n    clean() {\r\n        this._removeConnListeners.forEach(remove => remove());\r\n        this._removeConnListeners = [];\r\n\r\n        this.joined = false;\r\n    }\r\n\r\n    /**\r\n     * Leaves the room. Closes the jingle session.\r\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\r\n     * less than 5s after sending presence unavailable. Otherwise the promise is\r\n     * rejected.\r\n     */\r\n    leave() {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\r\n            const eventEmitter = this.eventEmitter;\r\n\r\n            this.clean();\r\n\r\n            /**\r\n             *\r\n             * @param doReject\r\n             */\r\n            function onMucLeft(doReject = false) {\r\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\r\n                clearTimeout(timeout);\r\n                if (doReject) {\r\n                    // the timeout expired\r\n                    reject(new Error('The timeout for the confirmation about '\r\n                        + 'leaving the room expired.'));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\r\n            this.doLeave();\r\n        });\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport ChatRoom from './ChatRoom';\r\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * MUC connection plugin.\r\n */\r\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\r\n    /**\r\n     *\r\n     * @param xmpp\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.rooms = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        // add handlers (just once)\r\n        this.connection.addHandler(this.onPresence.bind(this), null,\r\n            'presence', null, null, null, null);\r\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\r\n            null, 'presence', 'unavailable', null);\r\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\r\n            'presence', 'error', null);\r\n        this.connection.addHandler(this.onMessage.bind(this), null,\r\n            'message', null, null);\r\n        this.connection.addHandler(this.onMute.bind(this),\r\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\r\n        this.connection.addHandler(this.onMuteVideo.bind(this),\r\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     * @param options\r\n     */\r\n    createRoom(jid, password, options) {\r\n        const roomJid = Strophe.getBareJidFromJid(jid);\r\n\r\n        if (this.isRoomCreated(roomJid)) {\r\n            const errmsg = 'You are already in the room!';\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\r\n            password, this.xmpp, options);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\r\n\r\n        return this.rooms[roomJid];\r\n    }\r\n\r\n    /**\r\n     *  Check if a room with the passed JID is already created.\r\n     *\r\n     * @param {string} roomJid - The JID of the room.\r\n     * @returns {boolean}\r\n     */\r\n    isRoomCreated(roomJid) {\r\n        return roomJid in this.rooms;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    doLeave(jid) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\r\n        delete this.rooms[jid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n\r\n        // What is this for? A workaround for something?\r\n        if (pres.getAttribute('type')) {\r\n            return true;\r\n        }\r\n\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        // Parse status.\r\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n            + '>status[code=\"201\"]').length) {\r\n            room.createNonAnonymousRoom();\r\n        }\r\n\r\n        room.onPresence(pres);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceUnavailable(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceUnavailable(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceError(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceError(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     */\r\n    onMessage(msg) {\r\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\r\n        const from = msg.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMessage(msg, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMute(iq);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMuteVideo(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMuteVideo(iq);\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger('FeatureFlags');\r\n\r\n/**\r\n * A global module for accessing information about different feature flags state.\r\n */\r\nclass FeatureFlags {\r\n    /**\r\n     * Configures the module.\r\n     *\r\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\r\n     */\r\n    init(flags) {\r\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\r\n\r\n        logger.info(`Source name signaling: ${this._sourceNameSignaling}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if the source name signaling is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isSourceNameSignalingEnabled() {\r\n        return this._sourceNameSignaling;\r\n    }\r\n}\r\n\r\nexport default new FeatureFlags();\r\n","\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport browser from '../browser';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * The default frame rate for Screen Sharing.\r\n */\r\nexport const SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n/**\r\n * Handles obtaining a stream from a screen capture on different browsers.\r\n */\r\nconst ScreenObtainer = {\r\n    /**\r\n     * If not <tt>null</tt> it means that the initialization process is still in\r\n     * progress. It is used to make desktop stream request wait and continue\r\n     * after it's done.\r\n     * {@type Promise|null}\r\n     */\r\n\r\n    obtainStream: null,\r\n\r\n    /**\r\n     * Initializes the function used to obtain a screen capture\r\n     * (this.obtainStream).\r\n     *\r\n     * @param {object} options\r\n     */\r\n    init(options = {}) {\r\n        this.options = options;\r\n        this.obtainStream = this._createObtainStreamMethod();\r\n\r\n        if (!this.obtainStream) {\r\n            logger.info('Desktop sharing disabled');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a method which will be used to obtain the screen sharing stream\r\n     * (based on the browser type).\r\n     *\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    _createObtainStreamMethod() {\r\n        if (browser.isNWJS()) {\r\n            return (onSuccess, onFailure) => {\r\n                window.JitsiMeetNW.obtainDesktopStream(\r\n                    onSuccess,\r\n                    (error, constraints) => {\r\n                        let jitsiError;\r\n\r\n                        // FIXME:\r\n                        // This is very very dirty fix for recognising that the\r\n                        // user have clicked the cancel button from the Desktop\r\n                        // sharing pick window. The proper solution would be to\r\n                        // detect this in the NWJS application by checking the\r\n                        // streamId === \"\". Even better solution would be to\r\n                        // stop calling GUM from the NWJS app and just pass the\r\n                        // streamId to lib-jitsi-meet. This way the desktop\r\n                        // sharing implementation for NWJS and chrome extension\r\n                        // will be the same and lib-jitsi-meet will be able to\r\n                        // control the constraints, check the streamId, etc.\r\n                        //\r\n                        // I cannot find documentation about \"InvalidStateError\"\r\n                        // but this is what we are receiving from GUM when the\r\n                        // streamId for the desktop sharing is \"\".\r\n\r\n                        if (error && error.name === 'InvalidStateError') {\r\n                            jitsiError = new JitsiTrackError(\r\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\r\n                            );\r\n                        } else {\r\n                            jitsiError = new JitsiTrackError(\r\n                                error, constraints, [ 'desktop' ]);\r\n                        }\r\n                        (typeof onFailure === 'function')\r\n                            && onFailure(jitsiError);\r\n                    });\r\n            };\r\n        } else if (browser.isElectron()) {\r\n            return this.obtainScreenOnElectron;\r\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMediaRN;\r\n        } else if (browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMedia;\r\n        }\r\n        logger.log('Screen sharing not supported on ', browser.getName());\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the appropriate constraints for audio sharing.\r\n     *\r\n     * @returns {Object|boolean}\r\n     */\r\n    _getAudioConstraints() {\r\n        const { audioQuality } = this.options;\r\n        const audio = audioQuality?.stereo ? {\r\n            autoGainControl: false,\r\n            channelCount: 2,\r\n            echoCancellation: false,\r\n            noiseSuppression: false\r\n        } : true;\r\n\r\n        return audio;\r\n    },\r\n\r\n    /**\r\n     * Checks whether obtaining a screen capture is supported in the current\r\n     * environment.\r\n     * @returns {boolean}\r\n     */\r\n    isSupported() {\r\n        return this.obtainStream !== null;\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream on Electron.\r\n     *\r\n     * @param onSuccess - Success callback.\r\n     * @param onFailure - Failure callback.\r\n     */\r\n    obtainScreenOnElectron(onSuccess, onFailure) {\r\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\r\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\r\n\r\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\r\n                {\r\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\r\n                },\r\n                (streamId, streamType, screenShareAudio = false) => {\r\n                    if (streamId) {\r\n                        let audioConstraints = false;\r\n\r\n                        if (screenShareAudio) {\r\n                            audioConstraints = {};\r\n                            const optionalConstraints = this._getAudioConstraints();\r\n\r\n                            if (typeof optionalConstraints !== 'boolean') {\r\n                                audioConstraints = {\r\n                                    optional: optionalConstraints\r\n                                };\r\n                            }\r\n\r\n                            // Audio screen sharing for electron only works for screen type devices.\r\n                            // i.e. when the user shares the whole desktop.\r\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\r\n                            // which, in the case a users has multiple monitors, leads to them being shared all\r\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\r\n                            // working properly.\r\n                            if (streamType === 'screen') {\r\n                                audioConstraints.mandatory = {\r\n                                    chromeMediaSource: 'desktop'\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        const constraints = {\r\n                            audio: audioConstraints,\r\n                            video: {\r\n                                mandatory: {\r\n                                    chromeMediaSource: 'desktop',\r\n                                    chromeMediaSourceId: streamId,\r\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\r\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\r\n                                    maxWidth: window.screen.width,\r\n                                    maxHeight: window.screen.height\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        // We have to use the old API on Electron to get a desktop stream.\r\n                        navigator.mediaDevices.getUserMedia(constraints)\r\n                            .then(stream => onSuccess({\r\n                                stream,\r\n                                sourceId: streamId,\r\n                                sourceType: streamType\r\n                            }), onFailure);\r\n                    } else {\r\n                        // As noted in Chrome Desktop Capture API:\r\n                        // If user didn't select any source (i.e. canceled the prompt)\r\n                        // then the callback is called with an empty streamId.\r\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n                    }\r\n                },\r\n                err => onFailure(new JitsiTrackError(\r\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\r\n                    err\r\n                ))\r\n            );\r\n        } else {\r\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\r\n        let getDisplayMedia;\r\n\r\n        if (navigator.getDisplayMedia) {\r\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\r\n        } else {\r\n            // eslint-disable-next-line max-len\r\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        }\r\n\r\n        const { desktopSharingFrameRate } = this.options;\r\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\r\n        const audio = this._getAudioConstraints();\r\n\r\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\r\n        video.frameRate && delete video.frameRate.min;\r\n\r\n        const constraints = {\r\n            video,\r\n            audio,\r\n            cursor: 'always'\r\n        };\r\n\r\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\r\n\r\n        getDisplayMedia(constraints)\r\n            .then(stream => {\r\n                callback({\r\n                    stream,\r\n                    sourceId: stream.id\r\n                });\r\n            })\r\n            .catch(error => {\r\n                const errorDetails = {\r\n                    errorName: error && error.name,\r\n                    errorMsg: error && error.message,\r\n                    errorStack: error && error.stack\r\n                };\r\n\r\n                logger.error('getDisplayMedia error', constraints, errorDetails);\r\n\r\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\r\n                    // On Chrome this is the only thing different between error returned when user cancels\r\n                    // and when no permission was given on the OS level.\r\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\r\n\r\n                    return;\r\n                }\r\n\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        navigator.mediaDevices.getDisplayMedia({ video: true })\r\n            .then(stream => {\r\n                callback({\r\n                    stream,\r\n                    sourceId: stream.id });\r\n            })\r\n            .catch(() => {\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\r\n                    .SCREENSHARING_USER_CANCELED));\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Sets the max frame rate to be used for a desktop track capture.\r\n     *\r\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\r\n     * @returns {void}\r\n     */\r\n    setDesktopSharingFrameRate(maxFps) {\r\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\r\n\r\n        this.options.desktopSharingFrameRate = {\r\n            min: SS_DEFAULT_FRAME_RATE,\r\n            max: maxFps\r\n        };\r\n    }\r\n};\r\n\r\nexport default ScreenObtainer;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport MediaDirection from '../../service/RTC/MediaDirection';\r\nimport browser from '../browser';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nconst SDPUtil = {\r\n    filterSpecialChars(text) {\r\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\r\n        // \"\", etc.) \"contain\" special chars.\r\n        // eslint-disable-next-line no-useless-escape\r\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\r\n    },\r\n    iceparams(mediadesc, sessiondesc) {\r\n        let data = null;\r\n        let pwd, ufrag;\r\n\r\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\r\n                && (pwd\r\n                    = SDPUtil.findLine(\r\n                        mediadesc,\r\n                        'a=ice-pwd:',\r\n                        sessiondesc))) {\r\n            data = {\r\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\r\n                pwd: SDPUtil.parseICEPwd(pwd)\r\n            };\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICEUfrag(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildICEUfrag(frag) {\r\n        return `a=ice-ufrag:${frag}`;\r\n    },\r\n    parseICEPwd(line) {\r\n        return line.substring(10);\r\n    },\r\n    buildICEPwd(pwd) {\r\n        return `a=ice-pwd:${pwd}`;\r\n    },\r\n    parseMID(line) {\r\n        return line.substring(6);\r\n    },\r\n\r\n    /**\r\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\r\n     *\r\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\r\n     * @returns {undefined|string}\r\n     */\r\n    parseMSIDAttribute(ssrcLines) {\r\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\r\n\r\n        if (!msidLine) {\r\n            return undefined;\r\n        }\r\n\r\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\r\n\r\n        return SDPUtil.filterSpecialChars(v);\r\n    },\r\n    parseMLine(line) {\r\n        const data = {};\r\n        const parts = line.substring(2).split(' ');\r\n\r\n        data.media = parts.shift();\r\n        data.port = parts.shift();\r\n        data.proto = parts.shift();\r\n        if (parts[parts.length - 1] === '') { // trailing whitespace\r\n            parts.pop();\r\n        }\r\n        data.fmt = parts;\r\n\r\n        return data;\r\n    },\r\n    buildMLine(mline) {\r\n        return (\r\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\r\n                mline.fmt.join(' ')}`);\r\n    },\r\n    parseRTPMap(line) {\r\n        const data = {};\r\n        let parts = line.substring(9).split(' ');\r\n\r\n        data.id = parts.shift();\r\n        parts = parts[0].split('/');\r\n        data.name = parts.shift();\r\n        data.clockrate = parts.shift();\r\n        data.channels = parts.length ? parts.shift() : '1';\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\r\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\r\n     * @returns [SCTP port number, protocol, streams]\r\n     */\r\n    parseSCTPMap(line) {\r\n        const parts = line.substring(10).split(' ');\r\n        const sctpPort = parts[0];\r\n        const protocol = parts[1];\r\n\r\n        // Stream count is optional\r\n        const streamCount = parts.length > 2 ? parts[2] : null;\r\n\r\n\r\n        return [ sctpPort, protocol, streamCount ];// SCTP port\r\n    },\r\n    buildRTPMap(el) {\r\n        let line\r\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\r\n                el.getAttribute('clockrate')}`;\r\n\r\n        if (el.getAttribute('channels')\r\n            && el.getAttribute('channels') !== '1') {\r\n            line += `/${el.getAttribute('channels')}`;\r\n        }\r\n\r\n        return line;\r\n    },\r\n    parseCrypto(line) {\r\n        const data = {};\r\n        const parts = line.substring(9).split(' ');\r\n\r\n        data.tag = parts.shift();\r\n        data['crypto-suite'] = parts.shift();\r\n        data['key-params'] = parts.shift();\r\n        if (parts.length) {\r\n            data['session-params'] = parts.join(' ');\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseFingerprint(line) { // RFC 4572\r\n        const data = {};\r\n        const parts = line.substring(14).split(' ');\r\n\r\n        data.hash = parts.shift();\r\n        data.fingerprint = parts.shift();\r\n\r\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\r\n        return data;\r\n    },\r\n    parseFmtp(line) {\r\n        const data = [];\r\n        let parts = line.split(' ');\r\n\r\n        parts.shift();\r\n        parts = parts.join(' ').split(';');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            let key = parts[i].split('=')[0];\r\n\r\n            while (key.length && key[0] === ' ') {\r\n                key = key.substring(1);\r\n            }\r\n            const value = parts[i].split('=')[1];\r\n\r\n            if (key && value) {\r\n                data.push({ name: key,\r\n                    value });\r\n            } else if (key) {\r\n                // rfc 4733 (DTMF) style stuff\r\n                data.push({ name: '',\r\n                    value: key });\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICECandidate(line) {\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n        candidate.generation = 0; // default value, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.debug(\r\n                    `parseICECandidate not translating \"${\r\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    buildICECandidate(cand) {\r\n        let line = [\r\n            `a=candidate:${cand.foundation}`,\r\n            cand.component,\r\n            cand.protocol,\r\n            cand.priority,\r\n            cand.ip,\r\n            cand.port,\r\n            'typ',\r\n            cand.type\r\n        ].join(' ');\r\n\r\n        line += ' ';\r\n        switch (cand.type) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.hasOwnAttribute('rel-addr')\r\n                    && cand.hasOwnAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand['rel-addr'];\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand['rel-port'];\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (cand.hasOwnAttribute('tcptype')) {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.tcptype;\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\r\n\r\n        return line;\r\n    },\r\n    parseSSRC(desc) {\r\n        // proprietary mapping of a=ssrc lines\r\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\r\n        // on google docs and parse according to that\r\n        const data = new Map();\r\n        const lines = desc.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\r\n                // FIXME: Use regex to smartly find the ssrc.\r\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\r\n\r\n                if (!data.get(ssrc)) {\r\n                    data.set(ssrc, []);\r\n                }\r\n\r\n                data.get(ssrc).push(lines[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\r\n     *\r\n     * @param {string[]} ssrcLines\r\n     * @returns {string | undefined}\r\n     */\r\n    parseSourceNameLine(ssrcLines) {\r\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\r\n\r\n        // Everything past the \"name:\" part\r\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\r\n    },\r\n    parseRTCPFB(line) {\r\n        const parts = line.substr(10).split(' ');\r\n        const data = {};\r\n\r\n        data.pt = parts.shift();\r\n        data.type = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    parseExtmap(line) {\r\n        const parts = line.substr(9).split(' ');\r\n        const data = {};\r\n\r\n        data.value = parts.shift();\r\n        if (data.value.indexOf('/') === -1) {\r\n            data.direction = 'both';\r\n        } else {\r\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\r\n            data.value = data.value.substr(0, data.value.indexOf('/'));\r\n        }\r\n        data.uri = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    findLine(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                return lines[i];\r\n            }\r\n        }\r\n        if (!sessionpart) {\r\n            return false;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                return lines[j];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    findLines(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n        const needles = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                needles.push(lines[i]);\r\n            }\r\n        }\r\n        if (needles.length || !sessionpart) {\r\n            return needles;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                needles.push(lines[j]);\r\n            }\r\n        }\r\n\r\n        return needles;\r\n    },\r\n    candidateToJingle(line) {\r\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\r\n        // generation 0\r\n        //      <candidate component=... foundation=... generation=... id=...\r\n        // ip=... network=... port=... priority=... protocol=... type=.../>\r\n        if (line.indexOf('candidate:') === 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = `a=${line}`;\r\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\r\n            logger.warn(\r\n                'parseCandidate called with a line that is not a candidate'\r\n                    + ' line');\r\n            logger.warn(line);\r\n\r\n            return null;\r\n        }\r\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = line.substring(0, line.length - 2);\r\n        }\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        if (elems[6] !== 'typ') {\r\n            logger.warn('did not find typ in the right place');\r\n            logger.warn(line);\r\n\r\n            return null;\r\n        }\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n\r\n        candidate.generation = '0'; // default, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    candidateFromJingle(cand) {\r\n        let line = 'a=candidate:';\r\n\r\n        line += cand.getAttribute('foundation');\r\n        line += ' ';\r\n        line += cand.getAttribute('component');\r\n        line += ' ';\r\n\r\n        let protocol = cand.getAttribute('protocol');\r\n\r\n        // use tcp candidates for FF\r\n\r\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\r\n            protocol = 'tcp';\r\n        }\r\n\r\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\r\n        line += ' ';\r\n        line += cand.getAttribute('priority');\r\n        line += ' ';\r\n        line += cand.getAttribute('ip');\r\n        line += ' ';\r\n        line += cand.getAttribute('port');\r\n        line += ' ';\r\n        line += 'typ';\r\n        line += ` ${cand.getAttribute('type')}`;\r\n        line += ' ';\r\n        switch (cand.getAttribute('type')) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.getAttribute('rel-addr')\r\n                    && cand.getAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-addr');\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-port');\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (protocol.toLowerCase() === 'tcp') {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.getAttribute('tcptype');\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.getAttribute('generation') || '0';\r\n\r\n        return `${line}\\r\\n`;\r\n    },\r\n\r\n    /**\r\n     * Parse the 'most' primary video ssrc from the given m line\r\n     * @param {object} mLine object as parsed from transform.parse\r\n     * @return {number} the primary video ssrc from the given m line\r\n     */\r\n    parsePrimaryVideoSsrc(videoMLine) {\r\n        const numSsrcs = videoMLine.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n            .length;\r\n        const numGroups\r\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\r\n\r\n        if (numSsrcs > 1 && numGroups === 0) {\r\n            // Ambiguous, can't figure out the primary\r\n            return;\r\n        }\r\n        let primarySsrc = null;\r\n\r\n        if (numSsrcs === 1) {\r\n            primarySsrc = videoMLine.ssrcs[0].id;\r\n        } else if (numSsrcs === 2) {\r\n            // Can figure it out if there's an FID group\r\n            const fidGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'FID');\r\n\r\n            if (fidGroup) {\r\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\r\n            }\r\n        } else if (numSsrcs >= 3) {\r\n            // Can figure it out if there's a sim group\r\n            const simGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\r\n            }\r\n        }\r\n\r\n        return primarySsrc;\r\n    },\r\n\r\n    /**\r\n     * Generate an ssrc\r\n     * @returns {number} an ssrc\r\n     */\r\n    generateSsrc() {\r\n        return RandomUtil.randomInt(1, 0xffffffff);\r\n    },\r\n\r\n    /**\r\n     * Get an attribute for the given ssrc with the given attributeName\r\n     *  from the given mline\r\n     * @param {object} mLine an mLine object as parsed from transform.parse\r\n     * @param {number} ssrc the ssrc for which an attribute is desired\r\n     * @param {string} attributeName the name of the desired attribute\r\n     * @returns {string} the value corresponding to the given ssrc\r\n     *  and attributeName\r\n     */\r\n    getSsrcAttribute(mLine, ssrc, attributeName) {\r\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\r\n            const ssrcLine = mLine.ssrcs[i];\r\n\r\n            if (ssrcLine.id === ssrc\r\n                && ssrcLine.attribute === attributeName) {\r\n                return ssrcLine.value;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Parses the ssrcs from the group sdp line and\r\n     *  returns them as a list of numbers\r\n     * @param {object} the ssrcGroup object as parsed from\r\n     *  sdp-transform\r\n     * @returns {list<number>} a list of the ssrcs in the group\r\n     *  parsed as numbers\r\n     */\r\n    parseGroupSsrcs(ssrcGroup) {\r\n        return ssrcGroup\r\n            .ssrcs\r\n            .split(' ')\r\n            .map(ssrcStr => parseInt(ssrcStr, 10));\r\n    },\r\n\r\n    /**\r\n     * Get the mline of the given type from the given sdp\r\n     * @param {object} sdp sdp as parsed from transform.parse\r\n     * @param {string} type the type of the desired mline (e.g. \"video\")\r\n     * @returns {object} a media object\r\n     */\r\n    getMedia(sdp, type) {\r\n        return sdp.media.find(m => m.type === type);\r\n    },\r\n\r\n    /**\r\n     * Extracts the ICE username fragment from an SDP string.\r\n     * @param {string} sdp the SDP in raw text format\r\n     */\r\n    getUfrag(sdp) {\r\n        const ufragLines\r\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\r\n\r\n        if (ufragLines.length > 0) {\r\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given codecName as the preferred codec by moving it to the beginning\r\n     * of the payload types list (modifies the given mline in place). All instances\r\n     * of the codec are moved up.\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\r\n     * @param {string} codecName the name of the preferred codec\r\n     */\r\n    preferCodec(mline, codecName) {\r\n        if (!mline || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const matchingPayloadTypes = mline.rtp\r\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\r\n            .map(rtp => rtp.payload);\r\n\r\n        if (matchingPayloadTypes) {\r\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\r\n            // payloads as a number, instead of a string, when there is only one payload.\r\n            const payloadTypes\r\n                = mline.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(p => parseInt(p, 10));\r\n\r\n            for (const pt of matchingPayloadTypes.reverse()) {\r\n                const payloadIndex = payloadTypes.indexOf(pt);\r\n\r\n                payloadTypes.splice(payloadIndex, 1);\r\n                payloadTypes.unshift(pt);\r\n            }\r\n            mline.payloads = payloadTypes.join(' ');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strips the given codec from the given mline. All related RTX payload\r\n     * types are also stripped. If the resulting mline would have no codecs,\r\n     * it's disabled.\r\n     *\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\r\n     * @param {string} codecName the name of the codec which will be stripped.\r\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\r\n     * stripped from the sdp when the passed codecName is H264.\r\n     */\r\n    stripCodec(mLine, codecName, highProfile = false) {\r\n        if (!mLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const h264Pts = [];\r\n        let removePts = [];\r\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\r\n\r\n        for (const rtp of mLine.rtp) {\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                if (stripH264HighCodec) {\r\n                    h264Pts.push(rtp.payload);\r\n                } else {\r\n                    removePts.push(rtp.payload);\r\n                }\r\n            }\r\n        }\r\n\r\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\r\n        if (stripH264HighCodec) {\r\n            removePts = mLine.fmtp\r\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\r\n                .map(item => item.payload);\r\n        }\r\n\r\n        if (removePts.length > 0) {\r\n            // We also need to remove the payload types that are related to RTX\r\n            // for the codecs we want to disable.\r\n            const rtxApts = removePts.map(item => `apt=${item}`);\r\n            const rtxPts = mLine.fmtp.filter(\r\n                item => rtxApts.indexOf(item.config) !== -1);\r\n\r\n            removePts.push(...rtxPts.map(item => item.payload));\r\n\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const allPts = mLine.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(Number);\r\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\r\n\r\n            if (keepPts.length === 0) {\r\n                // There are no other codecs, disable the stream.\r\n                mLine.port = 0;\r\n                mLine.direction = MediaDirection.INACTIVE;\r\n                mLine.payloads = '*';\r\n            } else {\r\n                mLine.payloads = keepPts.join(' ');\r\n            }\r\n\r\n            mLine.rtp = mLine.rtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            mLine.fmtp = mLine.fmtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            if (mLine.rtcpFb) {\r\n                mLine.rtcpFb = mLine.rtcpFb.filter(\r\n                    item => keepPts.indexOf(item.payload) !== -1);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SDPUtil;\r\n","/* global $ */\r\n\r\nimport MediaDirection from '../../service/RTC/MediaDirection';\r\nimport browser from '../browser';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n/**\r\n *\r\n * @param sdp\r\n */\r\nexport default function SDP(sdp) {\r\n    const media = sdp.split('\\r\\nm=');\r\n\r\n    for (let i = 1, length = media.length; i < length; i++) {\r\n        let mediaI = `m=${media[i]}`;\r\n\r\n        if (i !== length - 1) {\r\n            mediaI += '\\r\\n';\r\n        }\r\n        media[i] = mediaI;\r\n    }\r\n    const session = `${media.shift()}\\r\\n`;\r\n\r\n    this.media = media;\r\n    this.raw = session + media.join('');\r\n    this.session = session;\r\n}\r\n\r\n/**\r\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\r\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\r\n * failure. The flag is used in the automated testing.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.failICE = false;\r\n\r\n/**\r\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeTcpCandidates = false;\r\n\r\n/**\r\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeUdpCandidates = false;\r\n\r\n/**\r\n * Returns map of MediaChannel mapped per channel idx.\r\n */\r\nSDP.prototype.getMediaSsrcMap = function() {\r\n    const mediaSSRCs = {};\r\n\r\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\r\n        const mid\r\n            = SDPUtil.parseMID(\r\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\r\n        const media = {\r\n            mediaindex,\r\n            mid,\r\n            ssrcs: {},\r\n            ssrcGroups: []\r\n        };\r\n\r\n        mediaSSRCs[mediaindex] = media;\r\n\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\r\n            const linessrc = line.substring(7).split(' ')[0];\r\n\r\n            // allocate new ChannelSsrc\r\n\r\n            if (!media.ssrcs[linessrc]) {\r\n                media.ssrcs[linessrc] = {\r\n                    ssrc: linessrc,\r\n                    lines: []\r\n                };\r\n            }\r\n            media.ssrcs[linessrc].lines.push(line);\r\n        });\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\r\n            const idx = line.indexOf(' ');\r\n            const semantics = line.substr(0, idx).substr(13);\r\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n            if (ssrcs.length) {\r\n                media.ssrcGroups.push({\r\n                    semantics,\r\n                    ssrcs\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return mediaSSRCs;\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if this SDP contains given SSRC.\r\n * @param ssrc the ssrc to check.\r\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\r\n */\r\nSDP.prototype.containsSSRC = function(ssrc) {\r\n    // FIXME this code is really strange - improve it if you can\r\n    const medias = this.getMediaSsrcMap();\r\n    let result = false;\r\n\r\n    Object.keys(medias).forEach(mediaindex => {\r\n        if (result) {\r\n            return;\r\n        }\r\n        if (medias[mediaindex].ssrcs[ssrc]) {\r\n            result = true;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// add content's to a jingle element\r\nSDP.prototype.toJingle = function(elem, thecreator) {\r\n    // https://xmpp.org/extensions/xep-0338.html\r\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\r\n        const parts = line.split(' ');\r\n        const semantics = parts.shift().substr(8);\r\n\r\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\r\n            semantics });\r\n        for (let j = 0; j < parts.length; j++) {\r\n            elem.c('content', { name: parts[j] }).up();\r\n        }\r\n        elem.up();\r\n    });\r\n\r\n    for (let i = 0; i < this.media.length; i++) {\r\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\r\n\r\n        if (!(mline.media === 'audio'\r\n              || mline.media === 'video'\r\n              || mline.media === 'application')) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        let ssrc;\r\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\r\n\r\n        if (assrcline) {\r\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\r\n        } else {\r\n            ssrc = false;\r\n        }\r\n\r\n        elem.c('content', { creator: thecreator,\r\n            name: mline.media });\r\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\r\n\r\n        if (amidline) {\r\n            // prefer identifier from a=mid if present\r\n            const mid = SDPUtil.parseMID(amidline);\r\n\r\n            elem.attrs({ name: mid });\r\n        }\r\n\r\n        if (mline.media === 'audio' || mline.media === 'video') {\r\n            elem.c('description',\r\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                    media: mline.media });\r\n            if (ssrc) {\r\n                elem.attrs({ ssrc });\r\n            }\r\n            for (let j = 0; j < mline.fmt.length; j++) {\r\n                const rtpmap\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=rtpmap:${mline.fmt[j]}`);\r\n\r\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\r\n\r\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\r\n                // value=bar/>\r\n                const afmtpline\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=fmtp:${mline.fmt[j]}`);\r\n\r\n                if (afmtpline) {\r\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    for (let k = 0; k < fmtpParameters.length; k++) {\r\n                        elem.c('parameter', fmtpParameters[k]).up();\r\n                    }\r\n                }\r\n\r\n                // XEP-0293 -- map a=rtcp-fb\r\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\r\n\r\n                elem.up();\r\n            }\r\n\r\n            if (ssrc) {\r\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\r\n\r\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\r\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\r\n\r\n                    elem.c('source', {\r\n                        ssrc: availableSsrc,\r\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n\r\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (msid) {\r\n                        elem.c('parameter');\r\n                        elem.attrs({ name: 'msid' });\r\n                        elem.attrs({ value: msid });\r\n                        elem.up();\r\n                    }\r\n\r\n                    elem.up();\r\n                }\r\n\r\n                // XEP-0339 handle ssrc-group attributes\r\n                const ssrcGroupLines\r\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\r\n\r\n                ssrcGroupLines.forEach(line => {\r\n                    const idx = line.indexOf(' ');\r\n                    const semantics = line.substr(0, idx).substr(13);\r\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n                    if (ssrcs.length) {\r\n                        elem.c('ssrc-group', { semantics,\r\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\r\n                        elem.up();\r\n                    }\r\n                });\r\n            }\r\n\r\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\r\n\r\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\r\n                // Map a line which looks like \"a=rid:2 send\" to just\r\n                // the rid (\"2\")\r\n                const rids = ridLines\r\n                    .map(ridLine => ridLine.split(':')[1])\r\n                    .map(ridInfo => ridInfo.split(' ')[0]);\r\n\r\n                rids.forEach(rid => {\r\n                    elem.c('source', {\r\n                        rid,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    elem.up();\r\n                });\r\n                const unifiedSimulcast\r\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\r\n\r\n                if (unifiedSimulcast) {\r\n                    elem.c('rid-group', {\r\n                        semantics: 'SIM',\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    rids.forEach(rid => {\r\n                        elem.c('source', { rid }).up();\r\n                    });\r\n                    elem.up();\r\n                }\r\n            }\r\n\r\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\r\n                elem.c('rtcp-mux').up();\r\n            }\r\n\r\n            // XEP-0293 -- map a=rtcp-fb:*\r\n            this.rtcpFbToJingle(i, elem, '*');\r\n\r\n            // XEP-0294\r\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\r\n\r\n            for (let j = 0; j < extmapLines.length; j++) {\r\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\r\n\r\n                elem.c('rtp-hdrext', {\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\r\n                    uri: extmap.uri,\r\n                    id: extmap.value\r\n                });\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (extmap.hasOwnProperty('direction')) {\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    switch (extmap.direction) {\r\n                    case MediaDirection.SENDONLY:\r\n                        elem.attrs({ senders: 'responder' });\r\n                        break;\r\n                    case MediaDirection.RECVONLY:\r\n                        elem.attrs({ senders: 'initiator' });\r\n                        break;\r\n                    case MediaDirection.SENDRECV:\r\n                        elem.attrs({ senders: 'both' });\r\n                        break;\r\n                    case MediaDirection.INACTIVE:\r\n                        elem.attrs({ senders: 'none' });\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // TODO: handle params\r\n                elem.up();\r\n            }\r\n            elem.up(); // end of description\r\n        }\r\n\r\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\r\n        this.transportToJingle(i, elem);\r\n\r\n        const m = this.media[i];\r\n\r\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\r\n            elem.attrs({ senders: 'both' });\r\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\r\n            elem.attrs({ senders: 'initiator' });\r\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\r\n            elem.attrs({ senders: 'responder' });\r\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\r\n            elem.attrs({ senders: 'none' });\r\n        }\r\n\r\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\r\n        // The port is automatically set to 0 when bundle-only is used.\r\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\r\n            // estos hack to reject an m-line\r\n            elem.attrs({ senders: 'rejected' });\r\n        }\r\n        elem.up(); // end of content\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\r\n    elem.c('transport');\r\n\r\n    // XEP-0343 DTLS/SCTP\r\n    const sctpmap\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\r\n\r\n    if (sctpmap) {\r\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs[0], /* SCTP port */\r\n            protocol: sctpAttrs[1] /* protocol */\r\n        });\r\n\r\n        // Optional stream count attribute\r\n        if (sctpAttrs.length > 2) {\r\n            elem.attrs({ streams: sctpAttrs[2] });\r\n        }\r\n        elem.up();\r\n    }\r\n\r\n    // XEP-0320\r\n    const fingerprints\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            'a=fingerprint:',\r\n            this.session);\r\n\r\n    fingerprints.forEach(line => {\r\n        const fingerprint = SDPUtil.parseFingerprint(line);\r\n\r\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\r\n        elem.c('fingerprint').t(fingerprint.fingerprint);\r\n        delete fingerprint.fingerprint;\r\n\r\n        const setupLine\r\n            = SDPUtil.findLine(\r\n                this.media[mediaindex],\r\n                'a=setup:',\r\n                this.session);\r\n\r\n        if (setupLine) {\r\n            fingerprint.setup = setupLine.substr(8);\r\n        }\r\n        elem.attrs(fingerprint);\r\n        elem.up(); // end of fingerprint\r\n    });\r\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\r\n\r\n    if (iceParameters) {\r\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n        elem.attrs(iceParameters);\r\n\r\n        // XEP-0176\r\n        const candidateLines\r\n            = SDPUtil.findLines(\r\n                this.media[mediaindex],\r\n                'a=candidate:',\r\n                this.session);\r\n\r\n        candidateLines.forEach(line => { // add any a=candidate lines\r\n            const candidate = SDPUtil.candidateToJingle(line);\r\n\r\n            if (this.failICE) {\r\n                candidate.ip = '1.1.1.1';\r\n            }\r\n            const protocol\r\n                = candidate && typeof candidate.protocol === 'string'\r\n                    ? candidate.protocol.toLowerCase()\r\n                    : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            }\r\n            elem.c('candidate', candidate).up();\r\n        });\r\n    }\r\n    elem.up(); // end of transport\r\n};\r\n\r\n// XEP-0293\r\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\r\n    const lines\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            `a=rtcp-fb:${payloadtype}`);\r\n\r\n    lines.forEach(line => {\r\n        const feedback = SDPUtil.parseRTCPFB(line);\r\n\r\n        if (feedback.type === 'trr-int') {\r\n            elem.c('rtcp-fb-trr-int', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                value: feedback.params[0]\r\n            });\r\n            elem.up();\r\n        } else {\r\n            elem.c('rtcp-fb', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                type: feedback.type\r\n            });\r\n            if (feedback.params.length > 0) {\r\n                elem.attrs({ 'subtype': feedback.params[0] });\r\n            }\r\n            elem.up();\r\n        }\r\n    });\r\n};\r\n\r\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\r\n    let sdp = '';\r\n    const feedbackElementTrrInt\r\n        = elem.find(\r\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    if (feedbackElementTrrInt.length) {\r\n        sdp += 'a=rtcp-fb:* trr-int ';\r\n        if (feedbackElementTrrInt.attr('value')) {\r\n            sdp += feedbackElementTrrInt.attr('value');\r\n        } else {\r\n            sdp += '0';\r\n        }\r\n        sdp += '\\r\\n';\r\n    }\r\n\r\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    feedbackElements.each((_, fb) => {\r\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\r\n        if (fb.hasAttribute('subtype')) {\r\n            sdp += ` ${fb.getAttribute('subtype')}`;\r\n        }\r\n        sdp += '\\r\\n';\r\n    });\r\n\r\n    return sdp;\r\n};\r\n\r\n// construct an SDP from a jingle stanza\r\nSDP.prototype.fromJingle = function(jingle) {\r\n    const sessionId = Date.now();\r\n\r\n    // Use a unique session id for every TPC.\r\n    this.raw = 'v=0\\r\\n'\r\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\r\n        + 's=-\\r\\n'\r\n        + 't=0 0\\r\\n';\r\n\r\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\r\n    // #section-8\r\n    const groups\r\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\r\n\r\n    if (groups.length) {\r\n        groups.each((idx, group) => {\r\n            const contents\r\n                = $(group)\r\n                    .find('>content')\r\n                    .map((_, content) => content.getAttribute('name'))\r\n                    .get();\r\n\r\n            if (contents.length > 0) {\r\n                this.raw\r\n                    += `a=group:${\r\n                        group.getAttribute('semantics')\r\n                            || group.getAttribute('type')} ${\r\n                        contents.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    this.session = this.raw;\r\n    jingle.find('>content').each((_, content) => {\r\n        const m = this.jingle2media($(content));\r\n\r\n        this.media.push(m);\r\n    });\r\n\r\n    // reconstruct msid-semantic -- apparently not necessary\r\n    /*\r\n     var msid = SDPUtil.parseSSRC(this.raw);\r\n     if (msid.hasOwnProperty('mslabel')) {\r\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\r\n     }\r\n     */\r\n\r\n    this.raw = this.session + this.media.join('');\r\n};\r\n\r\n// translate a jingle content element into an an SDP media part\r\nSDP.prototype.jingle2media = function(content) {\r\n    const desc = content.find('>description');\r\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\r\n    let sdp = '';\r\n    const sctp = transport.find(\r\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\r\n\r\n    const media = { media: desc.attr('media') };\r\n\r\n    media.port = '1';\r\n    if (content.attr('senders') === 'rejected') {\r\n        // estos hack to reject an m-line.\r\n        media.port = '0';\r\n    }\r\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\r\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\r\n    } else {\r\n        media.proto = 'RTP/AVPF';\r\n    }\r\n    if (sctp.length) {\r\n        sdp += `m=application ${media.port} DTLS/SCTP ${\r\n            sctp.attr('number')}\\r\\n`;\r\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\r\n\r\n        const streamCount = sctp.attr('streams');\r\n\r\n        if (streamCount) {\r\n            sdp += ` ${streamCount}\\r\\n`;\r\n        } else {\r\n            sdp += '\\r\\n';\r\n        }\r\n    } else {\r\n        media.fmt\r\n            = desc\r\n                .find('>payload-type')\r\n                .map((_, payloadType) => payloadType.getAttribute('id'))\r\n                .get();\r\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\r\n    }\r\n\r\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n    if (!sctp.length) {\r\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\r\n    }\r\n\r\n    // XEP-0176 ICE parameters\r\n    if (transport.length) {\r\n        if (transport.attr('ufrag')) {\r\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\r\n        }\r\n        if (transport.attr('pwd')) {\r\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\r\n        }\r\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\r\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\r\n            sdp += ` ${$(fingerprint).text()}`;\r\n            sdp += '\\r\\n';\r\n            if (fingerprint.hasAttribute('setup')) {\r\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    // XEP-0176 ICE candidates\r\n    transport.find('>candidate')\r\n        .each((_, candidate) => {\r\n            let protocol = candidate.getAttribute('protocol');\r\n\r\n            protocol\r\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            } else if (this.failICE) {\r\n                candidate.setAttribute('ip', '1.1.1.1');\r\n            }\r\n\r\n            sdp += SDPUtil.candidateFromJingle(candidate);\r\n        });\r\n\r\n    switch (content.attr('senders')) {\r\n    case 'initiator':\r\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\r\n        break;\r\n    case 'responder':\r\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\r\n        break;\r\n    case 'none':\r\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\r\n        break;\r\n    case 'both':\r\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\r\n        break;\r\n    }\r\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\r\n\r\n    // <description><rtcp-mux/></description>\r\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\r\n    // though\r\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\r\n    if (desc.find('>rtcp-mux').length) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n    }\r\n\r\n    desc.find('>payload-type').each((_, payloadType) => {\r\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\r\n        if ($(payloadType).find('>parameter').length) {\r\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\r\n            sdp\r\n                += $(payloadType)\r\n                    .find('>parameter')\r\n                    .map((__, parameter) => {\r\n                        const name = parameter.getAttribute('name');\r\n\r\n                        return (\r\n                            (name ? `${name}=` : '')\r\n                                + parameter.getAttribute('value'));\r\n                    })\r\n                    .get()\r\n                    .join('; ');\r\n            sdp += '\\r\\n';\r\n        }\r\n\r\n        // xep-0293\r\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\r\n    });\r\n\r\n    // xep-0293\r\n    sdp += this.rtcpFbFromJingle(desc, '*');\r\n\r\n    // xep-0294\r\n    desc\r\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\r\n        .each((_, hdrExt) => {\r\n            sdp\r\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\r\n                    hdrExt.getAttribute('uri')}\\r\\n`;\r\n        });\r\n\r\n    // XEP-0339 handle ssrc-group attributes\r\n    desc\r\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, ssrcGroup) => {\r\n            const semantics = ssrcGroup.getAttribute('semantics');\r\n            const ssrcs\r\n                = $(ssrcGroup)\r\n                    .find('>source')\r\n                    .map((__, source) => source.getAttribute('ssrc'))\r\n                    .get();\r\n\r\n            if (ssrcs.length) {\r\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n\r\n    // XEP-0339 handle source attributes\r\n    desc\r\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, source) => {\r\n            const ssrc = source.getAttribute('ssrc');\r\n\r\n            $(source)\r\n                .find('>parameter')\r\n                .each((__, parameter) => {\r\n                    const name = parameter.getAttribute('name');\r\n                    let value = parameter.getAttribute('value');\r\n\r\n                    value = SDPUtil.filterSpecialChars(value);\r\n                    sdp += `a=ssrc:${ssrc} ${name}`;\r\n                    if (value && value.length) {\r\n                        sdp += `:${value}`;\r\n                    }\r\n                    sdp += '\\r\\n';\r\n                });\r\n        });\r\n\r\n    return sdp;\r\n};\r\n","import FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n// this could be useful in Array.prototype.\r\n/**\r\n *\r\n * @param array1\r\n * @param array2\r\n */\r\nfunction arrayEquals(array1, array2) {\r\n    // if the other array is a falsy value, return\r\n    if (!array2) {\r\n        return false;\r\n    }\r\n\r\n    // compare lengths - can save a lot of time\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0, l = array1.length; i < l; i++) {\r\n        // Check if we have nested arrays\r\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\r\n            // recurse into the nested arrays\r\n            if (!array1[i].equals(array2[i])) {\r\n                return false;\r\n            }\r\n        } else if (array1[i] !== array2[i]) {\r\n            // Warning - two different object instances will never be\r\n            // equal: {x:20} != {x:20}\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param mySDP\r\n * @param otherSDP\r\n */\r\nexport default function SDPDiffer(mySDP, otherSDP) {\r\n    this.mySDP = mySDP;\r\n    this.otherSDP = otherSDP;\r\n    if (!mySDP) {\r\n        throw new Error('\"mySDP\" is undefined!');\r\n    } else if (!otherSDP) {\r\n        throw new Error('\"otherSDP\" is undefined!');\r\n    }\r\n}\r\n\r\n/**\r\n * Returns map of MediaChannel that contains media contained in\r\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\r\n */\r\nSDPDiffer.prototype.getNewMedia = function() {\r\n\r\n    const myMedias = this.mySDP.getMediaSsrcMap();\r\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\r\n    const newMedia = {};\r\n\r\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\r\n        const myMedia = myMedias[othersMediaIdx];\r\n        const othersMedia = othersMedias[othersMediaIdx];\r\n\r\n        if (!myMedia && othersMedia) {\r\n            // Add whole channel\r\n            newMedia[othersMediaIdx] = othersMedia;\r\n\r\n            return;\r\n        }\r\n\r\n        // Look for new ssrcs across the channel\r\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\r\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\r\n                // Allocate channel if we've found ssrc that doesn't exist in\r\n                // our channel\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\r\n            } else if (othersMedia.ssrcs[ssrc].lines\r\n                        && myMedia.ssrcs[ssrc].lines) {\r\n                // we want to detect just changes in adding/removing msid\r\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n\r\n                if (myContainMsid !== newContainMsid) {\r\n                    if (!newMedia[othersMediaIdx]) {\r\n                        newMedia[othersMediaIdx] = {\r\n                            mediaindex: othersMedia.mediaindex,\r\n                            mid: othersMedia.mid,\r\n                            ssrcs: {},\r\n                            ssrcGroups: []\r\n                        };\r\n                    }\r\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\r\n                        = othersMedia.ssrcs[ssrc];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Look for new ssrc groups across the channels\r\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\r\n\r\n            // try to match the other ssrc-group with an ssrc-group of ours\r\n            let matched = false;\r\n\r\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\r\n                const mySsrcGroup = myMedia.ssrcGroups[i];\r\n\r\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\r\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\r\n\r\n                    matched = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matched) {\r\n                // Allocate channel if we've found an ssrc-group that doesn't\r\n                // exist in our channel\r\n\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\r\n            }\r\n        });\r\n    });\r\n\r\n    return newMedia;\r\n};\r\n\r\n/**\r\n * TODO: document!\r\n */\r\nSDPDiffer.prototype.toJingle = function(modify) {\r\n    const sdpMediaSsrcs = this.getNewMedia();\r\n\r\n    let modified = false;\r\n\r\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\r\n        modified = true;\r\n        const media = sdpMediaSsrcs[mediaindex];\r\n\r\n        modify.c('content', { name: media.mid });\r\n\r\n        modify.c('description',\r\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                media: media.mid });\r\n\r\n        // FIXME: not completely sure this operates on blocks and / or handles\r\n        // different ssrcs correctly\r\n        // generate sources from lines\r\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\r\n            const mediaSsrc = media.ssrcs[ssrcNum];\r\n            const ssrcLines = mediaSsrc.lines;\r\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\r\n\r\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n            modify.attrs({\r\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\r\n                ssrc: mediaSsrc.ssrc\r\n            });\r\n\r\n            // Only MSID attribute is sent\r\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\r\n\r\n            if (msid) {\r\n                modify.c('parameter');\r\n                modify.attrs({ name: 'msid' });\r\n                modify.attrs({ value: msid });\r\n                modify.up();\r\n            }\r\n\r\n            modify.up(); // end of source\r\n        });\r\n\r\n        // generate source groups from lines\r\n        media.ssrcGroups.forEach(ssrcGroup => {\r\n            if (ssrcGroup.ssrcs.length) {\r\n\r\n                modify.c('ssrc-group', {\r\n                    semantics: ssrcGroup.semantics,\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                });\r\n\r\n                ssrcGroup.ssrcs.forEach(ssrc => {\r\n                    modify.c('source', { ssrc })\r\n                        .up(); // end of source\r\n                });\r\n                modify.up(); // end of ssrc-group\r\n            }\r\n        });\r\n\r\n        modify.up(); // end of description\r\n        modify.up(); // end of content\r\n    });\r\n\r\n    return modified;\r\n};\r\n","/* global __filename */\r\n\r\nimport async from 'async';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A queue for async task execution.\r\n */\r\nexport default class AsyncQueue {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\r\n        this._stopped = false;\r\n    }\r\n\r\n    /**\r\n     * Removes any pending tasks from the queue.\r\n     */\r\n    clear() {\r\n        this._queue.kill();\r\n    }\r\n\r\n    /**\r\n     * Internal task processing implementation which makes things work.\r\n     */\r\n    _processQueueTasks(task, finishedCallback) {\r\n        try {\r\n            task(finishedCallback);\r\n        } catch (error) {\r\n            logger.error(`Task failed: ${error?.stack}`);\r\n            finishedCallback(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The 'task' function will be given a callback it MUST call with either:\r\n     *  1) No arguments if it was successful or\r\n     *  2) An error argument if there was an error\r\n     * If the task wants to process the success or failure of the task, it\r\n     * should pass the {@code callback} to the push function, e.g.:\r\n     * queue.push(task, (err) => {\r\n     *     if (err) {\r\n     *         // error handling\r\n     *     } else {\r\n     *         // success handling\r\n     *     }\r\n     * });\r\n     *\r\n     * @param {function} task - The task to be executed. See the description above.\r\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\r\n     */\r\n    push(task, callback) {\r\n        if (this._stopped) {\r\n            callback && callback(new Error('The queue has been stopped'));\r\n\r\n            return;\r\n        }\r\n        this._queue.push(task, callback);\r\n    }\r\n\r\n    /**\r\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\r\n     * after the queue has been shutdown then the callback will be called with an error.\r\n     */\r\n    shutdown() {\r\n        this._stopped = true;\r\n    }\r\n}\r\n","/**\r\n * The pending Jingle session state which means the session as defined in\r\n * XEP-0166(before 'session-invite/session-accept' took place).\r\n *\r\n * @type {string}\r\n */\r\nexport const PENDING = 'pending';\r\n\r\n/**\r\n * The active Jingle session state as defined in XEP-0166\r\n * (after 'session-invite'/'session-accept').\r\n *\r\n * @type {string}\r\n */\r\nexport const ACTIVE = 'active';\r\n\r\n/**\r\n * The ended Jingle session state as defined in XEP-0166\r\n * (after 'session-terminate').\r\n * @type {string}\r\n */\r\nexport const ENDED = 'ended';\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as JingleSessionState from './JingleSessionState';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * JingleSession provides an API to manage a single Jingle session. We will\r\n * have different implementations depending on the underlying interface used\r\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\r\n */\r\nexport default class JingleSession extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSession</tt>.\r\n     * @param {string} sid the Jingle session identifier\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid the JID of the remote peer\r\n     * @param {XmppConnection} connection the XMPP connection\r\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\r\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\r\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            pcConfig,\r\n            isInitiator) {\r\n        super();\r\n        this.sid = sid;\r\n        this.localJid = localJid;\r\n        this.remoteJid = remoteJid;\r\n        this.connection = connection;\r\n        this.mediaConstraints = mediaConstraints;\r\n        this.pcConfig = pcConfig;\r\n\r\n        /**\r\n         * Indicates whether this instance is an initiator or an answerer of\r\n         * the Jingle session.\r\n         * @type {boolean}\r\n         */\r\n        this.isInitiator = isInitiator;\r\n\r\n        /**\r\n         * Whether to use dripping or not. Dripping is sending trickle\r\n         * candidates not one-by-one.\r\n         */\r\n        this.usedrip = true;\r\n\r\n        /**\r\n         *  When dripping is used, stores ICE candidates which are to be sent.\r\n         */\r\n        this.dripContainer = [];\r\n\r\n        /**\r\n         * The chat room instance associated with the session.\r\n         * @type {ChatRoom}\r\n         */\r\n        this.room = null;\r\n\r\n        /**\r\n         * Jingle session state - uninitialized until {@link initialize} is\r\n         * called @type {JingleSessionState}\r\n         */\r\n        this.state = null;\r\n\r\n        /**\r\n         * The RTC service instance\r\n         * @type {RTC}\r\n         */\r\n        this.rtc = null;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's initiator.\r\n     * @return {string}\r\n     */\r\n    get initiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's responder.\r\n     * @return {string}\r\n     */\r\n    get responderJid() {\r\n        return this.isInitiator ? this.remoteJid : this.localJid;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Prepares this object to initiate a session.\r\n     * @param {ChatRoom} room the chat room for the conference associated with\r\n     * this session\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {object} options - the options, see implementing class's\r\n     * {@link #doInitialize} description for more details.\r\n     */\r\n    initialize(room, rtc, options) {\r\n        if (this.state !== null) {\r\n            const errmsg\r\n                = `attempt to initiate on session ${this.sid}\r\n                   in state ${this.state}`;\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.room = room;\r\n        this.rtc = rtc;\r\n        this.state = JingleSessionState.PENDING;\r\n        this.doInitialize(options);\r\n    }\r\n\r\n    /**\r\n     * The implementing class finishes initialization here. Called at the end of\r\n     * {@link initialize}.\r\n     * @param {Object} options - The options specific to the implementing class.\r\n     * @protected\r\n     */\r\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Adds the ICE candidates found in the 'contents' array as remote\r\n     * candidates?\r\n     * Note: currently only used on transport-info\r\n     *\r\n     * @param contents\r\n     */\r\n    addIceCandidates(contents) {}\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Returns current state of this <tt>JingleSession</tt> instance.\r\n     * @returns {JingleSessionState} the current state of this session instance.\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Handles an 'add-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    addSources(contents) {}\r\n\r\n    /**\r\n     * Handles a 'remove-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    removeSources(contents) {}\r\n\r\n    /**\r\n     * Terminates this Jingle session by sending session-terminate\r\n     * @param success a callback called once the 'session-terminate' packet has\r\n     * been acknowledged with RESULT.\r\n     * @param failure a callback called when either timeout occurs or ERROR\r\n     * response is received.\r\n     * @param {Object} options\r\n     * @param {string} [options.reason] XMPP Jingle error condition\r\n     * @param {string} [options.reasonDescription] some meaningful error message\r\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\r\n     * terminated.\r\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\r\n     * sending session-terminate. It may not make sense to send it if the XMPP\r\n     * connection has been closed already or if the remote peer has disconnected\r\n     */\r\n    terminate(success, failure, options) {}\r\n\r\n    /**\r\n     * Handles an offer from the remote peer (prepares to accept a session).\r\n     * @param jingle the 'jingle' XML element.\r\n     * @param success callback called when we the incoming session has been\r\n     * accepted\r\n     * @param failure callback called when we fail for any reason, will supply\r\n     * error object with details(which is meant more to be printed to the logger\r\n     * than analysed in the code, as the error is unrecoverable anyway)\r\n     */\r\n    acceptOffer(jingle, success, failure) {}\r\n\r\n    /**\r\n     * Returns the JID of the initiator of the jingle session.\r\n     */\r\n    _getInitiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n}\r\n","export default {\r\n    /**\r\n     * Event triggered when the remote party signals it's receive video max frame height.\r\n     */\r\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\r\n};\r\n","/**\r\n * Event triggered when participant's muted status changes.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new muted state\r\n */\r\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\r\n\r\n/**\r\n * Event triggered when participant's video type changes.\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n */\r\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\r\n","\r\nimport Listenable from '../../modules/util/Listenable';\r\n\r\n/**\r\n * An object that carries the info about specific media type advertised by\r\n * participant in the signaling channel.\r\n * @typedef {Object} PeerMediaInfo\r\n * @property {boolean} muted indicates if the media is currently muted\r\n * @property {VideoType|undefined} videoType the type of the video if applicable\r\n */\r\n\r\n/**\r\n * Interface used to expose the information carried over the signaling channel\r\n * which is not available to the RTC module in the media SDP.\r\n *\r\n * @interface SignalingLayer\r\n */\r\nexport default class SignalingLayer extends Listenable {\r\n\r\n    /**\r\n     * Obtains the endpoint ID for given SSRC.\r\n     * @param {number} ssrc the SSRC number.\r\n     * @return {string|null} the endpoint ID for given media SSRC.\r\n     */\r\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given MUC JID.\r\n     * @param {string} owner the MUC jid of the participant for whom\r\n     * {@link PeerMediaInfo} will be obtained.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available for given\r\n     * JID or if the media type given is invalid.\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\r\n * the data from the MUC presence.\r\n */\r\nexport default class SignalingLayerImpl extends SignalingLayer {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * A map that stores SSRCs of remote streams. And is used only locally\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to jid\r\n         */\r\n        this.ssrcOwners = new Map();\r\n\r\n        /**\r\n         *\r\n         * @type {ChatRoom|null}\r\n         */\r\n        this.chatRoom = null;\r\n    }\r\n\r\n    /**\r\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\r\n     * @param {ChatRoom} room\r\n     */\r\n    setChatRoom(room) {\r\n        const oldChatRoom = this.chatRoom;\r\n\r\n        this.chatRoom = room;\r\n        if (oldChatRoom) {\r\n            oldChatRoom.removePresenceListener(\r\n                'audiomuted', this._audioMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videomuted', this._videoMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videoType', this._videoTypeHandler);\r\n        }\r\n        if (room) {\r\n            // SignalingEvents\r\n            this._audioMuteHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_MUTED_CHANGED,\r\n                    from, MediaType.AUDIO, node.value === 'true');\r\n            };\r\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n            this._videoMuteHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_MUTED_CHANGED,\r\n                    from, MediaType.VIDEO, node.value === 'true');\r\n            };\r\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n            this._videoTypeHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                    from, node.value);\r\n            };\r\n            room.addPresenceListener('videoType', this._videoTypeHandler);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) {\r\n        if (this.chatRoom) {\r\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\r\n        }\r\n        logger.error('Requested peer media info, before room was set');\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getSSRCOwner(ssrc) {\r\n        return this.ssrcOwners.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Set an SSRC owner.\r\n     * @param {number} ssrc an SSRC to be owned\r\n     * @param {string} endpointId owner's ID (MUC nickname)\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setSSRCOwner(ssrc, endpointId) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n        this.ssrcOwners.set(ssrc, endpointId);\r\n    }\r\n}\r\n","/* global __filename, $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport MediaDirection from '../../service/RTC/MediaDirection';\r\nimport {\r\n    ICE_DURATION,\r\n    ICE_STATE_CHANGED\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\r\nimport SDP from '../sdp/SDP';\r\nimport SDPDiffer from '../sdp/SDPDiffer';\r\nimport SDPUtil from '../sdp/SDPUtil';\r\nimport Statistics from '../statistics/statistics';\r\nimport AsyncQueue from '../util/AsyncQueue';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport { integerHash } from '../util/StringUtils';\r\n\r\nimport browser from './../browser';\r\nimport JingleSession from './JingleSession';\r\nimport * as JingleSessionState from './JingleSessionState';\r\nimport MediaSessionEvents from './MediaSessionEvents';\r\nimport SignalingLayerImpl from './SignalingLayerImpl';\r\nimport XmppConnection from './XmppConnection';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Constant tells how long we're going to wait for IQ response, before timeout\r\n * error is  triggered.\r\n * @type {number}\r\n */\r\nconst IQ_TIMEOUT = 10000;\r\n\r\n/*\r\n * The default number of samples (per stat) to keep when webrtc stats gathering\r\n * is enabled in TraceablePeerConnection.\r\n */\r\nconst DEFAULT_MAX_STATS = 300;\r\n\r\n/**\r\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\r\n * @type {number} timeout in ms.\r\n */\r\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\r\n\r\n/**\r\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\r\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\r\n * endpoint/participant.\r\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\r\n */\r\nfunction getEndpointId(jidOrEndpointId) {\r\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\r\n}\r\n\r\n/**\r\n * @typedef {Object} JingleSessionPCOptions\r\n * @property {Object} abTesting - A/B testing related options (ask George).\r\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\r\n * video test ?(ask George).\r\n * @property {boolean} disableH264 - Described in the config.js[1].\r\n * @property {boolean} disableRtx - Described in the config.js[1].\r\n * @property {boolean} disableSimulcast - Described in the config.js[1].\r\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\r\n * on the PeerConnection.\r\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\r\n * @property {boolean} failICE - it's an option used in the tests. Set to\r\n * <tt>true</tt> to block any real candidates and make the ICE fail.\r\n * @property {boolean} gatherStats - Described in the config.js[1].\r\n * @property {object} p2p - Peer to peer related options (FIXME those could be\r\n * fetched from config.p2p on the upper level).\r\n * @property {boolean} preferH264 - Described in the config.js[1].\r\n * @property {Object} testing - Testing and/or experimental options.\r\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\r\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\r\n *\r\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n */\r\n/**\r\n *\r\n */\r\nexport default class JingleSessionPC extends JingleSession {\r\n    /**\r\n     * Parses 'senders' attribute of the video content.\r\n     * @param {jQuery} jingleContents\r\n     * @return {string|null} one of the values of content \"senders\" attribute\r\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\r\n     * invalid then <tt>null</tt> will be returned.\r\n     * @private\r\n     */\r\n    static parseVideoSenders(jingleContents) {\r\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\r\n\r\n        if (videoContents.length) {\r\n            const senders = videoContents[0].getAttribute('senders');\r\n\r\n            if (senders === 'both'\r\n                || senders === 'initiator'\r\n                || senders === 'responder'\r\n                || senders === 'none') {\r\n                return senders;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the video max frame height value out of the 'content-modify' IQ.\r\n     *\r\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\r\n     * @returns {Number|null}\r\n     */\r\n    static parseMaxFrameHeight(jingleContents) {\r\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\r\n\r\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt>\r\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid remote peer JID\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\r\n     * by the WebRTC standard\r\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\r\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\r\n     * peer connection or <tt>false</tt> if it's a JVB connection.\r\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\r\n     * @constructor\r\n     *\r\n     * @implements {SignalingLayer}\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            pcConfig,\r\n            isP2P,\r\n            isInitiator) {\r\n        super(\r\n            sid,\r\n            localJid,\r\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\r\n\r\n        /**\r\n         * The bridge session's identifier. One Jingle session can during\r\n         * it's lifetime participate in multiple bridge sessions managed by\r\n         * Jicofo. A new bridge session is started whenever Jicofo sends\r\n         * 'session-initiate' or 'transport-replace'.\r\n         *\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._bridgeSessionId = null;\r\n\r\n        /**\r\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedOldLocalSdp = undefined;\r\n\r\n        /**\r\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * ICE enters 'checking' state.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._iceCheckingStartedTimestamp = null;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * first ICE candidate is spawned by the peerconnection to mark when\r\n         * ICE gathering started. That's, because ICE gathering state changed\r\n         * events are not supported by most of the browsers, so we try something\r\n         * that will work everywhere. It may not be as accurate, but given that\r\n         * 'host' candidate usually comes first, the delay should be minimal.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._gatheringStartedTimestamp = null;\r\n\r\n        /**\r\n         * Local preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.localRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * Indicates whether or not this session is willing to send/receive\r\n         * video media. When set to <tt>false</tt> the underlying peer\r\n         * connection will disable local video transfer and the remote peer will\r\n         * be will be asked to stop sending video via 'content-modify' IQ\r\n         * (the senders attribute of video contents will be adjusted\r\n         * accordingly). Note that this notification is sent only in P2P\r\n         * session, because Jicofo does not support it yet. Obviously when\r\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\r\n         * notification will be sent to resume video transfer on the remote\r\n         * side.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._localVideoActive = true;\r\n\r\n        /**\r\n         * Indicates whether or not the remote peer has video transfer active.\r\n         * When set to <tt>true</tt> it means that remote peer is neither\r\n         * sending nor willing to receive video. In such case we'll ask\r\n         * our peerconnection to stop sending video by calling\r\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\r\n         * <tt>false</tt>.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._remoteVideoActive = true;\r\n\r\n        /**\r\n         * Marks that ICE gathering duration has been reported already. That\r\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\r\n         * conference migration/ICE restart).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._gatheringReported = false;\r\n\r\n        this.lasticecandidate = false;\r\n        this.closed = false;\r\n\r\n        /**\r\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\r\n         * a peer to peer type of session.\r\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\r\n         * session or <tt>false</tt> if it's a JVB session\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * Remote preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.remoteRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The signaling layer implementation.\r\n         * @type {SignalingLayerImpl}\r\n         */\r\n        this.signalingLayer = new SignalingLayerImpl();\r\n\r\n        /**\r\n         * The queue used to serialize operations done on the peerconnection.\r\n         *\r\n         * @type {AsyncQueue}\r\n         */\r\n        this.modificationQueue = new AsyncQueue();\r\n\r\n        /**\r\n         * Flag used to guarantee that the connection established event is\r\n         * triggered just once.\r\n         * @type {boolean}\r\n         */\r\n        this.wasConnected = false;\r\n\r\n        /**\r\n         * Keeps track of how long (in ms) it took from ICE start to ICE\r\n         * connect.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.establishmentDuration = undefined;\r\n\r\n        this._xmppListeners = [];\r\n        this._xmppListeners.push(\r\n            connection.addEventListener(\r\n                XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                this.onXmppStatusChanged.bind(this))\r\n        );\r\n\r\n        this._removeSenderVideoConstraintsChangeListener = undefined;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Checks whether or not this session instance is still operational.\r\n     * @private\r\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\r\n     */\r\n    _assertNotEnded() {\r\n        return this.state !== JingleSessionState.ENDED;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @param {JingleSessionPCOptions} options  - a set of config options.\r\n     */\r\n    doInitialize(options) {\r\n        this.failICE = Boolean(options.failICE);\r\n        this.lasticecandidate = false;\r\n        this.options = options;\r\n\r\n        /**\r\n         * {@code true} if reconnect is in progress.\r\n         * @type {boolean}\r\n         */\r\n        this.isReconnect = false;\r\n\r\n        /**\r\n         * Set to {@code true} if the connection was ever stable\r\n         * @type {boolean}\r\n         */\r\n        this.wasstable = false;\r\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\r\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\r\n\r\n        const pcOptions = { disableRtx: options.disableRtx };\r\n\r\n        if (options.gatherStats) {\r\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\r\n        }\r\n        pcOptions.capScreenshareBitrate = false;\r\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\r\n        pcOptions.videoQuality = options.videoQuality;\r\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\r\n        pcOptions.audioQuality = options.audioQuality;\r\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\r\n            = browser.supportsUnifiedPlan()\r\n                && (browser.isFirefox()\r\n                    || browser.isWebKitBased()\r\n                    || (browser.isChromiumBased()\r\n\r\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\r\n                        && this.isP2P\r\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\r\n                        : options.enableUnifiedOnChrome ?? true));\r\n\r\n        if (this.isP2P) {\r\n            // simulcast needs to be disabled for P2P (121) calls\r\n            pcOptions.disableSimulcast = true;\r\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\r\n\r\n            if (typeof abtestSuspendVideo !== 'undefined') {\r\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\r\n            }\r\n        } else {\r\n            // H264 does not support simulcast, so it needs to be disabled.\r\n            pcOptions.disableSimulcast\r\n                = options.disableSimulcast\r\n                    || (options.preferH264 && !options.disableH264)\r\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\r\n\r\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\r\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\r\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\r\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\r\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\r\n\r\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\r\n            // send to the analytics backend.\r\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\r\n        }\r\n\r\n        if (options.startSilent) {\r\n            pcOptions.startSilent = true;\r\n        }\r\n\r\n        this.peerconnection\r\n            = this.rtc.createPeerConnection(\r\n                    this.signalingLayer,\r\n                    this.pcConfig,\r\n                    this.isP2P,\r\n                    pcOptions);\r\n\r\n        this.peerconnection.onicecandidate = ev => {\r\n            if (!ev) {\r\n                // There was an incomplete check for ev before which left\r\n                // the last line of the function unprotected from a potential\r\n                // throw of an exception. Consequently, it may be argued that\r\n                // the check is unnecessary. Anyway, I'm leaving it and making\r\n                // the check complete.\r\n                return;\r\n            }\r\n\r\n            // XXX this is broken, candidate is not parsed.\r\n            const candidate = ev.candidate;\r\n            const now = window.performance.now();\r\n\r\n            if (candidate) {\r\n                if (this._gatheringStartedTimestamp === null) {\r\n                    this._gatheringStartedTimestamp = now;\r\n                }\r\n\r\n                // Discard candidates of disabled protocols.\r\n                let protocol = candidate.protocol;\r\n\r\n                if (typeof protocol === 'string') {\r\n                    protocol = protocol.toLowerCase();\r\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\r\n                        if (this.webrtcIceTcpDisable) {\r\n                            return;\r\n                        }\r\n                    } else if (protocol === 'udp') {\r\n                        if (this.webrtcIceUdpDisable) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (!this._gatheringReported) {\r\n                // End of gathering\r\n                Statistics.sendAnalytics(\r\n                    ICE_DURATION,\r\n                    {\r\n                        phase: 'gathering',\r\n                        value: now - this._gatheringStartedTimestamp,\r\n                        p2p: this.isP2P,\r\n                        initiator: this.isInitiator\r\n                    });\r\n                this._gatheringReported = true;\r\n            }\r\n            this.sendIceCandidate(candidate);\r\n        };\r\n\r\n        // Note there is a change in the spec about closed:\r\n        // This value moved into the RTCPeerConnectionState enum in\r\n        // the May 13, 2016 draft of the specification, as it reflects the state\r\n        // of the RTCPeerConnection, not the signaling connection. You now\r\n        // detect a closed connection by checking for connectionState to be\r\n        // \"closed\" instead.\r\n        // I suppose at some point this will be moved to onconnectionstatechange\r\n        this.peerconnection.onsignalingstatechange = () => {\r\n            if (this.peerconnection.signalingState === 'stable') {\r\n                this.wasstable = true;\r\n            } else if (this.peerconnection.signalingState === 'closed'\r\n                || this.peerconnection.connectionState === 'closed') {\r\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The oniceconnectionstatechange event handler contains the code to\r\n         * execute when the iceconnectionstatechange event, of type Event,\r\n         * is received by this RTCPeerConnection. Such an event is sent when\r\n         * the value of RTCPeerConnection.iceConnectionState changes.\r\n         */\r\n        this.peerconnection.oniceconnectionstatechange = () => {\r\n            const now = window.performance.now();\r\n            let isStable = false;\r\n\r\n            if (!this.isP2P) {\r\n                this.room.connectionTimes[\r\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\r\n                    = now;\r\n            }\r\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\r\n\r\n            Statistics.sendAnalytics(\r\n                ICE_STATE_CHANGED,\r\n                {\r\n                    p2p: this.isP2P,\r\n                    state: this.peerconnection.iceConnectionState,\r\n                    'signaling_state': this.peerconnection.signalingState,\r\n                    reconnect: this.isReconnect,\r\n                    value: now\r\n                });\r\n\r\n            this.room.eventEmitter.emit(\r\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n                this,\r\n                this.peerconnection.iceConnectionState);\r\n            switch (this.peerconnection.iceConnectionState) {\r\n            case 'checking':\r\n                this._iceCheckingStartedTimestamp = now;\r\n                break;\r\n            case 'connected':\r\n                // Informs interested parties that the connection has been restored. This includes the case when\r\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\r\n                if (this.peerconnection.signalingState === 'stable') {\r\n                    isStable = true;\r\n                    const usesTerminateForRestart = !this.options.enableIceRestart\r\n                        && this.room.supportsRestartByTerminate();\r\n\r\n                    if (this.isReconnect || usesTerminateForRestart) {\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.CONNECTION_RESTORED, this);\r\n                    }\r\n                }\r\n\r\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\r\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\r\n                // for 'completed' is handled by the client. This prevents the client from firing a\r\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\r\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\r\n                // the endpoints.\r\n                // TODO - file a chromium bug and add the information here.\r\n                if (!this.wasConnected\r\n                    && (this.wasstable\r\n                        || isStable\r\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'checking',\r\n                            value: now - this._iceCheckingStartedTimestamp,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    // Switch between ICE gathering and ICE checking whichever\r\n                    // started first (scenarios are different for initiator\r\n                    // vs responder)\r\n                    const iceStarted\r\n                        = Math.min(\r\n                            this._iceCheckingStartedTimestamp,\r\n                            this._gatheringStartedTimestamp);\r\n\r\n                    this.establishmentDuration = now - iceStarted;\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'establishment',\r\n                            value: this.establishmentDuration,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    this.wasConnected = true;\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\r\n                }\r\n                this.isReconnect = false;\r\n                break;\r\n            case 'disconnected':\r\n                this.isReconnect = true;\r\n\r\n                // Informs interested parties that the connection has been\r\n                // interrupted.\r\n                if (this.wasstable) {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\r\n                }\r\n                break;\r\n            case 'failed':\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                break;\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * The connection state event is fired whenever the aggregate of underlying\r\n         * transports change their state.\r\n         */\r\n        this.peerconnection.onconnectionstatechange = () => {\r\n            const icestate = this.peerconnection.iceConnectionState;\r\n\r\n            switch (this.peerconnection.connectionState) {\r\n            case 'failed':\r\n                // Since version 76 Chrome no longer switches ICE connection\r\n                // state to failed (see\r\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\r\n                // for details) we use this workaround to recover from lost connections\r\n                if (icestate === 'disconnected') {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                }\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The negotiationneeded event is fired whenever we shake the media on the\r\n         * RTCPeerConnection object.\r\n         */\r\n        this.peerconnection.onnegotiationneeded = () => {\r\n            const state = this.peerconnection.signalingState;\r\n            const remoteDescription = this.peerconnection.remoteDescription;\r\n\r\n            if (this.usesUnifiedPlan && state === 'stable'\r\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\r\n                logger.debug(`${this} onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\r\n                const workFunction = finishedCallback => {\r\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    this._renegotiate()\r\n                        .then(() => {\r\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\r\n                            finishedCallback();\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                };\r\n\r\n                this.modificationQueue.push(\r\n                    workFunction,\r\n                    error => {\r\n                        if (error) {\r\n                            logger.error(`${this} onnegotiationneeded error`, error);\r\n                        } else {\r\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        // The signaling layer will bind it's listeners at this point\r\n        this.signalingLayer.setChatRoom(this.room);\r\n    }\r\n\r\n    /**\r\n     * Remote preference for receive video max frame height.\r\n     *\r\n     * @returns {Number|undefined}\r\n     */\r\n    getRemoteRecvMaxFrameHeight() {\r\n        if (this.isP2P) {\r\n            return this.remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Sends given candidate in Jingle 'transport-info' message.\r\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\r\n     * @private\r\n     */\r\n    sendIceCandidate(candidate) {\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\r\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\r\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\r\n\r\n            if (!(ice && jcand)) {\r\n                const errorMesssage = 'failed to get ice && jcand';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\r\n                logger.error(errorMesssage);\r\n\r\n                return;\r\n            }\r\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n\r\n            if (this.usedrip) {\r\n                if (this.dripContainer.length === 0) {\r\n                    setTimeout(() => {\r\n                        if (this.dripContainer.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.sendIceCandidates(this.dripContainer);\r\n                        this.dripContainer = [];\r\n                    }, ICE_CAND_GATHERING_TIMEOUT);\r\n                }\r\n                this.dripContainer.push(candidate);\r\n            } else {\r\n                this.sendIceCandidates([ candidate ]);\r\n            }\r\n        } else {\r\n            logger.log(`${this} sendIceCandidate: last candidate`);\r\n\r\n            // FIXME: remember to re-think in ICE-restart\r\n            this.lasticecandidate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends given candidates in Jingle 'transport-info' message.\r\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\r\n     * candidate instances\r\n     * @private\r\n     */\r\n    sendIceCandidates(candidates) {\r\n        if (!this._assertNotEnded('sendIceCandidates')) {\r\n\r\n            return;\r\n        }\r\n\r\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\r\n        const cand = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid });\r\n\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\r\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\r\n            const mline\r\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\r\n\r\n            if (cands.length > 0) {\r\n                const ice\r\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\r\n\r\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n                cand.c('content', {\r\n                    creator: this.initiatorJid === this.localJid\r\n                        ? 'initiator' : 'responder',\r\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\r\n                }).c('transport', ice);\r\n                for (let i = 0; i < cands.length; i++) {\r\n                    const candidate\r\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\r\n\r\n                    // Mangle ICE candidate if 'failICE' test option is enabled\r\n\r\n                    if (this.failICE) {\r\n                        candidate.ip = '1.1.1.1';\r\n                    }\r\n                    cand.c('candidate', candidate).up();\r\n                }\r\n\r\n                // add fingerprint\r\n                const fingerprintLine\r\n                    = SDPUtil.findLine(\r\n                        localSDP.media[mid],\r\n                        'a=fingerprint:', localSDP.session);\r\n\r\n                if (fingerprintLine) {\r\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\r\n\r\n                    tmp.required = true;\r\n                    cand.c(\r\n                        'fingerprint',\r\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\r\n                        .t(tmp.fingerprint);\r\n                    delete tmp.fingerprint;\r\n                    cand.attrs(tmp);\r\n                    cand.up();\r\n                }\r\n                cand.up(); // transport\r\n                cand.up(); // content\r\n            }\r\n        }\r\n\r\n        // might merge last-candidate notification into this, but it is called\r\n        // a lot later. See webrtc issue #2340\r\n        // logger.log('was this the last candidate', this.lasticecandidate);\r\n        this.connection.sendIQ(\r\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\r\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\r\n     * that the ICE connection has entered the failed state. It can then\r\n     * choose to re-create JVB channels and send 'transport-replace' to\r\n     * retry the connection.\r\n     */\r\n    sendIceFailedNotification() {\r\n        const sessionInfo\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid })\r\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\r\n            .t('failed')\r\n            .up();\r\n\r\n        this._bridgeSessionId\r\n            && sessionInfo.c(\r\n                'bridge-session', {\r\n                    xmlns: 'http://jitsi.org/protocol/focus',\r\n                    id: this._bridgeSessionId\r\n                });\r\n\r\n        this.connection.sendIQ2(\r\n            sessionInfo, {\r\n                /*\r\n                 * This message will be often sent when there are connectivity\r\n                 * issues, so make it slightly longer than Prosody's default BOSH\r\n                 * inactivity timeout of 60 seconds.\r\n                 */\r\n                timeout: 65\r\n            })\r\n            .catch(this.newJingleErrorHandler(sessionInfo));\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    addIceCandidates(elem) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\r\n\r\n            return;\r\n        }\r\n\r\n        const iceCandidates = [];\r\n\r\n        elem.find('>content>transport>candidate')\r\n            .each((idx, candidate) => {\r\n                let line = SDPUtil.candidateFromJingle(candidate);\r\n\r\n                line = line.replace('\\r\\n', '').replace('a=', '');\r\n\r\n                // FIXME this code does not care to handle\r\n                // non-bundle transport\r\n                const rtcCandidate = new RTCIceCandidate({\r\n                    sdpMLineIndex: 0,\r\n\r\n                    // FF comes up with more complex names like audio-23423,\r\n                    // Given that it works on both Chrome and FF without\r\n                    // providing it, let's leave it like this for the time\r\n                    // being...\r\n                    // sdpMid: 'audio',\r\n                    sdpMid: '',\r\n                    candidate: line\r\n                });\r\n\r\n                iceCandidates.push(rtcCandidate);\r\n            });\r\n\r\n        if (!iceCandidates.length) {\r\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\r\n\r\n            return;\r\n        }\r\n\r\n        // We want to have this task queued, so that we know it is executed,\r\n        // after the initial sRD/sLD offer/answer cycle was done (based on\r\n        // the assumption that candidates are spawned after the offer/answer\r\n        // and XMPP preserves order).\r\n        const workFunction = finishedCallback => {\r\n            for (const iceCandidate of iceCandidates) {\r\n                this.peerconnection.addIceCandidate(iceCandidate)\r\n                    .then(\r\n                        () => logger.debug(`${this} addIceCandidate ok!`),\r\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\r\n            }\r\n\r\n            finishedCallback();\r\n            logger.debug(`${this} ICE candidates task finished`);\r\n        };\r\n\r\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param contents\r\n     */\r\n    readSsrcInfo(contents) {\r\n        const ssrcs\r\n            = $(contents).find(\r\n                '>description>'\r\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n        ssrcs.each((i, ssrcElement) => {\r\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\r\n\r\n            if (this.isP2P) {\r\n                // In P2P all SSRCs are owner by the remote peer\r\n                this.signalingLayer.setSSRCOwner(\r\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\r\n            } else {\r\n                $(ssrcElement)\r\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\r\n                    .each((i3, ssrcInfoElement) => {\r\n                        const owner = ssrcInfoElement.getAttribute('owner');\r\n\r\n                        if (owner && owner.length) {\r\n                            if (isNaN(ssrc) || ssrc < 0) {\r\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\r\n                            } else {\r\n                                this.signalingLayer.setSSRCOwner(\r\n                                    ssrc,\r\n                                    getEndpointId(owner));\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n     * the recvonly video stream.\r\n     * @deprecated\r\n     */\r\n    generateRecvonlySsrc() {\r\n        if (this.peerconnection) {\r\n            this.peerconnection.generateRecvonlySsrc();\r\n        } else {\r\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the video codec configured as the preferred codec on the peerconnection.\r\n     */\r\n    getConfiguredVideoCodec() {\r\n        return this.peerconnection.getConfiguredVideoCodec();\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Accepts incoming Jingle 'session-initiate' and should send\r\n     * 'session-accept' in result.\r\n     * @param jingleOffer jQuery selector pointing to the jingle element of\r\n     * the offer IQ\r\n     * @param success callback called when we accept incoming session\r\n     * successfully and receive RESULT packet to 'session-accept' sent.\r\n     * @param failure function(error) called if for any reason we fail to accept\r\n     * the incoming offer. 'error' argument can be used to log some details\r\n     * about the error.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes. We allow the localTracks to optionally be passed in so that\r\n     * the addition of the local tracks and the processing of the initial offer\r\n     * can all be done atomically. We want to make sure that any other\r\n     * operations which originate in the XMPP Jingle messages related with\r\n     * this session to be executed with an assumption that the initial\r\n     * offer/answer cycle has been executed already.\r\n     */\r\n    acceptOffer(jingleOffer, success, failure, localTracks) {\r\n        this.setOfferAnswerCycle(\r\n            jingleOffer,\r\n            () => {\r\n                // FIXME we may not care about RESULT packet for session-accept\r\n                // then we should either call 'success' here immediately or\r\n                // modify sendSessionAccept method to do that\r\n                this.sendSessionAccept(success, failure);\r\n            },\r\n            failure,\r\n            localTracks);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\r\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\r\n     * added, before the offer/answer cycle executes (for the local track\r\n     * addition to be an atomic operation together with the offer/answer).\r\n     */\r\n    invite(localTracks = []) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to invite from the responder session');\r\n        }\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const localTrack of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\r\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\r\n                .then(() => {\r\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\r\n                    // the transformation chain.\r\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        logger.debug(`${this} Queued invite task`);\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} invite error`, error);\r\n                } else {\r\n                    logger.debug(`${this} invite executed - OK`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends 'session-initiate' to the remote peer.\r\n     *\r\n     * NOTE this method is synchronous and we're not waiting for the RESULT\r\n     * response which would delay the startup process.\r\n     *\r\n     * @param {string} offerSdp  - The local session description which will be\r\n     * used to generate an offer.\r\n     * @private\r\n     */\r\n    sendSessionInitiate(offerSdp) {\r\n        let init = $iq({\r\n            to: this.remoteJid,\r\n            type: 'set'\r\n        }).c('jingle', {\r\n            xmlns: 'urn:xmpp:jingle:1',\r\n            action: 'session-initiate',\r\n            initiator: this.initiatorJid,\r\n            sid: this.sid\r\n        });\r\n\r\n        new SDP(offerSdp).toJingle(\r\n            init,\r\n            this.isInitiator ? 'initiator' : 'responder');\r\n        init = init.tree();\r\n        logger.debug(`${this} Session-initiate: `, init);\r\n        this.connection.sendIQ(init,\r\n            () => {\r\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\r\n            },\r\n            error => {\r\n                logger.error(`${this} \"session-initiate\" error`, error);\r\n            },\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the answer received from the remote peer.\r\n     * @param jingleAnswer\r\n     */\r\n    setAnswer(jingleAnswer) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to set an answer on the responder session');\r\n        }\r\n        this.setOfferAnswerCycle(\r\n            jingleAnswer,\r\n            () => {\r\n                logger.info(`${this} setAnswer - succeeded`);\r\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\r\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\r\n                    // the local endpoint is the offerer and starts muted.\r\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\r\n                    const remoteDescription = new RTCSessionDescription({\r\n                        type: 'offer',\r\n                        sdp: remoteSdp\r\n                    });\r\n\r\n                    this._responderRenegotiate(remoteDescription);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error(`${this} setAnswer failed: `, error);\r\n            });\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\r\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\r\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\r\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\r\n     *        of the offer (or answer) IQ\r\n     * @param success callback called when sRD/sLD cycle finishes successfully.\r\n     * @param failure callback called with an error object as an argument if we\r\n     *        fail at any point during setRD, createAnswer, setLD.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes (for the local track addition to be an atomic operation together\r\n     * with the offer/answer).\r\n     */\r\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const track of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\r\n            }\r\n\r\n            const newRemoteSdp\r\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\r\n            const oldLocalSdp\r\n                = this.peerconnection.localDescription.sdp;\r\n\r\n            const bridgeSession\r\n                = $(jingleOfferAnswerIq)\r\n                    .find('>bridge-session['\r\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\r\n            const bridgeSessionId = bridgeSession.attr('id');\r\n\r\n            if (bridgeSessionId !== this._bridgeSessionId) {\r\n                this._bridgeSessionId = bridgeSessionId;\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this._renegotiate(newRemoteSdp.raw))\r\n                .then(() => {\r\n                    if (this.state === JingleSessionState.PENDING) {\r\n                        this.state = JingleSessionState.ACTIVE;\r\n\r\n                        // #1 Sync up video transfer active/inactive only after\r\n                        // the initial O/A cycle. We want to adjust the video\r\n                        // media direction only in the local SDP and the Jingle\r\n                        // contents direction included in the initial\r\n                        // offer/answer is mapped to the remote SDP. Jingle\r\n                        // 'content-modify' IQ is processed in a way that it\r\n                        // will only modify local SDP when remote peer is no\r\n                        // longer interested in receiving video content.\r\n                        // Changing media direction in the remote SDP will mess\r\n                        // up our SDP translation chain (simulcast, video mute,\r\n                        // RTX etc.)\r\n                        //\r\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\r\n                        if (this.isP2P\r\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\r\n                            this.sendContentModify();\r\n                        }\r\n                    }\r\n\r\n                    // Old local SDP will be available when we're setting answer\r\n                    // for the first time, but not when offer and it's fine\r\n                    // since we're generating an answer now it will contain all\r\n                    // our SSRCs\r\n                    if (oldLocalSdp) {\r\n                        const newLocalSdp\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(\r\n                            new SDP(oldLocalSdp), newLocalSdp);\r\n                    }\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\r\n                    failure(error);\r\n                } else {\r\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\r\n                    success();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\r\n     * new codec config to take effect.\r\n     *\r\n     * @param {CodecMimeType} preferred the preferred codec.\r\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\r\n     */\r\n    setVideoCodecs(preferred = null, disabled = null) {\r\n        const current = this.peerconnection.getConfiguredVideoCodec();\r\n\r\n        if (this._assertNotEnded() && preferred !== current) {\r\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\r\n            this.peerconnection.setVideoCodecs(preferred, disabled);\r\n\r\n            // Initiate a renegotiate for the codec setting to take effect.\r\n            const workFunction = finishedCallback => {\r\n                this._renegotiate().then(\r\n                    () => {\r\n                        logger.debug(`${this} setVideoCodecs task is done`);\r\n\r\n                        return finishedCallback();\r\n                    }, error => {\r\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\r\n\r\n                        return finishedCallback(error);\r\n                    });\r\n            };\r\n\r\n            logger.debug(`${this} Queued setVideoCodecs task`);\r\n\r\n            // Queue and execute\r\n            this.modificationQueue.push(workFunction);\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Although it states \"replace transport\" it does accept full Jingle offer\r\n     * which should contain new ICE transport details.\r\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\r\n     *        transport info.\r\n     * @param success callback called when we succeed to accept new offer.\r\n     * @param failure function(error) called when we fail to accept new offer.\r\n     */\r\n    replaceTransport(jingleOfferElem, success, failure) {\r\n        if (this.options.enableForcedReload) {\r\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n            this.sendTransportAccept(sdp, success, failure);\r\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\r\n\r\n            return;\r\n        }\r\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\r\n\r\n        // We need to first reject the 'data' section to have the SCTP stack\r\n        // cleaned up to signal the known data channel is now invalid. After\r\n        // that the original offer is set to have the SCTP connection\r\n        // established with the new bridge.\r\n        const originalOffer = jingleOfferElem.clone();\r\n\r\n        jingleOfferElem\r\n            .find('>content[name=\\'data\\']')\r\n            .attr('senders', 'rejected');\r\n\r\n        // Remove all remote sources in order to reset the client's state\r\n        // for the remote MediaStreams. When a conference is moved to\r\n        // another bridge it will start streaming with a sequence number\r\n        // that is not in sync with the most recently seen by the client.\r\n        // The symptoms include frozen or black video and lots of \"failed to\r\n        // unprotect SRTP packets\" in Chrome logs.\r\n        jingleOfferElem\r\n            .find('>content>description>source')\r\n            .remove();\r\n        jingleOfferElem\r\n            .find('>content>description>ssrc-group')\r\n            .remove();\r\n\r\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\r\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\r\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\r\n        // fingerprint has changed by setting an all zeros key.\r\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\r\n\r\n        newFingerprint.attr('hash', 'sha-1');\r\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\r\n\r\n        // First set an offer with a rejected 'data' section\r\n        this.setOfferAnswerCycle(\r\n            jingleOfferElem,\r\n            () => {\r\n                // Now set the original offer(with the 'data' section)\r\n                this.setOfferAnswerCycle(\r\n                    originalOffer,\r\n                    () => {\r\n                        const localSDP\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.sendTransportAccept(localSDP, success, failure);\r\n\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.ICE_RESTART_SUCCESS,\r\n                            this,\r\n                            originalOffer);\r\n                    },\r\n                    failure);\r\n            },\r\n            failure\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-accept' message.\r\n     * @param {function()} success callback called when we receive 'RESULT'\r\n     *        packet for the 'session-accept'\r\n     * @param {function(error)} failure called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendSessionAccept(success, failure) {\r\n        // NOTE: since we're just reading from it, we don't need to be within\r\n        //  the modification queue to access the local description\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n        const accept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-accept',\r\n                initiator: this.initiatorJid,\r\n                responder: this.responderJid,\r\n                sid: this.sid });\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            localSDP.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            localSDP.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            localSDP.failICE = true;\r\n        }\r\n        localSDP.toJingle(\r\n            accept,\r\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\r\n\r\n        logger.info(`${this} Sending session-accept`);\r\n        logger.debug(accept.tree());\r\n        this.connection.sendIQ(accept,\r\n            success,\r\n            this.newJingleErrorHandler(accept, error => {\r\n                failure(error);\r\n\r\n                // 'session-accept' is a critical timeout and we'll\r\n                // have to restart\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\r\n            }),\r\n            IQ_TIMEOUT);\r\n\r\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\r\n        // fingerprint and setup) ASAP in order to start the connection\r\n        // establishment.\r\n        //\r\n        // FIXME Flushing the connection at this point triggers an issue with\r\n        // BOSH request handling in Prosody on slow connections.\r\n        //\r\n        // The problem is that this request will be quite large and it may take\r\n        // time before it reaches Prosody. In the meantime Strophe may decide\r\n        // to send the next one. And it was observed that a small request with\r\n        // 'transport-info' usually follows this one. It does reach Prosody\r\n        // before the previous one was completely received. 'rid' on the server\r\n        // is increased and Prosody ignores the request with 'session-accept'.\r\n        // It will never reach Jicofo and everything in the request table is\r\n        // lost. Removing the flush does not guarantee it will never happen, but\r\n        // makes it much less likely('transport-info' is bundled with\r\n        // 'session-accept' and any immediate requests).\r\n        //\r\n        // this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     * Will send 'content-modify' IQ in order to ask the remote peer to\r\n     * either stop or resume sending video media or to adjust sender's video constraints.\r\n     * @private\r\n     */\r\n    sendContentModify() {\r\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\r\n        const senders = this._localVideoActive ? 'both' : 'none';\r\n\r\n        let sessionModify\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set'\r\n            })\r\n                .c('jingle', {\r\n                    xmlns: 'urn:xmpp:jingle:1',\r\n                    action: 'content-modify',\r\n                    initiator: this.initiatorJid,\r\n                    sid: this.sid\r\n                })\r\n                .c('content', {\r\n                    name: 'video',\r\n                    senders\r\n                });\r\n\r\n        if (typeof maxFrameHeight !== 'undefined') {\r\n            sessionModify = sessionModify\r\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\r\n                .t(maxFrameHeight);\r\n        }\r\n\r\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\r\n        logger.debug(sessionModify.tree());\r\n\r\n        this.connection.sendIQ(\r\n            sessionModify,\r\n            null,\r\n            this.newJingleErrorHandler(sessionModify),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\r\n     * the remote party.\r\n     *\r\n     * @param {Number} maxFrameHeight - the new value to set.\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\r\n\r\n        this.localRecvMaxFrameHeight = maxFrameHeight;\r\n\r\n        if (this.isP2P) {\r\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\r\n            // be synced after offer/answer.\r\n            if (this.state === JingleSessionState.ACTIVE) {\r\n                this.sendContentModify();\r\n            }\r\n        } else {\r\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-accept' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param localSDP the 'SDP' object with local session description\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendTransportAccept(localSDP, success, failure) {\r\n        const transportAccept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-accept',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        localSDP.media.forEach((medialines, idx) => {\r\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\r\n\r\n            transportAccept.c('content',\r\n                {\r\n                    creator:\r\n                        this.initiatorJid === this.localJid\r\n                            ? 'initiator'\r\n                            : 'responder',\r\n                    name: mline.media\r\n                }\r\n            );\r\n            localSDP.transportToJingle(idx, transportAccept);\r\n            transportAccept.up();\r\n        });\r\n\r\n        logger.info(`${this} Sending transport-accept`);\r\n        logger.debug(transportAccept.tree());\r\n\r\n        this.connection.sendIQ(transportAccept,\r\n            success,\r\n            this.newJingleErrorHandler(transportAccept, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-reject' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     *\r\n     * FIXME method should be marked as private, but there's some spaghetti that\r\n     *       needs to be fixed prior doing that\r\n     */\r\n    sendTransportReject(success, failure) {\r\n        // Send 'transport-reject', so that the focus will\r\n        // know that we've failed\r\n        const transportReject = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-reject',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        logger.info(`${this} Sending 'transport-reject'`);\r\n        logger.debug(transportReject.tree());\r\n\r\n        this.connection.sendIQ(transportReject,\r\n            success,\r\n            this.newJingleErrorHandler(transportReject, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum bitrates on the local video track. Bitrate values from\r\n     * videoQuality settings in config.js will be used for configuring the sender.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderMaxBitrates() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setMaxBitRate();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution constraint on the local camera track.\r\n     * @param {number} maxFrameHeight - The user preferred max frame height.\r\n     * @returns {Promise} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoConstraint(maxFrameHeight) {\r\n        if (this._assertNotEnded()) {\r\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\r\n\r\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\r\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\r\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\r\n                const videoActive = maxFrameHeight > 0;\r\n\r\n                return this.setMediaTransferActive(true, videoActive);\r\n            }\r\n\r\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the degradation preference on the video sender. This setting determines if\r\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoDegradationPreference() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setSenderVideoDegradationPreference();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    terminate(success, failure, options) {\r\n        if (this.state === JingleSessionState.ENDED) {\r\n            return;\r\n        }\r\n\r\n        if (!options || Boolean(options.sendSessionTerminate)) {\r\n            const sessionTerminate\r\n                = $iq({\r\n                    to: this.remoteJid,\r\n                    type: 'set'\r\n                })\r\n                    .c('jingle', {\r\n                        xmlns: 'urn:xmpp:jingle:1',\r\n                        action: 'session-terminate',\r\n                        initiator: this.initiatorJid,\r\n                        sid: this.sid\r\n                    })\r\n                    .c('reason')\r\n                    .c((options && options.reason) || 'success')\r\n                    .up();\r\n\r\n            if (options && options.reasonDescription) {\r\n                sessionTerminate\r\n                    .c('text')\r\n                    .t(options.reasonDescription)\r\n                    .up()\r\n                    .up();\r\n            } else {\r\n                sessionTerminate.up();\r\n            }\r\n\r\n            this._bridgeSessionId\r\n                && sessionTerminate.c(\r\n                    'bridge-session', {\r\n                        xmlns: 'http://jitsi.org/protocol/focus',\r\n                        id: this._bridgeSessionId,\r\n                        restart: options && options.requestRestart === true\r\n                    }).up();\r\n\r\n            logger.info(`${this} Sending session-terminate`);\r\n            logger.debug(sessionTerminate.tree());\r\n\r\n            this.connection.sendIQ(\r\n                sessionTerminate,\r\n                success,\r\n                this.newJingleErrorHandler(sessionTerminate, failure),\r\n                IQ_TIMEOUT);\r\n        } else {\r\n            logger.info(`${this} Skipped sending session-terminate`);\r\n        }\r\n\r\n        // this should result in 'onTerminated' being called by strope.jingle.js\r\n        this.connection.jingle.terminate(this.sid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    onTerminated(reasonCondition, reasonText) {\r\n        // Do something with reason and reasonCondition when we start to care\r\n        // this.reasonCondition = reasonCondition;\r\n        // this.reasonText = reasonText;\r\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\r\n\r\n        this._xmppListeners.forEach(removeListener => removeListener());\r\n        this._xmppListeners = [];\r\n\r\n        if (this._removeSenderVideoConstraintsChangeListener) {\r\n            this._removeSenderVideoConstraintsChangeListener();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * Handles XMPP connection state changes.\r\n     *\r\n     * @param {XmppConnection.Status} status - The new status.\r\n     */\r\n    onXmppStatusChanged(status) {\r\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\r\n            logger.info(`${this} Sending SSRC update on reconnect`);\r\n            this.notifyMySSRCUpdate(\r\n                this._cachedOldLocalSdp,\r\n                this._cachedNewLocalSdp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceAddElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceAddElem the source-add\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-add)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be added to the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\r\n        const addSsrcInfo = [];\r\n        const self = this;\r\n\r\n        $(sourceAddElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    // eslint-disable-next-line no-invalid-this\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this) // eslint-disable-line no-invalid-this\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                // eslint-disable-next-line no-invalid-this\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n                });\r\n\r\n            // handles both >source and >description>source\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            /* eslint-disable no-invalid-this */\r\n            tmp.each(function() {\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\r\n\r\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\r\n                    !(self.usesUnifiedPlan && self.isP2P)\r\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\r\n\r\n                    return;\r\n                }\r\n\r\n                // eslint-disable-next-line newline-per-chained-call\r\n                $(this).find('>parameter').each(function() {\r\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\r\n                    if ($(this).attr('value') && $(this).attr('value').length) {\r\n                        lines += `:${$(this).attr('value')}`;\r\n                    }\r\n                    lines += '\\r\\n';\r\n                });\r\n            });\r\n\r\n            /* eslint-enable no-invalid-this */\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!addSsrcInfo[i2]) {\r\n                    addSsrcInfo[i2] = '';\r\n                }\r\n                addSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return addSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-add message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    addRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(true /* add */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-remove message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    removeRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\r\n     *\r\n     * @param {string} id Endpoint id of the participant that has left the call.\r\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\r\n     * operation fails.\r\n     */\r\n    removeRemoteStreamsOnLeave(id) {\r\n        let remoteTracks = [];\r\n\r\n        const workFunction = finishCallback => {\r\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\r\n\r\n            if (removeSsrcInfo.length) {\r\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\r\n\r\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\r\n                this._renegotiate(newRemoteSdp.raw)\r\n                    .then(() => {\r\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\r\n                        finishCallback();\r\n                    })\r\n                    .catch(err => finishCallback(err));\r\n            } else {\r\n                finishCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\r\n\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info(`${this} removeRemoteStreamsOnLeave done!`);\r\n                        resolve(remoteTracks);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\r\n     * Jingle session.\r\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\r\n     * otherwise.\r\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\r\n     * @private\r\n     */\r\n    _addOrRemoveRemoteStream(isAdd, elem) {\r\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\r\n\r\n        if (isAdd) {\r\n            this.readSsrcInfo(elem);\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (!this.peerconnection.localDescription\r\n                || !this.peerconnection.localDescription.sdp) {\r\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\r\n\r\n                logger.error(errMsg);\r\n                finishedCallback(errMsg);\r\n\r\n                return;\r\n            }\r\n\r\n            logger.log(`${this} Processing ${logPrefix}`);\r\n\r\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n            const addOrRemoveSsrcInfo\r\n                = isAdd\r\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\r\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\r\n            const newRemoteSdp\r\n                = isAdd\r\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\r\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\r\n\r\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\r\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\r\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\r\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\r\n            // TODO - open a chrome bug and update the comments.\r\n            const remoteDescription = new RTCSessionDescription({\r\n                type: 'offer',\r\n                sdp: newRemoteSdp.raw\r\n            });\r\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\r\n                ? this._responderRenegotiate(remoteDescription)\r\n                : this._renegotiate(newRemoteSdp.raw);\r\n\r\n            promise.then(() => {\r\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                logger.log(`${this} ${logPrefix} - OK`);\r\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\r\n                finishedCallback();\r\n            }, error => {\r\n                logger.error(`${this} ${logPrefix} failed:`, error);\r\n                finishedCallback(error);\r\n            });\r\n        };\r\n\r\n        logger.debug(`${this} Queued ${logPrefix} task`);\r\n\r\n        // Queue and execute\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     * Takes in a jingle offer iq, returns the new sdp offer\r\n     * @param {jquery xml element} offerIq the incoming offer\r\n     * @returns {SDP object} the jingle offer translated to SDP\r\n     */\r\n    _processNewJingleOfferIq(offerIq) {\r\n        const remoteSdp = new SDP('');\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            remoteSdp.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            remoteSdp.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            remoteSdp.failICE = true;\r\n        }\r\n\r\n        remoteSdp.fromJingle(offerIq);\r\n        this.readSsrcInfo($(offerIq).find('>content'));\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Remove the given ssrc lines from the current remote sdp\r\n     * @param {list} removeSsrcInfo a list of SDP line strings that\r\n     *  should be removed from the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteRemoveSource(removeSsrcInfo) {\r\n        const remoteSdp = this.usesUnifiedPlan\r\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\r\n            : new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        removeSsrcInfo.forEach((lines, idx) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            lines = lines.split('\\r\\n');\r\n            lines.pop(); // remove empty last element;\r\n            if (this.usesUnifiedPlan) {\r\n                lines.forEach(line => {\r\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\r\n\r\n                    if (mid > -1) {\r\n                        // Remove the ssrcs from the m-line in\r\n                        // 1. Plan-b mode always.\r\n                        // 2. Unified mode but only for jvb connection. In p2p mode if the ssrc is removed and added\r\n                        // back to the same m-line, Chrome/Safari do not render the media even if it being received\r\n                        // and decoded from the remote peer. The webrtc spec is not clear about m-line re-use and\r\n                        // the browser vendors have implemented this differently. Currently workaround this by changing\r\n                        // the media direction, that should be enough for the browser to fire the \"removetrack\" event\r\n                        // on the associated MediaStream.\r\n                        if (!this.usesUnifiedPlan || (this.usesUnifiedPlan && !this.isP2P)) {\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\r\n                        }\r\n\r\n                        // The current direction of the transceiver for p2p will depend on whether a local sources is\r\n                        // added or not. It will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\r\n                        if (this.isP2P) {\r\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\r\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\r\n\r\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\r\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\r\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\r\n                            });\r\n\r\n                        // Jvb connections will have direction set to 'sendonly' when the remote ssrc is present.\r\n                        } else {\r\n                            // Change the direction to \"inactive\" always for jvb connection.\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\r\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                lines.forEach(line => {\r\n                    remoteSdp.media[idx]\r\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Add the given ssrc lines to the current remote sdp\r\n     * @param {list} addSsrcInfo a list of SDP line strings that\r\n     *  should be added to the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteAddSource(addSsrcInfo) {\r\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        addSsrcInfo.forEach((lines, idx) => {\r\n            remoteSdp.media[idx] += lines;\r\n\r\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\r\n            // a new m-line is added for the new remote sources.\r\n            if (this.isP2P && this.usesUnifiedPlan) {\r\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\r\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\r\n\r\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\r\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\r\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Do a new o/a flow using the existing remote description\r\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\r\n     *  to use.  If not provided, the remote sdp from the\r\n     *  peerconnection will be used\r\n     * @returns {Promise} promise which resolves when the\r\n     *  o/a flow is complete with no arguments or\r\n     *  rejects with an error {string}\r\n     */\r\n    _renegotiate(optionalRemoteSdp) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            const error = new Error('Attempted to renegotiate in state closed');\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteSdp\r\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\r\n\r\n        if (!remoteSdp) {\r\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteDescription = new RTCSessionDescription({\r\n            type: this.isInitiator ? 'answer' : 'offer',\r\n            sdp: remoteSdp\r\n        });\r\n\r\n        if (this.isInitiator) {\r\n            return this._initiatorRenegotiate(remoteDescription);\r\n        }\r\n\r\n        return this._responderRenegotiate(remoteDescription);\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the responder case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _responderRenegotiate(remoteDescription) {\r\n        logger.debug(`${this} Renegotiate: setting remote description`);\r\n\r\n        return this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                logger.debug(`${this} Renegotiate: creating answer`);\r\n\r\n                return this.peerconnection.createAnswer(this.mediaConstraints)\r\n                    .then(answer => {\r\n                        logger.debug(`${this} Renegotiate: setting local description`);\r\n\r\n                        return this.peerconnection.setLocalDescription(answer);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the initiator's case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _initiatorRenegotiate(remoteDescription) {\r\n        logger.debug(`${this} Renegotiate: creating offer`);\r\n\r\n        return this.peerconnection.createOffer(this.mediaConstraints)\r\n            .then(offer => {\r\n                logger.debug(`${this} Renegotiate: setting local description`);\r\n\r\n                return this.peerconnection.setLocalDescription(offer)\r\n                    .then(() => {\r\n                        logger.debug(`${this} Renegotiate: setting remote description`);\r\n\r\n                        // eslint-disable-next-line max-len\r\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\r\n     * offer/answer cycle after both operations are done. Either\r\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n     * <tt>oldTrack</tt>\r\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\r\n     * replaced\r\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\r\n     * @returns {Promise} which resolves once the replacement is complete\r\n     *  with no arguments or rejects with an error {string}\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const workFunction = finishedCallback => {\r\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\r\n\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            if (!this.usesUnifiedPlan) {\r\n                // NOTE the code below assumes that no more than 1 video track\r\n                // can be added to the peer connection.\r\n                // Transition from camera to desktop share\r\n                // or transition from one camera source to another.\r\n                if (this.peerconnection.options.capScreenshareBitrate\r\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the old video stream.\r\n                    // 2. source-add for the new video stream.\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                }\r\n\r\n                // Transition from no video to video (unmute).\r\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the recvonly\r\n                    // 2. source-add for the new video stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n\r\n                // Transition from video to no video\r\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\r\n                    // Clearing current primary SSRC and generating the recvonly\r\n                    // will result in:\r\n                    // 1. source-remove for the old video stream\r\n                    // 2. source-add for the recvonly stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                    this.peerconnection.generateRecvonlySsrc();\r\n                }\r\n            }\r\n\r\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\r\n                .then(shouldRenegotiate => {\r\n                    let promise = Promise.resolve();\r\n\r\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\r\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\r\n\r\n                    if (shouldRenegotiate\r\n                        && (oldTrack || newTrack)\r\n                        && this.state === JingleSessionState.ACTIVE) {\r\n                        promise = this._renegotiate().then(() => {\r\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\r\n                        });\r\n                    }\r\n\r\n                    return promise.then(() => {\r\n                        if (newTrack && newTrack.isVideoTrack()) {\r\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\r\n\r\n                            // FIXME set all sender parameters in one go?\r\n                            // Set the degradation preference on the new video sender.\r\n                            return this.peerconnection.setSenderVideoDegradationPreference()\r\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\r\n                                .then(() => this.peerconnection.setMaxBitRate());\r\n                        }\r\n                    });\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\r\n\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error(`${this} Replace track error:`, error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info(`${this}  Replace track done!`);\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceRemoveElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceRemoveElem the source-remove\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-remove)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be removed from the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\r\n        const removeSsrcInfo = [];\r\n\r\n        $(sourceRemoveElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    /* eslint-disable no-invalid-this */\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this)\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n\r\n                    /* eslint-enable no-invalid-this */\r\n                });\r\n            const ssrcs = [];\r\n\r\n            // handles both >source and >description>source versions\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            tmp.each(function() {\r\n                // eslint-disable-next-line no-invalid-this\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                ssrcs.push(ssrc);\r\n            });\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!removeSsrcInfo[i2]) {\r\n                    removeSsrcInfo[i2] = '';\r\n                }\r\n                ssrcs.forEach(ssrc => {\r\n                    const ssrcLines\r\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n                    if (ssrcLines.length) {\r\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                    }\r\n                });\r\n                removeSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return removeSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Will print an error if there is any difference, between the SSRCs given\r\n     * in the <tt>oldSDP</tt> and the ones currently described in\r\n     * the peerconnection's local description.\r\n     * @param {string} operationName the operation's name which will be printed\r\n     * in the error message.\r\n     * @param {SDP} oldSDP the old local SDP which will be compared with\r\n     * the current one.\r\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\r\n     * otherwise.\r\n     * @private\r\n     */\r\n    _verifyNoSSRCChanged(operationName, oldSDP) {\r\n        const currentLocalSDP\r\n            = new SDP(this.peerconnection.localDescription.sdp);\r\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\r\n        const addedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(addedMedia).length) {\r\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\r\n        const removedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(removedMedia).length) {\r\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds local track back to this session, as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} track\r\n     * @return {Promise} a promise that will resolve once the local track is\r\n     * added back to this session and renegotiation succeeds. Will be rejected\r\n     * with a <tt>string</tt> that provides some error details in case something\r\n     * goes wrong.\r\n     */\r\n    addTrackAsUnmute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            false /* add as unmute */, track)\r\n            .then(() => {\r\n                // Apply the video constraints, max bitrates and degradation preference on\r\n                // the video sender if needed.\r\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\r\n                    return this.setSenderMaxBitrates()\r\n                        .then(() => this.setSenderVideoDegradationPreference())\r\n                        .then(() => this.setSenderVideoConstraint());\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Remove local track as part of the mute operation.\r\n     * @param {JitsiLocalTrack} track the local track to be removed\r\n     * @return {Promise} a promise which will be resolved once the local track\r\n     * is removed from this session and the renegotiation is performed.\r\n     * The promise will be rejected with a <tt>string</tt> that the describes\r\n     * the error if anything goes wrong.\r\n     */\r\n    removeTrackAsMute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            true /* remove as mute */, track);\r\n    }\r\n\r\n    /**\r\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\r\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\r\n     * <tt>false</tt> for \"add as unmute\".\r\n     * @param {JitsiLocalTrack} track the track that will be added/removed\r\n     * @private\r\n     */\r\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\r\n        if (!track) {\r\n            return Promise.reject('invalid \"track\" argument value');\r\n        }\r\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\r\n        const workFunction = finishedCallback => {\r\n            const tpc = this.peerconnection;\r\n\r\n            if (!tpc) {\r\n                finishedCallback(\r\n                    `Error:  tried ${operationName} track with no active peer`\r\n                        + 'connection');\r\n\r\n                return;\r\n            }\r\n            const oldLocalSDP = tpc.localDescription.sdp;\r\n            const operationPromise\r\n                = isMute\r\n                    ? tpc.removeTrackMute(track)\r\n                    : tpc.addTrackUnmute(track);\r\n\r\n            operationPromise\r\n                .then(shouldRenegotiate => {\r\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\r\n                        this._renegotiate()\r\n                            .then(() => {\r\n                                // The results are ignored, as this check failure is not\r\n                                // enough to fail the whole operation. It will log\r\n                                // an error inside.\r\n                                this._verifyNoSSRCChanged(\r\n                                    operationName, new SDP(oldLocalSDP));\r\n                                finishedCallback();\r\n                            });\r\n                    } else {\r\n                        finishedCallback();\r\n                    }\r\n                },\r\n                finishedCallback /* will be called with an error */);\r\n        };\r\n\r\n        logger.debug(`${this} Queued ${operationName} task`);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error(`${this} ${operationName} failed`);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.debug(`${this} ${operationName} done`);\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resumes or suspends media transfer over the underlying peer connection.\r\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\r\n     * transfer or <tt>false</tt> to suspend audio media transmission.\r\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\r\n     * transfer or <tt>false</tt> to suspend video media transmission.\r\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\r\n     * the operation is done. It will be rejected with an error description as\r\n     * a string in case anything goes wrong.\r\n     */\r\n    setMediaTransferActive(audioActive, videoActive) {\r\n        if (!this.peerconnection) {\r\n            return Promise.reject(\r\n                'Can not modify transfer active state,'\r\n                    + ' before \"initialize\" is called');\r\n        }\r\n\r\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\r\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\r\n\r\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\r\n\r\n        const workFunction = finishedCallback => {\r\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\r\n\r\n            // Because the value is modified on the queue it's impossible to\r\n            // check it's final value reliably prior to submitting the task.\r\n            // The rule here is that the last submitted state counts.\r\n            // Check the values here to avoid unnecessary renegotiation cycle.\r\n            const audioActiveChanged\r\n                = this.peerconnection.setAudioTransferActive(audioActive);\r\n\r\n            if (this._localVideoActive !== videoActive) {\r\n                this._localVideoActive = videoActive;\r\n\r\n                // Do only for P2P - Jicofo will reply with 'bad-request'\r\n                // We don't want to send 'content-modify', before the initial\r\n                // O/A (state === JingleSessionState.ACTIVE), because that will\r\n                // mess up video media direction in the remote SDP.\r\n                // 'content-modify' when processed only affects the media\r\n                // direction in the local SDP. We're doing that, because setting\r\n                // 'inactive' on video media in remote SDP will mess up our SDP\r\n                // translation chain (simulcast, RTX, video mute etc.).\r\n                if (this.isP2P && isSessionActive) {\r\n                    this.sendContentModify();\r\n                }\r\n            }\r\n\r\n            const pcVideoActiveChanged\r\n                = this.peerconnection.setVideoTransferActive(\r\n                    this._localVideoActive && this._remoteVideoActive);\r\n\r\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\r\n            // direction\r\n            if (isSessionActive\r\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\r\n                this._renegotiate()\r\n                    .then(\r\n                        finishedCallback,\r\n                        finishedCallback /* will be called with an error */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will put and execute on the queue a session modify task. Currently it\r\n     * only checks the senders attribute of the video content in order to figure\r\n     * out if the remote peer has video in the inactive state (stored locally\r\n     * in {@link _remoteVideoActive} - see field description for more info).\r\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\r\n     * element of the session modify IQ.\r\n     * @see {@link _remoteVideoActive}\r\n     * @see {@link _localVideoActive}\r\n     */\r\n    modifyContents(jingleContents) {\r\n        const newVideoSenders\r\n            = JingleSessionPC.parseVideoSenders(jingleContents);\r\n        const newMaxFrameHeight\r\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\r\n\r\n        // frame height is optional in our content-modify protocol\r\n        if (newMaxFrameHeight) {\r\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\r\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\r\n            this.eventEmitter.emit(\r\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n        }\r\n\r\n        if (newVideoSenders === null) {\r\n            logger.error(\r\n                `${this} - failed to parse video \"senders\" attribute in`\r\n                    + '\"content-modify\" action');\r\n\r\n            return;\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (this._assertNotEnded('content-modify')\r\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\r\n                // Will do the sRD/sLD cycle to update SDPs and adjust\r\n                // the media direction\r\n                this._renegotiate()\r\n                    .then(finishedCallback, finishedCallback /* (error) */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} \"content-modify\" failed`, error);\r\n                } else {\r\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\r\n     * to apply it for {@link _remoteVideoActive}.\r\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\r\n     * Jingle video content element advertised by remote peer.\r\n     * @return {boolean} <tt>true</tt> if the change affected state of\r\n     * the underlying peerconnection and renegotiation is required for\r\n     * the changes to take effect.\r\n     * @private\r\n     */\r\n    _modifyRemoteVideoActive(remoteVideoSenders) {\r\n        const isRemoteVideoActive\r\n            = remoteVideoSenders === 'both'\r\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\r\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\r\n\r\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\r\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\r\n            this._remoteVideoActive = isRemoteVideoActive;\r\n        }\r\n\r\n        return this.peerconnection.setVideoTransferActive(\r\n            this._localVideoActive && this._remoteVideoActive);\r\n    }\r\n\r\n    /**\r\n     * Figures out added/removed ssrcs and send update IQs.\r\n     * @param oldSDP SDP object for old description.\r\n     * @param newSDP SDP object for new description.\r\n     */\r\n    notifyMySSRCUpdate(oldSDP, newSDP) {\r\n\r\n        if (this.state !== JingleSessionState.ACTIVE) {\r\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.connection.connected) {\r\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\r\n            if (!this._cachedOldLocalSdp) {\r\n                this._cachedOldLocalSdp = oldSDP;\r\n            }\r\n            this._cachedNewLocalSdp = newSDP;\r\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._cachedOldLocalSdp = undefined;\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        // send source-remove IQ.\r\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\r\n        const remove = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-remove',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\r\n\r\n        if (removedAnySSRCs) {\r\n            logger.info(`${this} Sending source-remove`);\r\n            logger.debug(remove.tree());\r\n            this.connection.sendIQ(\r\n                remove, null,\r\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\r\n        }\r\n\r\n        // send source-add IQ.\r\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\r\n        const add = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-add',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\r\n\r\n        if (containsNewSSRCs) {\r\n            logger.info(`${this} Sending source-add`);\r\n            logger.debug(add.tree());\r\n            this.connection.sendIQ(\r\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method returns function(errorResponse) which is a callback to be passed\r\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\r\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\r\n     * structure is as follows:\r\n     * {\r\n     *  code: {XMPP error response code}\r\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\r\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\r\n     *  source: {request.tree() that provides original request}\r\n     *  session: {this JingleSessionPC.toString()}\r\n     * }\r\n     * @param request Strophe IQ instance which is the request to be dumped into\r\n     *        the error structure\r\n     * @param failureCb function(error) called when error response was returned\r\n     *        or when a timeout has occurred.\r\n     * @returns {function(this:JingleSessionPC)}\r\n     */\r\n    newJingleErrorHandler(request, failureCb) {\r\n        return errResponse => {\r\n\r\n            const error = {};\r\n\r\n            // Get XMPP error code and condition(reason)\r\n            const errorElSel = $(errResponse).find('error');\r\n\r\n            if (errorElSel.length) {\r\n                error.code = errorElSel.attr('code');\r\n                const errorReasonSel = $(errResponse).find('error :first');\r\n\r\n                if (errorReasonSel.length) {\r\n                    error.reason = errorReasonSel[0].tagName;\r\n                }\r\n\r\n                const errorMsgSel = errorElSel.find('>text');\r\n\r\n                if (errorMsgSel.length) {\r\n                    error.msg = errorMsgSel.text();\r\n                }\r\n            }\r\n\r\n            if (!errResponse) {\r\n                error.reason = 'timeout';\r\n            }\r\n\r\n            error.session = this.toString();\r\n\r\n            if (failureCb) {\r\n                failureCb(error);\r\n            } else if (this.state === JingleSessionState.ENDED\r\n                        && error.reason === 'item-not-found') {\r\n                // When remote peer decides to terminate the session, but it\r\n                // still have few messages on the queue for processing,\r\n                // it will first send us 'session-terminate' (we enter ENDED)\r\n                // and then follow with 'item-not-found' for the queued requests\r\n                // We don't want to have that logged on error level.\r\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\r\n            } else {\r\n                GlobalOnErrorHandler.callErrorHandler(\r\n                    new Error(\r\n                        `Jingle error: ${JSON.stringify(error)}`));\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the ice connection state for the peer connection.\r\n     * @returns the ice connection state for the peer connection.\r\n     */\r\n    getIceConnectionState() {\r\n        return this.peerconnection.getConnectionState();\r\n    }\r\n\r\n    /**\r\n     * Closes the peerconnection.\r\n     */\r\n    close() {\r\n        this.state = JingleSessionState.ENDED;\r\n        this.establishmentDuration = undefined;\r\n\r\n        if (this.peerconnection) {\r\n            this.peerconnection.onicecandidate = null;\r\n            this.peerconnection.oniceconnectionstatechange = null;\r\n            this.peerconnection.onnegotiationneeded = null;\r\n            this.peerconnection.onsignalingstatechange = null;\r\n        }\r\n\r\n        logger.debug(`${this} Clearing modificationQueue`);\r\n\r\n        // Remove any pending tasks from the queue\r\n        this.modificationQueue.clear();\r\n\r\n        logger.debug(`${this} Queued PC close task`);\r\n        this.modificationQueue.push(finishCallback => {\r\n            // The signaling layer will remove it's listeners\r\n            this.signalingLayer.setChatRoom(null);\r\n\r\n            // do not try to close if already closed.\r\n            this.peerconnection && this.peerconnection.close();\r\n            finishCallback();\r\n            logger.debug(`${this} PC close task done!`);\r\n        });\r\n\r\n        logger.debug(`${this} Shutdown modificationQueue!`);\r\n\r\n        // No more tasks can go in after the close task\r\n        this.modificationQueue.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Converts to string with minor summary.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\r\n    }\r\n\r\n    /**\r\n     * If the A/B test for suspend video is disabled according to the room's\r\n     * configuration, returns undefined. Otherwise returns a boolean which\r\n     * indicates whether the suspend video option should be enabled or disabled.\r\n     * @param {JingleSessionPCOptions} options - The config options.\r\n     */\r\n    _abtestSuspendVideoEnabled({ abTesting }) {\r\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\r\n            return;\r\n        }\r\n\r\n        // We want the two participants in a P2P call to agree on the value of\r\n        // the \"suspend\" option. We use the JID of the initiator, because it is\r\n        // both randomly selected and agreed upon by both participants.\r\n        const jid = this._getInitiatorJid();\r\n\r\n        return integerHash(jid) % 2 === 0;\r\n    }\r\n}\r\n","/* global $, $build, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport {\r\n    ACTION_JINGLE_TR_RECEIVED,\r\n    ACTION_JINGLE_TR_SUCCESS,\r\n    createJingleEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\nimport JingleSessionPC from './JingleSessionPC';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// XXX Strophe is build around the idea of chaining function calls so allow long\r\n// function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\r\n * @param {*} owner the endpoint ID of the owner of the source.\r\n * @param {*} sourceCompactJson the compact JSON representation of the source.\r\n * @returns the created \"source\" XML element.\r\n */\r\nfunction _createSourceExtension(owner, sourceCompactJson) {\r\n    const node = $build('source', {\r\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\r\n        ssrc: sourceCompactJson.s,\r\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\r\n    });\r\n\r\n    if (sourceCompactJson.m) {\r\n        node.c('parameter', {\r\n            name: 'msid',\r\n            value: sourceCompactJson.m\r\n        }).up();\r\n    }\r\n    node.c('ssrc-info', {\r\n        xmlns: 'http://jitsi.org/jitmeet',\r\n        owner\r\n    }).up();\r\n\r\n    return node.node;\r\n}\r\n\r\n/**\r\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\r\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\r\n * @returns the created \"ssrc-group\" element.\r\n */\r\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\r\n    const node = $build('ssrc-group', {\r\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\r\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\r\n    });\r\n\r\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\r\n        node.c('source', {\r\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\r\n            ssrc: ssrcGroupCompactJson[i]\r\n        }).up();\r\n    }\r\n\r\n    return node.node;\r\n}\r\n\r\n/**\r\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\r\n * source descriptions to the given Jingle IQ in the standard Jingle format.\r\n *\r\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\r\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\r\n *\r\n * @param {*} iq the IQ to which source descriptions will be added.\r\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\r\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\r\n * endpoint id as the key.\r\n */\r\nfunction _expandSourcesFromJson(iq, jsonMessageXml) {\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(jsonMessageXml.textContent);\r\n    } catch (error) {\r\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\r\n\r\n        return null;\r\n    }\r\n\r\n    if (!json?.sources) {\r\n        // It might be a message of a different type, no need to log.\r\n        return null;\r\n    }\r\n\r\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\r\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\r\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\r\n    const ssrcMap = new Map();\r\n\r\n    for (const owner in json.sources) {\r\n        if (json.sources.hasOwnProperty(owner)) {\r\n            const ssrcs = [];\r\n            const ownerSources = json.sources[owner];\r\n\r\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\r\n            // the elements of the array.\r\n            const videoSources = ownerSources?.length && ownerSources[0];\r\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\r\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\r\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\r\n\r\n            if (videoSources?.length) {\r\n                for (let i = 0; i < videoSources.length; i++) {\r\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\r\n                }\r\n\r\n                // Log only the first video ssrc per endpoint.\r\n                ssrcs.push(videoSources[0]?.s);\r\n            }\r\n\r\n            if (videoSsrcGroups?.length) {\r\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\r\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\r\n                }\r\n            }\r\n            if (audioSources?.length) {\r\n                for (let i = 0; i < audioSources.length; i++) {\r\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\r\n                }\r\n                ssrcs.push(audioSources[0]?.s);\r\n            }\r\n\r\n            if (audioSsrcGroups?.length) {\r\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\r\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\r\n                }\r\n            }\r\n            ssrcMap.set(owner, ssrcs);\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n}\r\n\r\n/**\r\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\r\n *  well as the required  \"content\" parent element) and adds it to the IQ.\r\n * @param {*} iq\r\n * @param {*} mediaType The media type, \"audio\" or \"video\".\r\n * @returns the RTP description element with the given media type.\r\n */\r\nfunction _getOrCreateRtpDescription(iq, mediaType) {\r\n    const jingle = $(iq).find('jingle')[0];\r\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\r\n    let description;\r\n\r\n    if (content.length) {\r\n        content = content[0];\r\n    } else {\r\n        // I'm not suree if \"creator\" and \"senders\" are required.\r\n        content = $build('content', {\r\n            name: mediaType\r\n        }).node;\r\n        jingle.appendChild(content);\r\n    }\r\n\r\n    description = $(content).find('description');\r\n\r\n    if (description.length) {\r\n        description = description[0];\r\n    } else {\r\n        description = $build('description', {\r\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n            media: mediaType\r\n        }).node;\r\n        content.appendChild(description);\r\n    }\r\n\r\n    return description;\r\n}\r\n\r\n/**\r\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\r\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\r\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\r\n * @returns the SSRC group semantics corresponding to [str].\r\n */\r\nfunction _getSemantics(str) {\r\n    if (str === 'f') {\r\n        return 'FID';\r\n    } else if (str === 's') {\r\n        return 'SIM';\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\r\n *\r\n * @param {*} transport Transport XML element extracted from the IQ.\r\n * @returns {Array<string>}\r\n */\r\nfunction _parseIceCandidates(transport) {\r\n    const candidates = $(transport).find('>candidate');\r\n    const parseCandidates = [];\r\n\r\n    // Extract the candidate information from the IQ.\r\n    candidates.each((_, candidate) => {\r\n        const attributes = candidate.attributes;\r\n        const candidateAttrs = [];\r\n\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            const attr = attributes[i];\r\n\r\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\r\n        }\r\n        parseCandidates.push(candidateAttrs.join(' '));\r\n    });\r\n\r\n    return parseCandidates;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Creates new <tt>JingleConnectionPlugin</tt>\r\n     * @param {XMPP} xmpp\r\n     * @param {EventEmitter} eventEmitter\r\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\r\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\r\n     */\r\n    constructor(xmpp, eventEmitter, iceConfig) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.eventEmitter = eventEmitter;\r\n        this.sessions = {};\r\n        this.jvbIceConfig = iceConfig.jvb;\r\n        this.p2pIceConfig = iceConfig.p2p;\r\n        this.mediaConstraints = {\r\n            offerToReceiveAudio: true,\r\n            offerToReceiveVideo: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.addHandler(this.onJingle.bind(this),\r\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onJingle(iq) {\r\n        const sid = $(iq).find('jingle').attr('sid');\r\n        const action = $(iq).find('jingle').attr('action');\r\n        const fromJid = iq.getAttribute('from');\r\n\r\n        // send ack first\r\n        const ack = $iq({ type: 'result',\r\n            to: fromJid,\r\n            id: iq.getAttribute('id')\r\n        });\r\n\r\n        let sess = this.sessions[sid];\r\n\r\n        if (action !== 'session-initiate') {\r\n            if (!sess) {\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                logger.warn(`invalid session id: ${sid}`);\r\n                logger.debug(iq);\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n\r\n            // local jid is not checked\r\n            if (fromJid !== sess.remoteJid) {\r\n                logger.warn(\r\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n        } else if (sess !== undefined) {\r\n            // Existing session with same session id. This might be out-of-order\r\n            // if the sess.remoteJid is the same as from.\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('service-unavailable', {\r\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                })\r\n                .up();\r\n            logger.warn('duplicate session id', sid, iq);\r\n            this.connection.send(ack);\r\n\r\n            return true;\r\n        }\r\n        const now = window.performance.now();\r\n\r\n        // FIXME that should work most of the time, but we'd have to\r\n        // think how secure it is to assume that user with \"focus\"\r\n        // nickname is Jicofo.\r\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\r\n\r\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\r\n\r\n        const jsonMessages = $(iq).find('jingle>json-message');\r\n\r\n        if (jsonMessages?.length) {\r\n            let audioVideoSsrcs;\r\n\r\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\r\n            for (let i = 0; i < jsonMessages.length; i++) {\r\n                // Currently there is always a single json-message in the IQ with the source information.\r\n                audioVideoSsrcs = _expandSourcesFromJson(iq, jsonMessages[i]);\r\n            }\r\n\r\n            if (audioVideoSsrcs?.size) {\r\n                const logMessage = [];\r\n\r\n                for (const endpoint of audioVideoSsrcs.keys()) {\r\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\r\n                }\r\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\r\n            }\r\n\r\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\r\n            // removeChild doesn't seem to work.\r\n        }\r\n\r\n        switch (action) {\r\n        case 'session-initiate': {\r\n            logger.log('(TIME) received session-initiate:\\t', now);\r\n            const startMuted = $(iq).find('jingle>startmuted');\r\n\r\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\r\n            if (startMuted?.length) {\r\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\r\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\r\n\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\r\n                    audioMuted === 'true',\r\n                    videoMuted === 'true');\r\n            }\r\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\r\n\r\n            sess\r\n                = new JingleSessionPC(\r\n                    $(iq).find('jingle').attr('sid'),\r\n                    $(iq).attr('to'),\r\n                    fromJid,\r\n                    this.connection,\r\n                    this.mediaConstraints,\r\n\r\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\r\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\r\n                    JSON.parse(JSON.stringify(pcConfig)),\r\n                    isP2P,\r\n                    /* initiator */ false);\r\n\r\n            this.sessions[sess.sid] = sess;\r\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\r\n            break;\r\n        }\r\n        case 'session-accept': {\r\n            const ssrcs = [];\r\n            const contents = $(iq).find('jingle>content');\r\n\r\n            // Extract the SSRCs from the session-accept received from a p2p peer.\r\n            for (const content of contents) {\r\n                const ssrc = $(content).find('description').attr('ssrc');\r\n\r\n                ssrc && ssrcs.push(ssrc);\r\n            }\r\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'content-modify': {\r\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\r\n\r\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\r\n            sess.modifyContents($(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'transport-info': {\r\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\r\n\r\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\r\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'session-terminate': {\r\n            logger.log('terminating...', sess.sid);\r\n            let reasonCondition = null;\r\n            let reasonText = null;\r\n\r\n            if ($(iq).find('>jingle>reason').length) {\r\n                reasonCondition\r\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\r\n                reasonText = $(iq).find('>jingle>reason>text').text();\r\n            }\r\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\r\n            this.terminate(sess.sid, reasonCondition, reasonText);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\r\n            break;\r\n        }\r\n        case 'transport-replace': {\r\n            logger.info('(TIME) Start transport replace:\\t', now);\r\n            const transport = $(iq).find('jingle>content>transport');\r\n            const candidates = _parseIceCandidates(transport);\r\n            const iceUfrag = $(transport).attr('ufrag');\r\n            const icePwd = $(transport).attr('pwd');\r\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\r\n\r\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\r\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\r\n\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_TR_RECEIVED,\r\n                {\r\n                    p2p: isP2P,\r\n                    value: now\r\n                }));\r\n\r\n            sess.replaceTransport($(iq).find('>jingle'), () => {\r\n                const successTime = window.performance.now();\r\n\r\n                logger.info('(TIME) Transport replace success:\\t', successTime);\r\n                Statistics.sendAnalytics(createJingleEvent(\r\n                    ACTION_JINGLE_TR_SUCCESS,\r\n                    {\r\n                        p2p: isP2P,\r\n                        value: successTime\r\n                    }));\r\n            }, error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Transport replace failed', error);\r\n                sess.sendTransportReject();\r\n            });\r\n            break;\r\n        }\r\n        case 'source-add':\r\n            sess.addRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        case 'source-remove':\r\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        default:\r\n            logger.warn('jingle action not implemented', action);\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('bad-request',\r\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\r\n                .up();\r\n            break;\r\n        }\r\n        this.connection.send(ack);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\r\n     * connection, configured as 'initiator'.\r\n     * @param {string} me our JID\r\n     * @param {string} peer remote participant's JID\r\n     * @return {JingleSessionPC}\r\n     */\r\n    newP2PJingleSession(me, peer) {\r\n        const sess\r\n            = new JingleSessionPC(\r\n                RandomUtil.randomHexString(12),\r\n                me,\r\n                peer,\r\n                this.connection,\r\n                this.mediaConstraints,\r\n                this.p2pIceConfig,\r\n                /* P2P */ true,\r\n                /* initiator */ true);\r\n\r\n        this.sessions[sess.sid] = sess;\r\n\r\n        return sess;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sid\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    terminate(sid, reasonCondition, reasonText) {\r\n        if (this.sessions.hasOwnProperty(sid)) {\r\n            if (this.sessions[sid].state !== 'ended') {\r\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\r\n            }\r\n            delete this.sessions[sid];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getStunAndTurnCredentials() {\r\n        // get stun and turn configuration from server via xep-0215\r\n        // uses time-limited credentials as described in\r\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\r\n        //\r\n        // See https://modules.prosody.im/mod_turncredentials.html\r\n        // for a prosody module which implements this.\r\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\r\n        //\r\n        // Currently, this doesn't work with updateIce and therefore credentials\r\n        // with a long validity have to be fetched before creating the\r\n        // peerconnection.\r\n        // TODO: implement refresh via updateIce as described in\r\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\r\n        this.connection.sendIQ(\r\n            $iq({ type: 'get',\r\n                to: this.xmpp.options.hosts.domain })\r\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\r\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\r\n            v2Err => {\r\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\r\n                this.connection.sendIQ(\r\n                    $iq({ type: 'get',\r\n                        to: this.xmpp.options.hosts.domain })\r\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\r\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\r\n                    v1Err => {\r\n                        logger.warn('getting turn credentials failed', v1Err);\r\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\r\n                    }\r\n                );\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\r\n     * Stores results in jvbIceConfig and p2pIceConfig.\r\n     * @param res The response iq.\r\n     * @return {boolean} Whether something was processed from the supplied message.\r\n     */\r\n    onReceiveStunAndTurnCredentials(res) {\r\n        const iceservers = [];\r\n\r\n        $(res).find('>services>service').each((idx, el) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            el = $(el);\r\n            const dict = {};\r\n            const type = el.attr('type');\r\n\r\n            switch (type) {\r\n            case 'stun':\r\n                dict.urls = `stun:${el.attr('host')}`;\r\n                if (el.attr('port')) {\r\n                    dict.urls += `:${el.attr('port')}`;\r\n                }\r\n                iceservers.push(dict);\r\n                break;\r\n            case 'turn':\r\n            case 'turns': {\r\n                dict.urls = `${type}:`;\r\n                dict.username = el.attr('username');\r\n                dict.urls += el.attr('host');\r\n                const port = el.attr('port');\r\n\r\n                if (port) {\r\n                    dict.urls += `:${el.attr('port')}`;\r\n                }\r\n                const transport = el.attr('transport');\r\n\r\n                if (transport && transport !== 'udp') {\r\n                    dict.urls += `?transport=${transport}`;\r\n                }\r\n\r\n                dict.credential = el.attr('password')\r\n                        || dict.credential;\r\n                iceservers.push(dict);\r\n                break;\r\n            }\r\n            }\r\n        });\r\n\r\n        const options = this.xmpp.options;\r\n\r\n        // Shuffle ICEServers for loadbalancing\r\n        for (let i = iceservers.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = iceservers[i];\r\n\r\n            iceservers[i] = iceservers[j];\r\n            iceservers[j] = temp;\r\n        }\r\n\r\n        let filter;\r\n\r\n        if (options.useTurnUdp) {\r\n            filter = s => s.urls.startsWith('turn');\r\n        } else {\r\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\r\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\r\n        }\r\n\r\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\r\n        this.p2pIceConfig.iceServers = iceservers;\r\n\r\n        return iceservers.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the data saved in 'updateLog' in a format to be logged.\r\n     */\r\n    getLog() {\r\n        const data = {};\r\n\r\n        Object.keys(this.sessions).forEach(sid => {\r\n            const session = this.sessions[sid];\r\n            const pc = session.peerconnection;\r\n\r\n            if (pc && pc.updateLog) {\r\n                // FIXME: should probably be a .dump call\r\n                data[`jingle_${sid}`] = {\r\n                    updateLog: pc.updateLog,\r\n                    stats: pc.stats,\r\n                    url: window.location.href\r\n                };\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import { Strophe } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n/**\r\n *  Logs raw stanzas and makes them available for download as JSON\r\n */\r\nclass StropheLogger extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.log = [];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.rawInput = this.logIncoming.bind(this);\r\n        this.connection.rawOutput = this.logOutgoing.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logIncoming(stanza) {\r\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logOutgoing(stanza) {\r\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\r\n\r\n/**\r\n *\r\n */\r\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        this.connection.addHandler(\r\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onRayo(iq) {\r\n        logger.info('Rayo IQ', iq);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param to\r\n     * @param from\r\n     * @param roomName\r\n     * @param roomPass\r\n     * @param focusMucJid\r\n     */\r\n    dial(to, from, roomName, roomPass, focusMucJid) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!focusMucJid) {\r\n                reject(new Error('Internal error!'));\r\n\r\n                return;\r\n            }\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: focusMucJid\r\n            });\r\n\r\n            req.c('dial', {\r\n                xmlns: RAYO_XMLNS,\r\n                to,\r\n                from\r\n            });\r\n            req.c('header', {\r\n                name: 'JvbRoomName',\r\n                value: roomName\r\n            }).up();\r\n\r\n            if (roomPass && roomPass.length) {\r\n                req.c('header', {\r\n                    name: 'JvbRoomPassword',\r\n                    value: roomPass\r\n                }).up();\r\n            }\r\n\r\n            this.connection.sendIQ(\r\n                req,\r\n                result => {\r\n                    logger.info('Dial result ', result);\r\n\r\n                    // eslint-disable-next-line newline-per-chained-call\r\n                    const resource = $(result).find('ref').attr('uri');\r\n\r\n                    this.callResource = resource.substr('xmpp:'.length);\r\n                    logger.info(`Received call resource: ${this.callResource}`);\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    logger.info('Dial error ', error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    hangup() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.callResource) {\r\n                reject(new Error('No call in progress'));\r\n                logger.warn('No call in progress');\r\n\r\n                return;\r\n            }\r\n\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: this.callResource\r\n            });\r\n\r\n            req.c('hangup', {\r\n                xmlns: RAYO_XMLNS\r\n            });\r\n\r\n            this.connection.sendIQ(req, result => {\r\n                logger.info('Hangup result ', result);\r\n                this.callResource = null;\r\n                resolve();\r\n            }, error => {\r\n                logger.info('Hangup error ', error);\r\n                this.callResource = null;\r\n                reject(new Error('Hangup error '));\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* global __filename */\r\n/**\r\n * Strophe logger implementation. Logs from level WARN and above.\r\n */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This is the last HTTP error status captured from Strophe debug logs.\r\n * The purpose of storing it is to distinguish between the network and\r\n * infrastructure reason for connection being dropped (see connectionHandler in\r\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\r\n * which means that the failure could be transient.\r\n *\r\n * FIXME in the latest Strophe (not released on npm) there is API to handle\r\n * particular HTTP errors, but there is no way to learn if the subsequent\r\n * request succeeded in order to tell if the error was one time incident or if\r\n * it was the reason for dropping the connection by Strophe (the connection is\r\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\r\n * details about the reason on why the connection stopped.\r\n *\r\n * @type {number}\r\n */\r\nlet lastErrorStatus = -1;\r\n\r\n/**\r\n * A regular expression used to catch Strophe's log message indicating that the\r\n * last BOSH request was successful. When there is such message seen the\r\n * {@link lastErrorStatus} will be set back to '-1'.\r\n * @type {RegExp}\r\n */\r\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\r\n\r\n/**\r\n * A regular expression used to capture the current value of the BOSH request\r\n * error status (HTTP error code or '0' or something else).\r\n * @type {RegExp}\r\n */\r\nconst lastErrorStatusRegExpr\r\n    = /request errored, status: (\\d+), number of errors: \\d+/;\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n\r\n    Strophe.log = function(level, msg) {\r\n        // Our global handler reports uncaught errors to the stats which may\r\n        // interpret those as partial call failure.\r\n        // Strophe log entry about secondary request timeout does not mean that\r\n        // it's a final failure(the request will be restarted), so we lower it's\r\n        // level here to a warning.\r\n        logger.trace('Strophe', level, msg);\r\n        if (typeof msg === 'string'\r\n                && msg.indexOf('Request ') !== -1\r\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            level = Strophe.LogLevel.WARN;\r\n        }\r\n\r\n        /* eslint-disable no-case-declarations */\r\n        switch (level) {\r\n        case Strophe.LogLevel.DEBUG:\r\n            // The log message which reports successful status is logged on\r\n            // Strophe's DEBUG level.\r\n            if (lastErrorStatus !== -1\r\n                    && resetLastErrorStatusRegExpr.test(msg)) {\r\n                logger.debug('Reset lastErrorStatus');\r\n                lastErrorStatus = -1;\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.WARN:\r\n            logger.warn(`Strophe: ${msg}`);\r\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\r\n\r\n            if (errStatusCapture && errStatusCapture.length === 2) {\r\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\r\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.ERROR:\r\n        case Strophe.LogLevel.FATAL:\r\n            // eslint-disable-next-line no-param-reassign\r\n            msg = `Strophe: ${msg}`;\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\r\n            logger.error(msg);\r\n            break;\r\n        }\r\n\r\n        /* eslint-enable no-case-declarations */\r\n    };\r\n\r\n    /**\r\n     * Returns error status (HTTP error code) of the last BOSH request.\r\n     *\r\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\r\n     * (this is a hack).\r\n     */\r\n    Strophe.getLastErrorStatus = function() {\r\n        return lastErrorStatus;\r\n    };\r\n\r\n    Strophe.getStatusString = function(status) {\r\n        switch (status) {\r\n        case Strophe.Status.BINDREQUIRED:\r\n            return 'BINDREQUIRED';\r\n        case Strophe.Status.ERROR:\r\n            return 'ERROR';\r\n        case Strophe.Status.CONNECTING:\r\n            return 'CONNECTING';\r\n        case Strophe.Status.CONNFAIL:\r\n            return 'CONNFAIL';\r\n        case Strophe.Status.AUTHENTICATING:\r\n            return 'AUTHENTICATING';\r\n        case Strophe.Status.AUTHFAIL:\r\n            return 'AUTHFAIL';\r\n        case Strophe.Status.CONNECTED:\r\n            return 'CONNECTED';\r\n        case Strophe.Status.DISCONNECTED:\r\n            return 'DISCONNECTED';\r\n        case Strophe.Status.DISCONNECTING:\r\n            return 'DISCONNECTING';\r\n        case Strophe.Status.ATTACHED:\r\n            return 'ATTACHED';\r\n        default:\r\n            return 'unknown';\r\n        }\r\n    };\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-disco';\r\n\r\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport browser from '../browser';\r\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport Caps, { parseDiscoInfo } from './Caps';\r\nimport XmppConnection from './XmppConnection';\r\nimport MucConnectionPlugin from './strophe.emuc';\r\nimport JingleConnectionPlugin from './strophe.jingle';\r\nimport initStropheLogger from './strophe.logger';\r\nimport RayoConnectionPlugin from './strophe.rayo';\r\nimport initStropheUtil from './strophe.util';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n* Regex to extract exact error message on jwt error.\r\n*/\r\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\r\n\r\n/**\r\n * Creates XMPP connection.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\r\n * Prosody).\r\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\r\n * @param {string} options.shard - The shard where XMPP connection initially landed.\r\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\r\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\r\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\r\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\r\n * @returns {XmppConnection}\r\n */\r\nfunction createConnection({\r\n    enableWebsocketResume,\r\n    serviceUrl = '/http-bind',\r\n    shard,\r\n    token,\r\n    websocketKeepAlive,\r\n    websocketKeepAliveUrl,\r\n    xmppPing }) {\r\n\r\n    // Append token as URL param\r\n    if (token) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\r\n    }\r\n\r\n    return new XmppConnection({\r\n        enableWebsocketResume,\r\n        serviceUrl,\r\n        websocketKeepAlive,\r\n        websocketKeepAliveUrl,\r\n        xmppPing,\r\n        shard\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\r\n * {@link XmppConnection} wrapper.\r\n *\r\n * @returns {void}\r\n */\r\nfunction initStropheNativePlugins() {\r\n    initStropheUtil();\r\n    initStropheLogger();\r\n}\r\n\r\n// FIXME: remove once we have a default config template. -saghul\r\n/**\r\n * A list of ice servers to use by default for P2P.\r\n */\r\nexport const DEFAULT_STUN_SERVERS = [\r\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\r\n];\r\n\r\n/**\r\n * The name of the field used to recognize a chat message as carrying a JSON\r\n * payload from another endpoint.\r\n * If the json-message of a chat message contains a valid JSON object, and\r\n * the JSON has this key, then it is a valid json-message to be sent.\r\n */\r\nexport const JITSI_MEET_MUC_TYPE = 'type';\r\n\r\n/**\r\n * The feature used by jigasi participants.\r\n * @type {string}\r\n */\r\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\r\n\r\n/**\r\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\r\n * to avoid additional signaling (disco-info).\r\n * @type {string}\r\n */\r\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\r\n\r\n/**\r\n *\r\n */\r\nexport default class XMPP extends Listenable {\r\n    /**\r\n     * FIXME describe all options\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\r\n     * connection with the server.\r\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\r\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\r\n     * module try to resume the session in case the Websocket connection breaks.\r\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\r\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\r\n     * @param token\r\n     */\r\n    constructor(options, token) {\r\n        super();\r\n        this.connection = null;\r\n        this.disconnectInProgress = false;\r\n        this.connectionTimes = {};\r\n        this.options = options;\r\n        this.token = token;\r\n        this.authenticatedUser = false;\r\n\r\n        initStropheNativePlugins();\r\n\r\n        const xmppPing = options.xmppPing || {};\r\n\r\n        // let's ping the main domain (in case a guest one is used for the connection)\r\n        xmppPing.domain = options.hosts.domain;\r\n\r\n        this.connection = createConnection({\r\n            enableWebsocketResume: options.enableWebsocketResume,\r\n\r\n            // FIXME remove deprecated bosh option at some point\r\n            serviceUrl: options.serviceUrl || options.bosh,\r\n            token,\r\n            websocketKeepAlive: options.websocketKeepAlive,\r\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\r\n            xmppPing,\r\n            shard: options.deploymentInfo?.shard\r\n        });\r\n\r\n        // forwards the shard changed event\r\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\r\n            /* eslint-disable camelcase */\r\n            const details = {\r\n                shard_changed: true,\r\n                suspend_time: this.connection.ping.getPingSuspendTime(),\r\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\r\n            };\r\n            /* eslint-enable camelcase */\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.OTHER_ERROR,\r\n                undefined,\r\n                undefined,\r\n                details);\r\n        });\r\n\r\n        this._initStrophePlugins();\r\n\r\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\r\n\r\n        // Initialize features advertised in disco-info\r\n        this.initFeaturesList();\r\n\r\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\r\n        // sounds like they would want that. A problem for them though may be if\r\n        // they wanted to utilize the connected connection in an unload handler\r\n        // of their own. However, it should be fairly easy for them to do that\r\n        // by registering their unload handler before us.\r\n        $(window).on('beforeunload unload', ev => {\r\n            this.disconnect(ev).catch(() => {\r\n                // ignore errors in order to not brake the unload.\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the list of feature advertised through the disco-info\r\n     * mechanism.\r\n     */\r\n    initFeaturesList() {\r\n        // http://xmpp.org/extensions/xep-0167.html#support\r\n        // http://xmpp.org/extensions/xep-0176.html#support\r\n        this.caps.addFeature('urn:xmpp:jingle:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\r\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\r\n\r\n        // Disable RTX on Firefox 83 and older versions because of\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\r\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(94)))) {\r\n            this.caps.addFeature('urn:ietf:rfc:4588');\r\n        }\r\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\r\n            this.caps.addFeature('http://jitsi.org/opus-red');\r\n        }\r\n\r\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\r\n            this.caps.addFeature('http://jitsi.org/remb');\r\n        }\r\n\r\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\r\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\r\n            this.caps.addFeature('http://jitsi.org/tcc');\r\n        }\r\n\r\n        // this is dealt with by SDP O/A so we don't need to announce this\r\n        // XEP-0293\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\r\n        // XEP-0294\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\r\n\r\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\r\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\r\n\r\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\r\n\r\n        // Enable Lipsync ?\r\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\r\n            logger.info('Lip-sync enabled !');\r\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\r\n        }\r\n\r\n        if (this.connection.rayo) {\r\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\r\n        }\r\n\r\n        if (E2EEncryption.isSupported(this.options)) {\r\n            this.caps.addFeature(FEATURE_E2EE, false, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getConnection() {\r\n        return this.connection;\r\n    }\r\n\r\n    /**\r\n     * Receive connection status changes and handles them.\r\n     *\r\n     * @param {Object} credentials\r\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\r\n     * connect method. For example, 'user@xmpp.com'.\r\n     * @param {string} credentials.password - The password passed to the connect\r\n     * method.\r\n     * @param {string} status - One of Strophe's connection status strings.\r\n     * @param {string} [msg] - The connection error message provided by Strophe.\r\n     */\r\n    connectionHandler(credentials = {}, status, msg) {\r\n        const now = window.performance.now();\r\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\r\n\r\n        this.connectionTimes[statusStr] = now;\r\n        logger.log(\r\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\r\n            now);\r\n\r\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            // once connected or attached we no longer need this handle, drop it if it exist\r\n            if (this._sysMessageHandler) {\r\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\r\n                this._sysMessageHandler = null;\r\n            }\r\n\r\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\r\n\r\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\r\n\r\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\r\n            this._resetState();\r\n\r\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\r\n                .then(({ features, identities }) => {\r\n                    if (!features.has(Strophe.NS.PING)) {\r\n                        logger.error(`Ping NOT supported by ${\r\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\r\n                    }\r\n\r\n                    this._processDiscoInfoIdentities(\r\n                        identities, undefined /* when querying we will query for features */);\r\n                })\r\n                .catch(error => {\r\n                    const errmsg = 'Feature discovery error';\r\n\r\n                    GlobalOnErrorHandler.callErrorHandler(\r\n                        new Error(`${errmsg}: ${error}`));\r\n                    logger.error(errmsg, error);\r\n                });\r\n\r\n            // make sure we don't query again\r\n            this.sendDiscoInfo = false;\r\n\r\n            if (credentials.password) {\r\n                this.authenticatedUser = true;\r\n            }\r\n            if (this.connection && this.connection.connected\r\n                && Strophe.getResourceFromJid(this.connection.jid)) {\r\n                // .connected is true while connecting?\r\n                // this.connection.send($pres());\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\r\n                    Strophe.getResourceFromJid(this.connection.jid));\r\n            }\r\n        } else if (status === Strophe.Status.CONNFAIL) {\r\n            if (msg === 'x-strophe-bad-non-anon-jid') {\r\n                this.anonymousConnectionFailed = true;\r\n            } else {\r\n                this.connectionFailed = true;\r\n            }\r\n            this.lastErrorMsg = msg;\r\n            if (msg === 'giving-up') {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\r\n            }\r\n        } else if (status === Strophe.Status.ERROR) {\r\n            this.lastErrorMsg = msg;\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // Stop ping interval\r\n            this.connection.ping.stopInterval();\r\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\r\n            const errMsg = msg || this.lastErrorMsg;\r\n\r\n            if (this.anonymousConnectionFailed) {\r\n                // prompt user for username and password\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\r\n            } else if (this.connectionFailed) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR,\r\n                    errMsg,\r\n                    undefined, /* credentials */\r\n                    this._getConnectionFailedReasonDetails());\r\n            } else if (wasIntentionalDisconnect) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\r\n            } else {\r\n                // XXX if Strophe drops the connection while not being asked to,\r\n                // it means that most likely some serious error has occurred.\r\n                // One currently known case is when a BOSH request fails for\r\n                // more than 4 times. The connection is dropped without\r\n                // supplying a reason(error message/event) through the API.\r\n                logger.error('XMPP connection dropped!');\r\n\r\n                // XXX if the last request error is within 5xx range it means it\r\n                // was a server failure\r\n                const lastErrorStatus = Strophe.getLastErrorStatus();\r\n\r\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.SERVER_ERROR,\r\n                        errMsg || 'server-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                } else {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\r\n                        errMsg || 'connection-dropped-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                }\r\n            }\r\n        } else if (status === Strophe.Status.AUTHFAIL) {\r\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\r\n\r\n            // wrong password or username, prompt user\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\r\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\r\n                credentials);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process received identities.\r\n     * @param {Set<String>} identities The identities to process.\r\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\r\n     * for more features.\r\n     * @private\r\n     */\r\n    _processDiscoInfoIdentities(identities, features) {\r\n        // check for speakerstats\r\n        identities.forEach(identity => {\r\n            if (identity.type === 'av_moderation') {\r\n                this.avModerationComponentAddress = identity.name;\r\n            }\r\n\r\n            if (identity.type === 'speakerstats') {\r\n                this.speakerStatsComponentAddress = identity.name;\r\n            }\r\n\r\n            if (identity.type === 'conference_duration') {\r\n                this.conferenceDurationComponentAddress = identity.name;\r\n            }\r\n\r\n            if (identity.type === 'lobbyrooms') {\r\n                this.lobbySupported = true;\r\n                const processLobbyFeatures = f => {\r\n                    f.forEach(fr => {\r\n                        if (fr.endsWith('#displayname_required')) {\r\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                if (features) {\r\n                    processLobbyFeatures(features);\r\n                } else {\r\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\r\n                        .then(({ features: f }) => processLobbyFeatures(f))\r\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\r\n                }\r\n            }\r\n\r\n            if (identity.type === 'shard') {\r\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\r\n            }\r\n\r\n            if (identity.type === 'region') {\r\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\r\n            }\r\n        });\r\n\r\n        if (this.avModerationComponentAddress\r\n            || this.speakerStatsComponentAddress\r\n            || this.conferenceDurationComponentAddress) {\r\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Parses a raw failure xmpp xml message received on auth failed.\r\n    *\r\n    * @param {string} msg - The raw failure message from xmpp.\r\n    * @returns {string|null} - The parsed message from the raw xmpp message.\r\n    */\r\n    _parseConnectionFailedMessage(msg) {\r\n        if (!msg) {\r\n            return null;\r\n        }\r\n\r\n        const matches = FAILURE_REGEX.exec(msg);\r\n\r\n        return matches ? matches[1] : null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    _connect(jid, password) {\r\n        // connection.connect() starts the connection process.\r\n        //\r\n        // As the connection process proceeds, the user supplied callback will\r\n        // be triggered multiple times with status updates. The callback should\r\n        // take two arguments - the status code and the error condition.\r\n        //\r\n        // The status code will be one of the values in the Strophe.Status\r\n        // constants. The error condition will be one of the conditions defined\r\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\r\n        //\r\n        // The Parameters wait, hold and route are optional and only relevant\r\n        // for BOSH connections. Please see XEP 124 for a more detailed\r\n        // explanation of the optional parameters.\r\n        //\r\n        // Connection status constants for use by the connection handler\r\n        // callback.\r\n        //\r\n        //  Status.ERROR - An error has occurred (websockets specific)\r\n        //  Status.CONNECTING - The connection is currently being made\r\n        //  Status.CONNFAIL - The connection attempt failed\r\n        //  Status.AUTHENTICATING - The connection is authenticating\r\n        //  Status.AUTHFAIL - The authentication attempt failed\r\n        //  Status.CONNECTED - The connection has succeeded\r\n        //  Status.DISCONNECTED - The connection has been terminated\r\n        //  Status.DISCONNECTING - The connection is currently being terminated\r\n        //  Status.ATTACHED - The connection has been attached\r\n\r\n        this._resetState();\r\n\r\n        // we want to send this only on the initial connect\r\n        this.sendDiscoInfo = true;\r\n\r\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\r\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\r\n                this._onSystemMessage.bind(this),\r\n                null,\r\n                'message'\r\n            );\r\n        } else {\r\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\r\n        }\r\n\r\n        this.connection.connect(\r\n            jid,\r\n            password,\r\n            this.connectionHandler.bind(this, {\r\n                jid,\r\n                password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Receives system messages during the connect/login process and checks for services or\r\n     * @param msg The received message.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onSystemMessage(msg) {\r\n        // proceed only if the message has any of the expected information\r\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.sendDiscoInfo = false;\r\n\r\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\r\n\r\n        const { features, identities } = parseDiscoInfo(msg);\r\n\r\n        this._processDiscoInfoIdentities(identities, features);\r\n\r\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\r\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\r\n            this._sysMessageHandler = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach to existing connection. Can be used for optimizations. For\r\n     * example: if the connection is created on the server we can attach to it\r\n     * and start using it.\r\n     *\r\n     * @param options {object} connecting options - rid, sid, jid and password.\r\n     */\r\n    attach(options) {\r\n        this._resetState();\r\n\r\n        // we want to send this only on the initial connect\r\n        this.sendDiscoInfo = true;\r\n\r\n        const now = this.connectionTimes.attaching = window.performance.now();\r\n\r\n        logger.log('(TIME) Strophe Attaching:\\t', now);\r\n        this.connection.attach(options.jid, options.sid,\r\n            parseInt(options.rid, 10) + 1,\r\n            this.connectionHandler.bind(this, {\r\n                jid: options.jid,\r\n                password: options.password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Resets any state/flag before starting a new connection.\r\n     * @private\r\n     */\r\n    _resetState() {\r\n        this.anonymousConnectionFailed = false;\r\n        this.connectionFailed = false;\r\n        this.lastErrorMsg = undefined;\r\n        this.disconnectInProgress = undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    connect(jid, password) {\r\n        if (!jid) {\r\n            const { anonymousdomain, domain } = this.options.hosts;\r\n            let configDomain = anonymousdomain || domain;\r\n\r\n            // Force authenticated domain if room is appended with '?login=true'\r\n            // or if we're joining with the token\r\n\r\n            // FIXME Do not rely on window.location because (1) React Native\r\n            // does not have a window.location by default and (2) here we cannot\r\n            // know for sure that query/search has not be stripped from\r\n            // window.location by the time the following executes.\r\n            const { location } = window;\r\n\r\n            if (anonymousdomain) {\r\n                const search = location && location.search;\r\n\r\n                if ((search && search.indexOf('login=true') !== -1)\r\n                        || this.token) {\r\n                    configDomain = domain;\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            jid = configDomain || (location && location.hostname);\r\n        }\r\n\r\n        return this._connect(jid, password);\r\n    }\r\n\r\n    /**\r\n     * Joins or creates a muc with the provided jid, created from the passed\r\n     * in room name and muc host and onCreateResource result.\r\n     *\r\n     * @param {string} roomName - The name of the muc to join.\r\n     * @param {Object} options - Configuration for how to join the muc.\r\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\r\n     * is to be added to the jid.\r\n     * @returns {Promise} Resolves with an instance of a strophe muc.\r\n     */\r\n    createRoom(roomName, options, onCreateResource) {\r\n        // There are cases (when using subdomain) where muc can hold an uppercase part\r\n        let roomjid = `${this.getRoomJid(roomName, options.customDomain)}/`;\r\n\r\n        const mucNickname = onCreateResource\r\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\r\n            : RandomUtil.randomHexString(8).toLowerCase();\r\n\r\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\r\n        roomjid += mucNickname;\r\n\r\n        return this.connection.emuc.createRoom(roomjid, null, options);\r\n    }\r\n\r\n    /**\r\n     * Returns the room JID based on the passed room name and domain.\r\n     *\r\n     * @param {string} roomName - The room name.\r\n     * @param {string} domain - The domain.\r\n     * @returns {string} - The room JID.\r\n     */\r\n    getRoomJid(roomName, domain) {\r\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\r\n    }\r\n\r\n    /**\r\n     * Check if a room with the passed JID is already created.\r\n     *\r\n     * @param {string} roomJid - The JID of the room.\r\n     * @returns {boolean}\r\n     */\r\n    isRoomCreated(roomName, domain) {\r\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant associated with the Strophe connection.\r\n     *\r\n     * @returns {string} The jid of the participant.\r\n     */\r\n    getJid() {\r\n        return this.connection.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.jingle.\r\n     * @returns {Object}\r\n     */\r\n    getJingleLog() {\r\n        const jingle = this.connection.jingle;\r\n\r\n\r\n        return jingle ? jingle.getLog() : {};\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.\r\n     */\r\n    getXmppLog() {\r\n        return (this.connection.logger || {}).log || null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dial(...args) {\r\n        this.connection.rayo.dial(...args);\r\n    }\r\n\r\n    /**\r\n     * Pings the server.\r\n     * @param timeout how many ms before a timeout should occur.\r\n     * @returns {Promise} resolved on ping success and reject on an error or\r\n     * a timeout.\r\n     */\r\n    ping(timeout) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getSessions() {\r\n        return this.connection.jingle.sessions;\r\n    }\r\n\r\n    /**\r\n     * Disconnects this from the XMPP server (if this is connected).\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\r\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\r\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n     */\r\n    disconnect(ev) {\r\n        if (this.disconnectInProgress) {\r\n            return this.disconnectInProgress;\r\n        } else if (!this.connection) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.disconnectInProgress = new Promise(resolve => {\r\n            const disconnectListener = (credentials, status) => {\r\n                if (status === Strophe.Status.DISCONNECTED) {\r\n                    resolve();\r\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n                }\r\n            };\r\n\r\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n        });\r\n\r\n        this._cleanupXmppConnection(ev);\r\n\r\n        return this.disconnectInProgress;\r\n    }\r\n\r\n    /**\r\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\r\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\r\n     * (e.g. beforeunload, unload).\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cleanupXmppConnection(ev) {\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\r\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\r\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\r\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\r\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\r\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\r\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\r\n        // possible.\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n\r\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\r\n            const evType = ev.type;\r\n\r\n            if (evType === 'beforeunload' || evType === 'unload') {\r\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\r\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\r\n                // depending on whether we want to run with it for some time.\r\n                this.connection.options.sync = true;\r\n\r\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\r\n                if (this.connection.sendUnavailableBeacon()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.connection.disconnect();\r\n\r\n        if (this.connection.options.sync !== true) {\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    _initStrophePlugins() {\r\n        const iceConfig = {\r\n            jvb: { iceServers: [ ] },\r\n            p2p: { iceServers: [ ] }\r\n        };\r\n\r\n        const p2pStunServers = (this.options.p2p\r\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\r\n\r\n        if (Array.isArray(p2pStunServers)) {\r\n            logger.info('P2P STUN servers: ', p2pStunServers);\r\n            iceConfig.p2p.iceServers = p2pStunServers;\r\n        }\r\n\r\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\r\n            logger.info('P2P ICE transport policy: ',\r\n                this.options.p2p.iceTransportPolicy);\r\n\r\n            iceConfig.p2p.iceTransportPolicy\r\n                = this.options.p2p.iceTransportPolicy;\r\n        }\r\n\r\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\r\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\r\n    }\r\n\r\n    /**\r\n     * Returns details about connection failure. Shard change or is it after\r\n     * suspend.\r\n     * @returns {object} contains details about a connection failure.\r\n     * @private\r\n     */\r\n    _getConnectionFailedReasonDetails() {\r\n        const details = {};\r\n\r\n        // check for moving between shard if information is available\r\n        if (this.options.deploymentInfo\r\n            && this.options.deploymentInfo.shard\r\n            && this.connection.lastResponseHeaders) {\r\n\r\n            // split headers by line\r\n            const headersArr = this.connection.lastResponseHeaders\r\n                .trim().split(/[\\r\\n]+/);\r\n            const headers = {};\r\n\r\n            headersArr.forEach(line => {\r\n                const parts = line.split(': ');\r\n                const header = parts.shift();\r\n                const value = parts.join(': ');\r\n\r\n                headers[header] = value;\r\n            });\r\n\r\n            /* eslint-disable camelcase */\r\n            details.shard_changed\r\n                = this.options.deploymentInfo.shard\r\n                    !== headers['x-jitsi-shard'];\r\n            /* eslint-enable camelcase */\r\n        }\r\n\r\n        /* eslint-disable camelcase */\r\n        // check for possible suspend\r\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\r\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\r\n        /* eslint-enable camelcase */\r\n\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * Notifies speaker stats component if available that we are the new\r\n     * dominant speaker in the conference.\r\n     * @param {String} roomJid - The room jid where the speaker event occurred.\r\n     */\r\n    sendDominantSpeakerEvent(roomJid) {\r\n        // no speaker stats component advertised\r\n        if (!this.speakerStatsComponentAddress || !roomJid) {\r\n            return;\r\n        }\r\n\r\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\r\n\r\n        msg.c('speakerstats', {\r\n            xmlns: 'http://jitsi.org/jitmeet',\r\n            room: roomJid })\r\n            .up();\r\n\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\r\n     * parsing it and checking if it has a field called 'type'.\r\n     *\r\n     * @param {string} jsonString check if this string is a valid json string\r\n     * and contains the special structure.\r\n     * @returns {boolean, object} if given object is a valid JSON string, return\r\n     * the json object. Otherwise, returns false.\r\n     */\r\n    tryParseJSONAndVerify(jsonString) {\r\n        // ignore empty strings, like message errors\r\n        if (!jsonString) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const json = JSON.parse(jsonString);\r\n\r\n            // Handle non-exception-throwing cases:\r\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\r\n            // hence the type-checking,\r\n            // but... JSON.parse(null) returns null, and\r\n            // typeof null === \"object\",\r\n            // so we must check for that, too.\r\n            // Thankfully, null is falsey, so this suffices:\r\n            if (json && typeof json === 'object') {\r\n                const type = json[JITSI_MEET_MUC_TYPE];\r\n\r\n                if (typeof type !== 'undefined') {\r\n                    return json;\r\n                }\r\n\r\n                logger.debug('parsing valid json but does not have correct '\r\n                    + 'structure', 'topic: ', type);\r\n            }\r\n        } catch (e) {\r\n            logger.error(`Error parsing json ${jsonString}`, e);\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A private message is received, message that is not addressed to the muc.\r\n     * We expect private message coming from plugins component if it is\r\n     * enabled and running.\r\n     *\r\n     * @param {string} msg - The message.\r\n     */\r\n    _onPrivateMessage(msg) {\r\n        const from = msg.getAttribute('from');\r\n\r\n        if (!(from === this.speakerStatsComponentAddress\r\n            || from === this.conferenceDurationComponentAddress\r\n            || from === this.avModerationComponentAddress)) {\r\n            return true;\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message')\r\n            .text();\r\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        if (!parsedJson) {\r\n            return true;\r\n        }\r\n\r\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\r\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\r\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\r\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\r\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\r\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import {\r\n    CONNECTION_DISCONNECTED,\r\n    CONNECTION_ESTABLISHED,\r\n    CONNECTION_FAILED\r\n} from './JitsiConnectionEvents';\r\nimport XMPP from './modules/xmpp/xmpp';\r\n\r\n/**\r\n * @typedef {Object} UpgradeRoleError\r\n *\r\n * @property {JitsiConnectionErrors} [connectionError] - One of\r\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\r\n * XMPP server.\r\n * @property {String} [authenticationError] - One of XMPP error conditions\r\n * returned by Jicofo on authentication attempt. See\r\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\r\n * @property {String} [message] - More details about the error.\r\n * @property {Object} [credentials] - The credentials that failed the\r\n * authentication.\r\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\r\n * that failed the authentication.\r\n * @property {string} [credentials.password] - The password part of the\r\n * credentials that failed the authentication.\r\n *\r\n * NOTE If neither one of the errors is present, then the operation has been\r\n * canceled.\r\n */\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\n/**\r\n * Connects to the XMPP server using the specified credentials and contacts\r\n * Jicofo in order to obtain a session ID (which is then stored in the local\r\n * storage). The user's role of the parent conference will be upgraded to\r\n * moderator (by Jicofo). It's also used to join the conference when starting\r\n * from anonymous domain and only authenticated users are allowed to create new\r\n * rooms.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.id - XMPP user's ID to log in. For example,\r\n * user@xmpp-server.com.\r\n * @param {string} options.password - XMPP user's password to log in with.\r\n * @param {string} [options.roomPassword] - The password to join the MUC with.\r\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\r\n * into the XMPP server was successful. The next step will be to obtain a new\r\n * session ID from Jicofo and join the MUC using it which will effectively\r\n * upgrade the user's role to moderator.\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the specified XMPP user finishes and\r\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process. If the process finishes successfully, the session ID has been stored\r\n * in the settings and the <tt>thenable</tt> is resolved. If the process\r\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\r\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\r\n * <tt>authenticationError</tt> property set depending on which of the steps has\r\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\r\n * thenable will be rejected with an empty object (i.e. no error property will\r\n * be set on the rejection reason).\r\n */\r\nexport default function authenticateAndUpgradeRole({\r\n    // 1. Log the specified XMPP user in.\r\n    id,\r\n    password,\r\n    onCreateResource,\r\n\r\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\r\n    //    successfully logged in.\r\n    onLoginSuccessful,\r\n\r\n    // 3. Join the MUC.\r\n    roomPassword\r\n}) {\r\n    let canceled = false;\r\n    let rejectPromise;\r\n    let xmpp = new XMPP(this.connection.options);\r\n\r\n    const process = new Promise((resolve, reject) => {\r\n        // The process is represented by a Thenable with a cancel method. The\r\n        // Thenable is implemented using Promise and the cancel using the\r\n        // Promise's reject function.\r\n        rejectPromise = reject;\r\n\r\n\r\n        xmpp.addListener(\r\n            CONNECTION_DISCONNECTED,\r\n            () => {\r\n                xmpp = undefined;\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_ESTABLISHED,\r\n            () => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                // Let the caller know that the XMPP login was successful.\r\n                onLoginSuccessful && onLoginSuccessful();\r\n\r\n                // Now authenticate with Jicofo and get a new session ID.\r\n                const room = xmpp.createRoom(\r\n                    this.options.name,\r\n                    this.options.config,\r\n                    onCreateResource\r\n                );\r\n\r\n                room.moderator.authenticate()\r\n                    .then(() => {\r\n                        xmpp && xmpp.disconnect();\r\n\r\n                        if (canceled) {\r\n                            return;\r\n                        }\r\n\r\n                        // At this point we should have the new session ID\r\n                        // stored in the settings. Jicofo will allow to join the\r\n                        // room.\r\n                        this.join(roomPassword);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(({ error, message }) => {\r\n                        xmpp.disconnect();\r\n\r\n                        reject({\r\n                            authenticationError: error,\r\n                            message\r\n                        });\r\n                    });\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_FAILED,\r\n            (connectionError, message, credentials) => {\r\n                reject({\r\n                    connectionError,\r\n                    credentials,\r\n                    message\r\n                });\r\n                xmpp = undefined;\r\n            });\r\n\r\n        canceled || xmpp.connect(id, password);\r\n    });\r\n\r\n    /**\r\n     * Cancels the process, if it's in progress, of authenticating and upgrading\r\n     * the role of the local participant/user.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    process.cancel = () => {\r\n        canceled = true;\r\n        rejectPromise({});\r\n        xmpp && xmpp.disconnect();\r\n    };\r\n\r\n    return process;\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\r\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\r\n * The preferred codec is published in presence which is then used by the other endpoints in the\r\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\r\n * connections.\r\n */\r\nexport class CodecSelection {\r\n    /**\r\n     * Creates a new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference the conference instance\r\n     * @param {*} options\r\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\r\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\r\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\r\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\r\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\r\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\r\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\r\n     */\r\n    constructor(conference, options) {\r\n        this.conference = conference;\r\n        this.options = options;\r\n\r\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\r\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\r\n            ? undefined\r\n            : this._getCodecMimeType(options.disabledCodec);\r\n\r\n        // Check if the codec values passed are valid.\r\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\r\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\r\n\r\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\r\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\r\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\r\n            P2P: ${this.p2pPreferredCodec}`);\r\n\r\n        // Do not prefer VP9 on Firefox because of the following bug.\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\r\n        if (browser.isFirefox() && this.jvbPreferredCodec === CodecMimeType.VP9) {\r\n            this.jvbPreferredCodec = CodecMimeType.VP8;\r\n        }\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            () => this._selectPreferredCodec());\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            () => this._selectPreferredCodec());\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStared(session));\r\n    }\r\n\r\n    /**\r\n     * Checks if a given string is a valid video codec mime type.\r\n     *\r\n     * @param {string} codec the codec string that needs to be validated.\r\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\r\n     * @private\r\n     */\r\n    _getCodecMimeType(codec) {\r\n        if (typeof codec === 'string') {\r\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given codec is supported by the browser.\r\n     *\r\n     * @param {CodecMimeType} preferredCodec codec to be checked.\r\n     * @returns {boolean} true if the given codec is supported, false otherwise.\r\n     * @private\r\n     */\r\n    _isCodecSupported(preferredCodec) {\r\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\r\n        // It is safe to assume both of them support all the codecs supported by Chrome.\r\n        if (browser.isFirefox() || browser.isReactNative()) {\r\n            return true;\r\n        }\r\n\r\n        return window.RTCRtpReceiver\r\n            && window.RTCRtpReceiver.getCapabilities\r\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\r\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\r\n     * configured on the media session that is newly created.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession media session that started.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onMediaSessionStared(mediaSession) {\r\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\r\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\r\n            ? this.disabledCodec\r\n            : null;\r\n\r\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\r\n    }\r\n\r\n    /**\r\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\r\n     * published by the remote participants in their presence.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\r\n     * @param {CodecMimeType} preferredCodec preferred codec.\r\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\r\n     */\r\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\r\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\r\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\r\n        let selectedCodec = currentCodec;\r\n\r\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\r\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\r\n\r\n            for (const remote of remoteParticipants) {\r\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\r\n                const peerCodec = peerMediaInfo?.codecType;\r\n\r\n                // We do not want Firefox to switch to VP9 because of the following bug.\r\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=1492500.\r\n                if (peerCodec\r\n                    && peerCodec !== currentCodec\r\n                    && !(browser.isFirefox() && peerCodec === CodecMimeType.VP9)) {\r\n                    selectedCodec = peerCodec;\r\n                }\r\n            }\r\n        }\r\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\r\n    }\r\n\r\n    /**\r\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\r\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\r\n     * or leaves the call.\r\n     *\r\n     * @returns {CodecMimeType} preferred codec.\r\n     */\r\n    getPreferredCodec() {\r\n        return this.jvbPreferredCodec;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\r\n * with the videobridge.\r\n */\r\nexport default class BridgeChannel {\r\n    /**\r\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\r\n     * instance, or creates a WebSocket connection with the videobridge.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\r\n     */\r\n    constructor(peerconnection, wsUrl, emitter) {\r\n        if (!peerconnection && !wsUrl) {\r\n            throw new TypeError('At least peerconnection or wsUrl must be given');\r\n        } else if (peerconnection && wsUrl) {\r\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\r\n        }\r\n\r\n        if (peerconnection) {\r\n            logger.debug('constructor() with peerconnection');\r\n        } else {\r\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\r\n        }\r\n\r\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\r\n        // @type {RTCDataChannel|WebSocket}\r\n        this._channel = null;\r\n\r\n        // @type {EventEmitter}\r\n        this._eventEmitter = emitter;\r\n\r\n        // Whether a RTCDataChannel or WebSocket is internally used.\r\n        // @type {string} \"datachannel\" / \"websocket\"\r\n        this._mode = null;\r\n\r\n        // Indicates whether the connection retries are enabled or not.\r\n        this._areRetriesEnabled = false;\r\n\r\n        // Indicates whether the connection was closed from the client or not.\r\n        this._closedFromClient = false;\r\n\r\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\r\n        // event.\r\n        if (peerconnection) {\r\n            const datachannel\r\n                = peerconnection.createDataChannel(\r\n                    'JVB data channel', {\r\n                        protocol: 'http://jitsi.org/protocols/colibri'\r\n                    });\r\n\r\n            // Handle the RTCDataChannel.\r\n            this._handleChannel(datachannel);\r\n            this._mode = 'datachannel';\r\n\r\n        // Otherwise create a WebSocket connection.\r\n        } else if (wsUrl) {\r\n            this._areRetriesEnabled = true;\r\n            this._wsUrl = wsUrl;\r\n            this._initWebSocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the web socket channel.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initWebSocket() {\r\n        // Create a WebSocket instance.\r\n        const ws = new WebSocket(this._wsUrl);\r\n\r\n        // Handle the WebSocket.\r\n        this._handleChannel(ws);\r\n        this._mode = 'websocket';\r\n    }\r\n\r\n    /**\r\n     * Starts the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _startConnectionRetries() {\r\n        let timeoutS = 1;\r\n\r\n        const reload = () => {\r\n            if (this.isOpen()) {\r\n                return;\r\n            }\r\n            this._initWebSocket(this._wsUrl);\r\n            timeoutS = Math.min(timeoutS * 2, 60);\r\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n        };\r\n\r\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n    }\r\n\r\n    /**\r\n     * Stops the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _stopConnectionRetries() {\r\n        if (this._retryTimeout) {\r\n            clearTimeout(this._retryTimeout);\r\n            this._retryTimeout = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries to establish the websocket connection after the connection was closed by the server.\r\n     *\r\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\r\n     * @returns {void}\r\n     */\r\n    _retryWebSocketConnection(closeEvent) {\r\n        if (!this._areRetriesEnabled) {\r\n            return;\r\n        }\r\n        const { code, reason } = closeEvent;\r\n\r\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\r\n        this._areRetriesEnabled = false;\r\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n            this._stopConnectionRetries();\r\n            this._areRetriesEnabled = true;\r\n        });\r\n        this._startConnectionRetries();\r\n    }\r\n\r\n    /**\r\n     * The channel mode.\r\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened channel.\r\n     */\r\n    close() {\r\n        this._closedFromClient = true;\r\n        this._stopConnectionRetries();\r\n        this._areRetriesEnabled = false;\r\n        if (this._channel) {\r\n            try {\r\n                this._channel.close();\r\n            } catch (error) {} // eslint-disable-line no-empty\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\r\n     * open.\r\n     * @return {boolean}\r\n     */\r\n    isOpen() {\r\n        return this._channel && (this._channel.readyState === 'open'\r\n            || this._channel.readyState === WebSocket.OPEN);\r\n    }\r\n\r\n    /**\r\n     * Sends local stats via the bridge channel.\r\n     * @param {Object} payload The payload of the message.\r\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\r\n     */\r\n    sendEndpointStatsMessage(payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointStats',\r\n            ...payload\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends message via the channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     * message. If \"\" the message will be sent to all participants.\r\n     * @param  {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendMessage(to, payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointMessage',\r\n            msgPayload: payload,\r\n            to\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"lastN value changed\" message via the channel.\r\n     * @param {number} value The new value for lastN. -1 means unlimited.\r\n     */\r\n    sendSetLastNMessage(value) {\r\n        logger.log(`Sending lastN=${value}.`);\r\n\r\n        this._send({\r\n            colibriClass: 'LastNChangedEvent',\r\n            lastN: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"selected endpoints changed\" message via the channel.\r\n     *\r\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendSelectedEndpointsMessage(endpointIds) {\r\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\r\n\r\n        this._send({\r\n            colibriClass: 'SelectedEndpointsChangedEvent',\r\n            selectedEndpoints: endpointIds\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"receiver video constraint\" message via the channel.\r\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\r\n     * in pixels, this receiver is willing to receive\r\n     */\r\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\r\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraint',\r\n            maxFrameHeight: maxFrameHeightPixels\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\r\n     *\r\n     * @param {ReceiverVideoConstraints} constraints video constraints.\r\n     */\r\n    sendNewReceiverVideoConstraintsMessage(constraints) {\r\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraints',\r\n            ...constraints\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\r\n     *\r\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\r\n     */\r\n    sendVideoTypeMessage(videoType) {\r\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\r\n        this._send({\r\n            colibriClass: 'VideoTypeMessage',\r\n            videoType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set events on the given RTCDataChannel or WebSocket instance.\r\n     */\r\n    _handleChannel(channel) {\r\n        const emitter = this._eventEmitter;\r\n\r\n        channel.onopen = () => {\r\n            logger.info(`${this._mode} channel opened`);\r\n\r\n            // Code sample for sending string and/or binary data.\r\n            // Sends string message to the bridge:\r\n            //     channel.send(\"Hello bridge!\");\r\n            // Sends 12 bytes binary message to the bridge:\r\n            //     channel.send(new ArrayBuffer(12));\r\n\r\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\r\n        };\r\n\r\n        channel.onerror = event => {\r\n            // WS error events contain no information about the failure (this is available in the onclose event) and\r\n            // the event references the WS object itself, which causes hangs on mobile.\r\n            if (this._mode !== 'websocket') {\r\n                logger.error(`Channel error: ${event.message}`);\r\n            }\r\n        };\r\n\r\n        channel.onmessage = ({ data }) => {\r\n            // JSON object.\r\n            let obj;\r\n\r\n            try {\r\n                obj = JSON.parse(data);\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Failed to parse channel message as JSON: ', data, error);\r\n\r\n                return;\r\n            }\r\n\r\n            const colibriClass = obj.colibriClass;\r\n\r\n            switch (colibriClass) {\r\n            case 'DominantSpeakerEndpointChangeEvent': {\r\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\r\n\r\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\r\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\r\n                break;\r\n            }\r\n            case 'EndpointConnectivityStatusChangeEvent': {\r\n                const endpoint = obj.endpoint;\r\n                const isActive = obj.active === 'true';\r\n\r\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\r\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointMessage': {\r\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointStats': {\r\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\r\n                const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\r\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\r\n\r\n                break;\r\n            }\r\n            case 'SenderVideoConstraints': {\r\n                const videoConstraints = obj.videoConstraints;\r\n\r\n                if (videoConstraints) {\r\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\r\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\r\n                }\r\n                break;\r\n            }\r\n            case 'ServerHello': {\r\n                logger.info(`Received ServerHello, version=${obj.version}.`);\r\n                break;\r\n            }\r\n            default: {\r\n                logger.debug('Channel JSON-formatted message: ', obj);\r\n\r\n                // The received message appears to be appropriately formatted\r\n                // (i.e. is a JSON object which assigns a value to the\r\n                // mandatory property colibriClass) so don't just swallow it,\r\n                // expose it to public consumption.\r\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\r\n            }\r\n            }\r\n        };\r\n\r\n        channel.onclose = event => {\r\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\r\n\r\n            if (this._mode === 'websocket') {\r\n                if (!this._closedFromClient) {\r\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\r\n                    this._retryWebSocketConnection(event);\r\n                }\r\n            }\r\n\r\n            // Remove the channel.\r\n            this._channel = null;\r\n        };\r\n\r\n        // Store the channel.\r\n        this._channel = channel;\r\n    }\r\n\r\n    /**\r\n     * Sends passed object via the channel.\r\n     * @param {object} jsonObject The object that will be sent.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    _send(jsonObject) {\r\n        const channel = this._channel;\r\n\r\n        if (!this.isOpen()) {\r\n            logger.error('Bridge Channel send: no opened channel.');\r\n            throw new Error('No opened channel');\r\n        }\r\n\r\n        channel.send(JSON.stringify(jsonObject));\r\n    }\r\n}\r\n","/* global\r\n          __filename,\r\n          MediaStreamTrack,\r\n          RTCIceCandidate: true,\r\n          RTCPeerConnection,\r\n          RTCSessionDescription: true\r\n*/\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport Resolutions from '../../service/RTC/Resolutions';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport SDPUtil from '../sdp/SDPUtil';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport screenObtainer from './ScreenObtainer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Require adapter only for certain browsers. This is being done for\r\n// react-native, which has its own shims, and while browsers are being migrated\r\n// over to use adapter's shims.\r\nif (browser.usesAdapter()) {\r\n    require('webrtc-adapter');\r\n}\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\r\n\r\n/**\r\n * Default MediaStreamConstraints to use for calls to getUserMedia.\r\n *\r\n * @private\r\n */\r\nconst DEFAULT_CONSTRAINTS = {\r\n    video: {\r\n        height: {\r\n            ideal: 720,\r\n            max: 720,\r\n            min: 180\r\n        },\r\n        width: {\r\n            ideal: 1280,\r\n            max: 1280,\r\n            min: 320\r\n        }\r\n    }\r\n};\r\n\r\n// Currently audio output device change is supported only in Chrome and\r\n// default output always has 'default' device ID\r\nlet audioOutputDeviceId = 'default'; // default device\r\n// whether user has explicitly set a device to use\r\nlet audioOutputChanged = false;\r\n\r\n// Disables all audio processing\r\nlet disableAP = false;\r\n\r\n// Disables Acoustic Echo Cancellation\r\nlet disableAEC = false;\r\n\r\n// Disables Noise Suppression\r\nlet disableNS = false;\r\n\r\n// Disables Automatic Gain Control\r\nlet disableAGC = false;\r\n\r\n// Enables stereo.\r\nlet stereo = null;\r\n\r\nconst featureDetectionAudioEl = document.createElement('audio');\r\nconst isAudioOutputDeviceChangeAvailable\r\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\r\n\r\nlet availableDevices = [];\r\nlet availableDevicesPollTimer;\r\n\r\n/**\r\n * An empty function.\r\n */\r\nfunction emptyFuncton() {\r\n    // no-op\r\n}\r\n\r\n/**\r\n * Creates a constraints object to be passed into a call to getUserMedia.\r\n *\r\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\r\n * @param {Object} options - Various values to be added to the constraints.\r\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\r\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\r\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\r\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\r\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\r\n * @private\r\n * @returns {Object}\r\n */\r\nfunction getConstraints(um = [], options = {}) {\r\n    // Create a deep copy of the constraints to avoid any modification of\r\n    // the passed in constraints object.\r\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        // The \"resolution\" option is a shortcut and takes precendence.\r\n        if (Resolutions[options.resolution]) {\r\n            const r = Resolutions[options.resolution];\r\n\r\n            constraints.video.height = { ideal: r.height };\r\n            constraints.video.width = { ideal: r.width };\r\n        }\r\n\r\n        if (!constraints.video) {\r\n            constraints.video = {};\r\n        }\r\n\r\n        // Override the constraints on Safari because of the following webkit bug.\r\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\r\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\r\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\r\n        if (browser.isWebKitBased()) {\r\n            if (constraints.video.height && constraints.video.height.ideal) {\r\n                constraints.video.height = { ideal: constraints.video.height.ideal };\r\n            } else {\r\n                logger.warn('Ideal camera height missing, camera may not start properly');\r\n            }\r\n            if (constraints.video.width && constraints.video.width.ideal) {\r\n                constraints.video.width = { ideal: constraints.video.width.ideal };\r\n            } else {\r\n                logger.warn('Ideal camera width missing, camera may not start properly');\r\n            }\r\n        }\r\n        if (options.cameraDeviceId) {\r\n            constraints.video.deviceId = options.cameraDeviceId;\r\n        } else {\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            constraints.video.facingMode = facingMode;\r\n        }\r\n    } else {\r\n        constraints.video = false;\r\n    }\r\n\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\r\n            constraints.audio = {};\r\n        }\r\n\r\n        constraints.audio = {\r\n            autoGainControl: !disableAGC && !disableAP,\r\n            deviceId: options.micDeviceId,\r\n            echoCancellation: !disableAEC && !disableAP,\r\n            noiseSuppression: !disableNS && !disableAP\r\n        };\r\n\r\n        if (stereo) {\r\n            Object.assign(constraints.audio, { channelCount: 2 });\r\n        }\r\n    } else {\r\n        constraints.audio = false;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Updates the granted permissions based on the options we requested and the\r\n * streams we received.\r\n * @param um the options we requested to getUserMedia.\r\n * @param stream the stream we received from calling getUserMedia.\r\n */\r\nfunction updateGrantedPermissions(um, stream) {\r\n    const audioTracksReceived\r\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\r\n    const videoTracksReceived\r\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\r\n    const grantedPermissions = {};\r\n\r\n    if (um.indexOf('video') !== -1) {\r\n        grantedPermissions.video = videoTracksReceived;\r\n    }\r\n    if (um.indexOf('audio') !== -1) {\r\n        grantedPermissions.audio = audioTracksReceived;\r\n    }\r\n\r\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\r\n}\r\n\r\n/**\r\n * Checks if new list of available media devices differs from previous one.\r\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\r\n * @returns {boolean} - true if list is different, false otherwise.\r\n */\r\nfunction compareAvailableMediaDevices(newDevices) {\r\n    if (newDevices.length !== availableDevices.length) {\r\n        return true;\r\n    }\r\n\r\n    /* eslint-disable newline-per-chained-call */\r\n\r\n    return (\r\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\r\n            !== availableDevices\r\n                .map(mediaDeviceInfoToJSON).sort().join(''));\r\n\r\n    /* eslint-enable newline-per-chained-call */\r\n\r\n    /**\r\n     *\r\n     * @param info\r\n     */\r\n    function mediaDeviceInfoToJSON(info) {\r\n        return JSON.stringify({\r\n            kind: info.kind,\r\n            deviceId: info.deviceId,\r\n            groupId: info.groupId,\r\n            label: info.label,\r\n            facing: info.facing\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends analytics event with the passed device list.\r\n *\r\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\r\n * available devices.\r\n * @returns {void}\r\n */\r\nfunction sendDeviceListToAnalytics(deviceList) {\r\n    const audioInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audioinput').length;\r\n    const audioOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\r\n    const videoInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videoinput').length;\r\n    const videoOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videooutput').length;\r\n\r\n    deviceList.forEach(device => {\r\n        const attributes = {\r\n            'audio_input_device_count': audioInputDeviceCount,\r\n            'audio_output_device_count': audioOutputDeviceCount,\r\n            'video_input_device_count': videoInputDeviceCount,\r\n            'video_output_device_count': videoOutputDeviceCount,\r\n            'device_id': device.deviceId,\r\n            'device_group_id': device.groupId,\r\n            'device_kind': device.kind,\r\n            'device_label': device.label\r\n        };\r\n\r\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Update known devices.\r\n *\r\n * @param {Array<Object>} pds - The new devices.\r\n * @returns {void}\r\n *\r\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\r\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\r\n * a row, which can cause async post devicechange processing to collide.\r\n */\r\nfunction updateKnownDevices(pds) {\r\n    if (compareAvailableMediaDevices(pds)) {\r\n        onMediaDevicesListChanged(pds);\r\n    }\r\n}\r\n\r\n/**\r\n * Event handler for the 'devicechange' event.\r\n *\r\n * @param {MediaDeviceInfo[]} devices - list of media devices.\r\n * @emits RTCEvents.DEVICE_LIST_CHANGED\r\n */\r\nfunction onMediaDevicesListChanged(devicesReceived) {\r\n    availableDevices = devicesReceived.slice(0);\r\n    logger.info('list of media devices has changed:', availableDevices);\r\n\r\n    sendDeviceListToAnalytics(availableDevices);\r\n\r\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\r\n\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass RTCUtils extends Listenable {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super(eventEmitter);\r\n    }\r\n\r\n    /**\r\n     * Depending on the browser, sets difference instance methods for\r\n     * interacting with user media and adds methods to native WebRTC-related\r\n     * objects. Also creates an instance variable for peer connection\r\n     * constraints.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {void}\r\n     */\r\n    init(options = {}) {\r\n        if (typeof options.disableAEC === 'boolean') {\r\n            disableAEC = options.disableAEC;\r\n            logger.info(`Disable AEC: ${disableAEC}`);\r\n        }\r\n        if (typeof options.disableNS === 'boolean') {\r\n            disableNS = options.disableNS;\r\n            logger.info(`Disable NS: ${disableNS}`);\r\n        }\r\n        if (typeof options.disableAP === 'boolean') {\r\n            disableAP = options.disableAP;\r\n            logger.info(`Disable AP: ${disableAP}`);\r\n        }\r\n        if (typeof options.disableAGC === 'boolean') {\r\n            disableAGC = options.disableAGC;\r\n            logger.info(`Disable AGC: ${disableAGC}`);\r\n        }\r\n        if (typeof options.audioQuality?.stereo === 'boolean') {\r\n            stereo = options.audioQuality.stereo;\r\n            logger.info(`Stereo: ${stereo}`);\r\n        }\r\n\r\n        window.clearInterval(availableDevicesPollTimer);\r\n        availableDevicesPollTimer = undefined;\r\n\r\n        if (browser.isReactNative()) {\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream = undefined; // Unused on React Native.\r\n\r\n            this.getStreamID = function({ id }) {\r\n                // The react-native-webrtc implementation that we use at the\r\n                // time of this writing returns a number for the id of\r\n                // MediaStream. Let's just say that a number contains no special\r\n                // characters.\r\n                return (\r\n                    typeof id === 'number'\r\n                        ? id\r\n                        : SDPUtil.filterSpecialChars(id));\r\n            };\r\n            this.getTrackID = ({ id }) => id;\r\n        } else {\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    if (element) {\r\n                        element.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n            this.getStreamID = ({ id }) => id;\r\n            this.getTrackID = ({ id }) => id;\r\n        }\r\n\r\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\r\n            ? { optional: [\r\n                { googScreencastMinBitrate: 100 },\r\n                { googCpuOveruseDetection: true }\r\n            ] }\r\n            : {};\r\n\r\n        screenObtainer.init(options);\r\n\r\n        if (this.isDeviceListAvailable()) {\r\n            this.enumerateDevices(ds => {\r\n                availableDevices = ds.slice(0);\r\n\r\n                logger.debug('Available devices: ', availableDevices);\r\n                sendDeviceListToAnalytics(availableDevices);\r\n\r\n                eventEmitter.emit(\r\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\r\n                    availableDevices);\r\n\r\n                if (browser.supportsDeviceChangeEvent()) {\r\n                    navigator.mediaDevices.addEventListener(\r\n                        'devicechange',\r\n                        () => this.enumerateDevices(emptyFuncton));\r\n                } else {\r\n                    // Periodically poll enumerateDevices() method to check if\r\n                    // list of media devices has changed.\r\n                    availableDevicesPollTimer = window.setInterval(\r\n                        () => this.enumerateDevices(emptyFuncton),\r\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then(devices => {\r\n                updateKnownDevices(devices);\r\n                callback(devices);\r\n            })\r\n            .catch(error => {\r\n                logger.warn(`Failed to  enumerate devices. ${error}`);\r\n                updateKnownDevices([]);\r\n                callback([]);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Acquires a media stream via getUserMedia that\r\n     * matches the given constraints\r\n     *\r\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\r\n     * @param {Object} constraints - Stream specifications to use.\r\n     * @param {number} timeout - The timeout in ms for GUM.\r\n     * @returns {Promise}\r\n     */\r\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\r\n        return new Promise((resolve, reject) => {\r\n            let gumTimeout, timeoutExpired = false;\r\n\r\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\r\n                gumTimeout = setTimeout(() => {\r\n                    timeoutExpired = true;\r\n                    gumTimeout = undefined;\r\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\r\n                }, timeout);\r\n            }\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(stream => {\r\n                    logger.log('onUserMediaSuccess');\r\n                    updateGrantedPermissions(umDevices, stream);\r\n                    if (!timeoutExpired) {\r\n                        if (typeof gumTimeout !== 'undefined') {\r\n                            clearTimeout(gumTimeout);\r\n                        }\r\n                        resolve(stream);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\r\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\r\n\r\n                    if (!timeoutExpired) {\r\n                        if (typeof gumTimeout !== 'undefined') {\r\n                            clearTimeout(gumTimeout);\r\n                        }\r\n                        reject(error);\r\n                    }\r\n\r\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\r\n                        updateGrantedPermissions(umDevices, undefined);\r\n                    }\r\n\r\n                    // else {\r\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\r\n                    // }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquire a display stream via the screenObtainer. This requires extra\r\n     * logic compared to use screenObtainer versus normal device capture logic\r\n     * in RTCUtils#_getUserMedia.\r\n     *\r\n     * @returns {Promise} A promise which will be resolved with an object which\r\n     * contains the acquired display stream. If desktop sharing is not supported\r\n     * then a rejected promise will be returned.\r\n     */\r\n    _getDesktopMedia() {\r\n        if (!screenObtainer.isSupported()) {\r\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            screenObtainer.obtainStream(\r\n                stream => {\r\n                    resolve(stream);\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Private utility for determining if the passed in MediaStream contains\r\n     * tracks of the type(s) specified in the requested devices.\r\n     *\r\n     * @param {string[]} requestedDevices - The track types that are expected to\r\n     * be includes in the stream.\r\n     * @param {MediaStream} stream - The MediaStream to check if it has the\r\n     * expected track types.\r\n     * @returns {string[]} An array of string with the missing track types. The\r\n     * array will be empty if all requestedDevices are found in the stream.\r\n     */\r\n    _getMissingTracks(requestedDevices = [], stream) {\r\n        const missingDevices = [];\r\n\r\n        const audioDeviceRequested = requestedDevices.includes('audio');\r\n        const audioTracksReceived\r\n            = stream && stream.getAudioTracks().length > 0;\r\n\r\n        if (audioDeviceRequested && !audioTracksReceived) {\r\n            missingDevices.push('audio');\r\n        }\r\n\r\n        const videoDeviceRequested = requestedDevices.includes('video');\r\n        const videoTracksReceived\r\n            = stream && stream.getVideoTracks().length > 0;\r\n\r\n        if (videoDeviceRequested && !videoTracksReceived) {\r\n            missingDevices.push('video');\r\n        }\r\n\r\n        return missingDevices;\r\n    }\r\n\r\n    /**\r\n     * Gets streams from specified device types. This function intentionally\r\n     * ignores errors for upstream to catch and handle instead.\r\n     *\r\n     * @param {Object} options - A hash describing what devices to get and\r\n     * relevant constraints.\r\n     * @param {string[]} options.devices - The types of media to capture. Valid\r\n     * values are \"desktop\", \"audio\", and \"video\".\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @param {String} options.desktopSharingSourceDevice - The device id or\r\n     * label for a video input source that should be used for screensharing.\r\n     * @returns {Promise} The promise, when successful, will return an array of\r\n     * meta data for the requested device type, which includes the stream and\r\n     * track. If an error occurs, it will be deferred to the caller for\r\n     * handling.\r\n     */\r\n    obtainAudioAndVideoPermissions(options) {\r\n        const {\r\n            timeout,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        const mediaStreamsMetaData = [];\r\n\r\n        // Declare private functions to be used in the promise chain below.\r\n        // These functions are declared in the scope of this function because\r\n        // they are not being used anywhere else, so only this function needs to\r\n        // know about them.\r\n\r\n        /**\r\n         * Executes a request for desktop media if specified in options.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestDesktopDevice = function() {\r\n            const umDevices = otherOptions.devices || [];\r\n            const isDesktopDeviceRequested\r\n                = umDevices.indexOf('desktop') !== -1;\r\n\r\n            if (!isDesktopDeviceRequested) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const {\r\n                desktopSharingSourceDevice\r\n            } = otherOptions;\r\n\r\n            // Attempt to use a video input device as a screenshare source if\r\n            // the option is defined.\r\n            if (desktopSharingSourceDevice) {\r\n                const matchingDevice\r\n                    = availableDevices && availableDevices.find(device =>\r\n                        device.kind === 'videoinput'\r\n                            && (device.deviceId === desktopSharingSourceDevice\r\n                            || device.label === desktopSharingSourceDevice));\r\n\r\n                if (!matchingDevice) {\r\n                    return Promise.reject(new JitsiTrackError(\r\n                        { name: 'ConstraintNotSatisfiedError' },\r\n                        {},\r\n                        [ desktopSharingSourceDevice ]\r\n                    ));\r\n                }\r\n\r\n                const requestedDevices = [ 'video' ];\r\n                const constraints = {\r\n                    video: {\r\n                        deviceId: matchingDevice.deviceId\r\n\r\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\r\n                    }\r\n                };\r\n\r\n                return this._getUserMedia(requestedDevices, constraints, timeout)\r\n                    .then(stream => {\r\n                        return {\r\n                            sourceType: 'device',\r\n                            stream\r\n                        };\r\n                    });\r\n            }\r\n\r\n            return this._getDesktopMedia();\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Creates a meta data object about the passed in desktopStream and\r\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\r\n         * returned later.\r\n         *\r\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\r\n         * capture.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\r\n            if (!desktopStream) {\r\n                return;\r\n            }\r\n\r\n            const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n            const desktopAudioTracks = stream.getAudioTracks();\r\n\r\n            if (desktopAudioTracks.length) {\r\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopAudioStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopAudioStream.getAudioTracks()[0]\r\n                });\r\n            }\r\n\r\n            const desktopVideoTracks = stream.getVideoTracks();\r\n\r\n            if (desktopVideoTracks.length) {\r\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopVideoStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopVideoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.DESKTOP\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Executes a request for audio and/or video, as specified in options.\r\n         * By default both audio and video will be captured if options.devices\r\n         * is not defined.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestCaptureDevices = function() {\r\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\r\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\r\n\r\n            if (!requestedCaptureDevices.length) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\r\n\r\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\r\n\r\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Splits the passed in media stream into separate audio and video\r\n         * streams and creates meta data objects for each and pushes them to the\r\n         * internal array mediaStreamsMetaData to be returned later.\r\n         *\r\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\r\n         * video track.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddAVTracks = function(avStream) {\r\n            if (!avStream) {\r\n                return;\r\n            }\r\n\r\n            const audioTracks = avStream.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                const audioStream = new MediaStream(audioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: audioStream,\r\n                    track: audioStream.getAudioTracks()[0],\r\n                    effects: otherOptions.effects\r\n                });\r\n            }\r\n\r\n            const videoTracks = avStream.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                const videoStream = new MediaStream(videoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: videoStream,\r\n                    track: videoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.CAMERA,\r\n                    effects: otherOptions.effects\r\n                });\r\n            }\r\n        };\r\n\r\n        return maybeRequestDesktopDevice()\r\n            .then(maybeCreateAndAddDesktopTrack)\r\n            .then(maybeRequestCaptureDevices)\r\n            .then(maybeCreateAndAddAVTracks)\r\n            .then(() => mediaStreamsMetaData)\r\n            .catch(error => {\r\n                mediaStreamsMetaData.forEach(({ stream }) => {\r\n                    this.stopMediaStream(stream);\r\n                });\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks whether it is possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {boolean} {@code true} if the device listing is available;\r\n     * {@code false}, otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return Boolean(\r\n            navigator.mediaDevices\r\n                && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @params {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\r\n            return isAudioOutputDeviceChangeAvailable;\r\n        }\r\n\r\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\r\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\r\n        // Safari.\r\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param mediaStream MediaStream object to stop.\r\n     */\r\n    stopMediaStream(mediaStream) {\r\n        if (!mediaStream) {\r\n            return;\r\n        }\r\n\r\n        mediaStream.getTracks().forEach(track => {\r\n            if (track.stop) {\r\n                track.stop();\r\n            }\r\n        });\r\n\r\n        // leave stop for implementation still using it\r\n        if (mediaStream.stop) {\r\n            mediaStream.stop();\r\n        }\r\n\r\n        // The MediaStream implementation of the react-native-webrtc project has\r\n        // an explicit release method that is to be invoked in order to release\r\n        // used resources such as memory.\r\n        if (mediaStream.release) {\r\n            mediaStream.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return screenObtainer.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\r\n     *      device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        if (!this.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        return featureDetectionAudioEl.setSinkId(deviceId)\r\n            .then(() => {\r\n                audioOutputDeviceId = deviceId;\r\n                audioOutputChanged = true;\r\n\r\n                logger.log(`Audio output device set to ${deviceId}`);\r\n\r\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                    deviceId);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets the capture frame rate for desktop tracks.\r\n     *\r\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\r\n     * @returns {void}\r\n     */\r\n    setDesktopSharingFrameRate(maxFps) {\r\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return audioOutputDeviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {Array} list of available media devices.\r\n     */\r\n    getCurrentlyAvailableMediaDevices() {\r\n        return availableDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns whether available devices have permissions granted\r\n     * @returns {Boolean}\r\n     */\r\n    arePermissionsGrantedForAvailableDevices() {\r\n        return availableDevices.some(device => Boolean(device.label));\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    getEventDataForActiveDevice(device) {\r\n        const deviceList = [];\r\n        const deviceData = {\r\n            'deviceId': device.deviceId,\r\n            'kind': device.kind,\r\n            'label': device.label,\r\n            'groupId': device.groupId\r\n        };\r\n\r\n        deviceList.push(deviceData);\r\n\r\n        return { deviceList };\r\n    }\r\n\r\n    /**\r\n     * Configures the given PeerConnection constraints to either enable or\r\n     * disable (according to the value of the 'enable' parameter) the\r\n     * 'googSuspendBelowMinBitrate' option.\r\n     * @param constraints the constraints on which to operate.\r\n     * @param enable {boolean} whether to enable or disable the suspend video\r\n     * option.\r\n     */\r\n    setSuspendVideo(constraints, enable) {\r\n        if (!constraints.optional) {\r\n            constraints.optional = [];\r\n        }\r\n\r\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\r\n        // that the elements of constraints.optional contain a single property).\r\n        constraints.optional\r\n            = constraints.optional.filter(\r\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\r\n\r\n        if (enable) {\r\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\r\n        }\r\n    }\r\n}\r\n\r\nconst rtcUtils = new RTCUtils();\r\n\r\n/**\r\n * Wraps original attachMediaStream function to set current audio output device\r\n * if this is supported.\r\n * @param {Function} origAttachMediaStream\r\n * @returns {Function}\r\n */\r\nfunction wrapAttachMediaStream(origAttachMediaStream) {\r\n    return function(element, stream) {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\r\n\r\n        if (stream\r\n                && rtcUtils.isDeviceChangeAvailable('output')\r\n                && stream.getAudioTracks\r\n                && stream.getAudioTracks().length\r\n\r\n                // we skip setting audio output if there was no explicit change\r\n                && audioOutputChanged) {\r\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\r\n                .catch(function(ex) {\r\n                    const err\r\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\r\n\r\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\r\n                        promise: this, // eslint-disable-line no-invalid-this\r\n                        reason: err\r\n                    });\r\n\r\n                    logger.warn(\r\n                        'Failed to set audio output device for the element.'\r\n                            + ' Default audio output device will be used'\r\n                            + ' instead',\r\n                        element,\r\n                        err);\r\n                });\r\n        }\r\n\r\n        return res;\r\n    };\r\n}\r\n\r\nexport default rtcUtils;\r\n","/* global __filename, module */\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Maps our handler types to MediaStreamTrack properties.\r\n */\r\nconst trackHandler2Prop = {\r\n    'track_mute': 'onmute', // Not supported on FF\r\n    'track_unmute': 'onunmute',\r\n    'track_ended': 'onended'\r\n};\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiTrack extends EventEmitter {\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Represents a single media track (either audio or video).\r\n     * @constructor\r\n     * @param conference the rtc instance\r\n     * @param stream the WebRTC MediaStream instance\r\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\r\n     * the given <tt>stream</tt>.\r\n     * @param streamInactiveHandler the function that will handle\r\n     *        onended/oninactive events of the stream.\r\n     * @param trackMediaType the media type of the JitsiTrack\r\n     * @param videoType the VideoType for this track if any\r\n     */\r\n    constructor(\r\n            conference,\r\n            stream,\r\n            track,\r\n            streamInactiveHandler,\r\n            trackMediaType,\r\n            videoType) {\r\n        super();\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n\r\n        /**\r\n         * Array with the HTML elements that are displaying the streams.\r\n         * @type {Array}\r\n         */\r\n        this.containers = [];\r\n        this.conference = conference;\r\n        this.audioLevel = -1;\r\n        this.type = trackMediaType;\r\n        this.track = track;\r\n        this.videoType = videoType;\r\n        this.handlers = new Map();\r\n\r\n        /**\r\n         * Indicates whether this JitsiTrack has been disposed. If true, this\r\n         * JitsiTrack is to be considered unusable and operations involving it\r\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\r\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The inactive handler which will be triggered when the underlying\r\n         * <tt>MediaStream</tt> ends.\r\n         *\r\n         * @private\r\n         * @type {Function}\r\n         */\r\n        this._streamInactiveHandler = streamInactiveHandler;\r\n\r\n        this._setStream(stream);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\r\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\r\n     * a onended event on the MediaStreamTrack.\r\n     * @param {Function} handler the handler\r\n     */\r\n    _addMediaStreamInactiveHandler(handler) {\r\n        if (browser.isFirefox()) {\r\n            this.track.onended = handler;\r\n        } else {\r\n            this.stream.oninactive = handler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\r\n     * depending on the passed type.\r\n     * @param {string} type the type of the handler that is going to be set\r\n     * @param {Function} handler the handler.\r\n     */\r\n    _setHandler(type, handler) {\r\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\r\n            logger.error(`Invalid handler type ${type}`);\r\n\r\n            return;\r\n        }\r\n        if (handler) {\r\n            this.handlers.set(type, handler);\r\n        } else {\r\n            this.handlers.delete(type);\r\n        }\r\n\r\n        if (this.stream) {\r\n            for (const track of this.stream.getTracks()) {\r\n                track[trackHandler2Prop[type]] = handler;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event handlers bound to the underlying media stream/track\r\n     * @private\r\n     */\r\n    _unregisterHandlers() {\r\n        if (!this.stream) {\r\n            logger.warn(\r\n                `${this}: unable to unregister handlers - no stream object`);\r\n\r\n            return;\r\n        }\r\n\r\n        for (const type of this.handlers.keys()) {\r\n            // FIXME Why only video tracks?\r\n            for (const videoTrack of this.stream.getVideoTracks()) {\r\n                videoTrack[trackHandler2Prop[type]] = undefined;\r\n            }\r\n        }\r\n        if (this._streamInactiveHandler) {\r\n            this._addMediaStreamInactiveHandler(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        if (this.stream === stream) {\r\n            return;\r\n        }\r\n\r\n        this.stream = stream;\r\n\r\n        // TODO Practically, that's like the opposite of _unregisterHandlers\r\n        // i.e. may be abstracted into a function/method called\r\n        // _registerHandlers for clarity and easing the maintenance of the two\r\n        // pieces of source code.\r\n        if (this.stream) {\r\n            for (const type of this.handlers.keys()) {\r\n                this._setHandler(type, this.handlers.get(type));\r\n            }\r\n            if (this._streamInactiveHandler) {\r\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the video type (camera or desktop) of this track.\r\n     */\r\n    getVideoType() {\r\n        return this.videoType;\r\n    }\r\n\r\n    /**\r\n     * Returns the type (audio or video) of this track.\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Check if this is an audio track.\r\n     */\r\n    isAudioTrack() {\r\n        return this.getType() === MediaType.AUDIO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\r\n     * according to it's 'muted' field status.\r\n     * @return {boolean} <tt>true</tt> if the underlying\r\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\r\n     */\r\n    isWebRTCTrackMuted() {\r\n        return this.track && this.track.muted;\r\n    }\r\n\r\n    /**\r\n     * Check if this is a video track.\r\n     */\r\n    isVideoTrack() {\r\n        return this.getType() === MediaType.VIDEO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether this is a local track.\r\n     * @abstract\r\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\r\n     */\r\n    isLocal() {\r\n        throw new Error('Not implemented by subclass');\r\n    }\r\n\r\n    /**\r\n     * Check whether this is a local audio track.\r\n     *\r\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\r\n     */\r\n    isLocalAudioTrack() {\r\n        return this.isAudioTrack() && this.isLocal();\r\n    }\r\n\r\n    /**\r\n     * Returns the WebRTC MediaStream instance.\r\n     */\r\n    getOriginalStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getStreamId() {\r\n        return this.stream ? this.stream.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack\r\n     * @returns {MediaStreamTrack}\r\n     */\r\n    getTrack() {\r\n        return this.track;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack label\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this.track.label;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getTrackId() {\r\n        return this.track ? this.track.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return meaningful usage label for this track depending on it's media and\r\n     * eventual video type.\r\n     * @returns {string}\r\n     */\r\n    getUsageLabel() {\r\n        if (this.isAudioTrack()) {\r\n            return 'mic';\r\n        }\r\n\r\n        return this.videoType ? this.videoType : 'default';\r\n    }\r\n\r\n    /**\r\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\r\n     * @param container the video/audio container to which this stream is\r\n     *        attached and for which event will be fired.\r\n     * @private\r\n     */\r\n    _maybeFireTrackAttached(container) {\r\n        if (this.conference && container) {\r\n            this.conference._onTrackAttach(this, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the MediaStream of this track to an HTML container.\r\n     * Adds the container to the list of containers that are displaying the\r\n     * track.\r\n     *\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(container) {\r\n        if (this.stream) {\r\n            this._onTrackAttach(container);\r\n            RTCUtils.attachMediaStream(container, this.stream);\r\n        }\r\n        this.containers.push(container);\r\n        this._maybeFireTrackAttached(container);\r\n        this._attachTTFMTracker(container);\r\n    }\r\n\r\n    /**\r\n     * Removes this JitsiTrack from the passed HTML container.\r\n     *\r\n     * @param container the HTML container to detach from this JitsiTrack. If\r\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\r\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\r\n     * which this JitsiTrack is currently attached.\r\n     */\r\n    detach(container) {\r\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\r\n            const c = cs[i];\r\n\r\n            if (!container) {\r\n                this._onTrackDetach(c);\r\n                RTCUtils.attachMediaStream(c, null);\r\n            }\r\n            if (!container || c === container) {\r\n                cs.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            this._onTrackDetach(container);\r\n            RTCUtils.attachMediaStream(container, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this.removeAllListeners();\r\n\r\n        this.disposed = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Returns true if this is a video track and the source of the video is a\r\n     * screen capture as opposed to a camera.\r\n     */\r\n    isScreenSharing() {\r\n        // FIXME: Should be fixed or removed.\r\n    }\r\n\r\n    /**\r\n     * Returns id of the track.\r\n     * @returns {string|null} id of the track or null if this is fake track.\r\n     */\r\n    getId() {\r\n        if (this.stream) {\r\n            return RTCUtils.getStreamID(this.stream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the MediaStream is active/not ended.\r\n     * When there is no check for active we don't have information and so\r\n     * will return that stream is active (in case of FF).\r\n     * @returns {boolean} whether MediaStream is active.\r\n     */\r\n    isActive() {\r\n        if (typeof this.stream.active !== 'undefined') {\r\n            return this.stream.active;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio level for the stream\r\n     * @param {number} audioLevel value between 0 and 1\r\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\r\n     * is source for the audio level. It can be <tt>undefined</tt> for\r\n     * a local track if the audio level was measured outside of the\r\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\r\n     */\r\n    setAudioLevel(audioLevel, tpc) {\r\n        let newAudioLevel = audioLevel;\r\n\r\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\r\n        // remote tracks, browser reports last known audio levels even when the remote user is\r\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\r\n        // Remote tracks have the tpc info present while local tracks do not.\r\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\r\n            newAudioLevel = 0;\r\n        }\r\n\r\n        if (this.audioLevel !== newAudioLevel) {\r\n            this.audioLevel = newAudioLevel;\r\n            this.emit(\r\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                newAudioLevel,\r\n                tpc);\r\n\r\n        // LocalStatsCollector reports a value of 0.008 for muted mics\r\n        // and a value of 0 when there is no audio input.\r\n        } else if (this.audioLevel === 0\r\n            && newAudioLevel === 0\r\n            && this.isLocal()\r\n            && !this.isWebRTCTrackMuted()) {\r\n            this.emit(\r\n                JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                newAudioLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the msid of the stream attached to the JitsiTrack object or null\r\n     * if no stream is attached.\r\n     */\r\n    getMSID() {\r\n        const streamId = this.getStreamId();\r\n        const trackId = this.getTrackId();\r\n\r\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\r\n    }\r\n\r\n    /**\r\n     * Sets new audio output device for track's DOM elements. Video tracks are\r\n     * ignored.\r\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\r\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutput(audioOutputDeviceId) {\r\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        // All audio communication is done through audio tracks, so ignore\r\n        // changing audio output for video tracks at all.\r\n        if (this.isVideoTrack()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return (\r\n            Promise.all(\r\n                this.containers.map(\r\n                    element =>\r\n                        element.setSinkId(audioOutputDeviceId)\r\n                            .catch(error => {\r\n                                logger.warn(\r\n                                    'Failed to change audio output device on'\r\n                                        + ' element. Default or previously set'\r\n                                        + ' audio output device will be used.',\r\n                                    element,\r\n                                    error);\r\n                                throw error;\r\n                            }))\r\n            )\r\n                .then(() => {\r\n                    this.emit(\r\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\r\n                        audioOutputDeviceId);\r\n                }));\r\n    }\r\n}\r\n","/* global __filename, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport {\r\n    TRACK_IS_DISPOSED,\r\n    TRACK_NO_STREAM_FOUND\r\n} from '../../JitsiTrackErrors';\r\nimport {\r\n    LOCAL_TRACK_STOPPED,\r\n    NO_DATA_FROM_SOURCE,\r\n    TRACK_MUTE_CHANGED\r\n} from '../../JitsiTrackEvents';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport {\r\n    NO_BYTES_SENT,\r\n    TRACK_UNMUTED,\r\n    createNoDataFromSourceEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a single media track(either audio or video).\r\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\r\n */\r\nexport default class JitsiLocalTrack extends JitsiTrack {\r\n    /**\r\n     * Constructs new JitsiLocalTrack instance.\r\n     *\r\n     * @constructor\r\n     * @param {Object} trackInfo\r\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\r\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\r\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\r\n     * JitsiRemoteTrack\r\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\r\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\r\n     * @param trackInfo.effects the effects array contains the effect instance to use\r\n     * @param trackInfo.resolution the video resolution if it's a video track\r\n     * @param trackInfo.deviceId the ID of the local device for this track\r\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\r\n     * call\r\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\r\n     * source. NOTE: defined for desktop sharing tracks only.\r\n     */\r\n    constructor({\r\n        deviceId,\r\n        facingMode,\r\n        mediaType,\r\n        resolution,\r\n        rtcId,\r\n        sourceId,\r\n        sourceType,\r\n        stream,\r\n        track,\r\n        videoType,\r\n        effects = []\r\n    }) {\r\n        super(\r\n            /* conference */ null,\r\n            stream,\r\n            track,\r\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\r\n            mediaType,\r\n            videoType);\r\n\r\n        this._setEffectInProgress = false;\r\n        const effect = effects.find(e => e.isEnabled(this));\r\n\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n\r\n        /**\r\n         * The ID assigned by the RTC module on instance creation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.rtcId = rtcId;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n\r\n        // Get the resolution from the track itself because it cannot be\r\n        // certain which resolution webrtc has fallen back to using.\r\n        this.resolution = track.getSettings().height;\r\n        this.maxEnabledResolution = resolution;\r\n\r\n        // Cache the constraints of the track in case of any this track\r\n        // model needs to call getUserMedia again, such as when unmuting.\r\n        this._constraints = track.getConstraints();\r\n\r\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\r\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\r\n            this._constraints = {\r\n                height: track.getSettings().height,\r\n                width: track.getSettings().width\r\n            };\r\n        }\r\n\r\n        this.deviceId = deviceId;\r\n\r\n        /**\r\n         * The <tt>Promise</tt> which represents the progress of a previously\r\n         * queued/scheduled {@link _setMuted} (from the point of view of\r\n         * {@link _queueSetMuted}).\r\n         *\r\n         * @private\r\n         * @type {Promise}\r\n         */\r\n        this._prevSetMuted = Promise.resolve();\r\n\r\n        /**\r\n         * The facing mode of the camera from which this JitsiLocalTrack\r\n         * instance was obtained.\r\n         *\r\n         * @private\r\n         * @type {CameraFacingMode|undefined}\r\n         */\r\n        this._facingMode = facingMode;\r\n\r\n        // Currently there is no way to know the MediaStreamTrack ended due to\r\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\r\n        // Instead we will compare current track's label with device labels from\r\n        // enumerateDevices() list.\r\n        this._trackEnded = false;\r\n\r\n        /**\r\n         * Indicates whether data has been sent or not.\r\n         */\r\n        this._hasSentData = false;\r\n\r\n        /**\r\n         * Used only for detection of audio problems. We want to check only once\r\n         * whether the track is sending data ot not. This flag is set to false\r\n         * after the check.\r\n         */\r\n        this._testDataSent = true;\r\n\r\n        // Currently there is no way to determine with what device track was\r\n        // created (until getConstraints() support), however we can associate\r\n        // tracks with real devices obtained from enumerateDevices() call as\r\n        // soon as it's called.\r\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\r\n        // correspond to the id of a matching device from the available device list.\r\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\r\n\r\n        this._trackMutedTS = 0;\r\n\r\n        this._onDeviceListWillChange = devices => {\r\n            const oldRealDeviceId = this._realDeviceId;\r\n\r\n            this._setRealDeviceIdFromDeviceList(devices);\r\n\r\n            if (\r\n                // Mark track as ended for those browsers that do not support\r\n                // \"readyState\" property. We do not touch tracks created with\r\n                // default device ID \"\".\r\n                (typeof this.getTrack().readyState === 'undefined'\r\n                    && typeof this._realDeviceId !== 'undefined'\r\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\r\n\r\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\r\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\r\n                // addition on some Chrome versions the readyState property is set after the device change event is\r\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\r\n                // detect that the old one was removed.\r\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\r\n            ) {\r\n                this._trackEnded = true;\r\n            }\r\n        };\r\n\r\n        // Subscribe each created local audio track to\r\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\r\n        // handling this event for remote tracks (which are handled in RTC.js),\r\n        // because there might be local tracks not attached to a conference.\r\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\r\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        this._initNoDataFromSourceHandlers();\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Sets handlers to the MediaStreamTrack object that will detect camera\r\n     * issues.\r\n     */\r\n    _initNoDataFromSourceHandlers() {\r\n        if (!this._isNoDataFromSourceEventsEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this._setHandler('track_mute', () => {\r\n            this._trackMutedTS = window.performance.now();\r\n            this._fireNoDataFromSourceEvent();\r\n        });\r\n\r\n        this._setHandler('track_unmute', () => {\r\n            this._fireNoDataFromSourceEvent();\r\n            Statistics.sendAnalyticsAndLog(\r\n                TRACK_UNMUTED,\r\n                {\r\n                    'media_type': this.getType(),\r\n                    'track_type': 'local',\r\n                    value: window.performance.now() - this._trackMutedTS\r\n                });\r\n        });\r\n\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            this._setHandler('track_ended', () => {\r\n                if (!this.isReceivingData()) {\r\n                    this._fireNoDataFromSourceEvent();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     */\r\n    _isNoDataFromSourceEventsEnabled() {\r\n        // Disable the events for screen sharing.\r\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\r\n    }\r\n\r\n    /**\r\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\r\n     */\r\n    _fireNoDataFromSourceEvent() {\r\n        const value = !this.isReceivingData();\r\n\r\n        this.emit(NO_DATA_FROM_SOURCE, value);\r\n\r\n        // FIXME: Should we report all of those events\r\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\r\n        Statistics.sendLog(JSON.stringify({\r\n            name: NO_DATA_FROM_SOURCE,\r\n            log: value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets real device ID by comparing track information with device\r\n     * information. This is temporary solution until getConstraints() method\r\n     * will be implemented in browsers.\r\n     *\r\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\r\n     * enumerateDevices() call\r\n     */\r\n    _setRealDeviceIdFromDeviceList(devices) {\r\n        const track = this.getTrack();\r\n        const kind = `${track.kind}input`;\r\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\r\n\r\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\r\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\r\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\r\n            // why in order to match it we need to remove the 'Default - ' part.\r\n            const label = (track.label || '').replace('Default - ', '');\r\n\r\n            device = devices.find(d => d.kind === kind && d.label === label);\r\n        }\r\n\r\n        if (device) {\r\n            this._realDeviceId = device.deviceId;\r\n        } else {\r\n            this._realDeviceId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        super._setStream(stream);\r\n\r\n        if (stream) {\r\n            // Store the MSID for video mute/unmute purposes.\r\n            this.storedMSID = this.getMSID();\r\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\r\n        } else {\r\n            logger.debug(`Setting 'null' stream on ${this}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the effect process and returns the modified stream.\r\n     *\r\n     * @private\r\n     * @param {*} effect - Represents effect instance\r\n     * @returns {void}\r\n     */\r\n    _startStreamEffect(effect) {\r\n        this._streamEffect = effect;\r\n        this._originalStream = this.stream;\r\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\r\n        this.track = this.stream.getTracks()[0];\r\n    }\r\n\r\n    /**\r\n     * Stops the effect process and returns the original stream.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _stopStreamEffect() {\r\n        if (this._streamEffect) {\r\n            this._streamEffect.stopEffect();\r\n            this._setStream(this._originalStream);\r\n            this._originalStream = null;\r\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\r\n     *\r\n     * @param {Object|undefined} effect - The new effect to be set.\r\n     */\r\n    _switchStreamEffect(effect) {\r\n        if (this._streamEffect) {\r\n            this._stopStreamEffect();\r\n            this._streamEffect = undefined;\r\n        }\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the effect and switches between the modified stream and original one.\r\n     *\r\n     * @param {Object} effect - Represents the effect instance to be used.\r\n     * @returns {Promise}\r\n     */\r\n    setEffect(effect) {\r\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\r\n            return Promise.reject(new Error('Incompatible effect instance!'));\r\n        }\r\n\r\n        if (this._setEffectInProgress === true) {\r\n            return Promise.reject(new Error('setEffect already in progress!'));\r\n        }\r\n\r\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\r\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\r\n        if (this.isMuted() && !this.isAudioTrack()) {\r\n            this._streamEffect = effect;\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const conference = this.conference;\r\n\r\n        if (!conference) {\r\n            this._switchStreamEffect(effect);\r\n            if (this.isVideoTrack()) {\r\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._setEffectInProgress = true;\r\n\r\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\r\n        return conference.removeTrack(this)\r\n            .then(() => {\r\n                this._switchStreamEffect(effect);\r\n                if (this.isVideoTrack()) {\r\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n                }\r\n\r\n                return conference.addTrack(this);\r\n            })\r\n            .then(() => {\r\n                this._setEffectInProgress = false;\r\n            })\r\n            .catch(error => {\r\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\r\n                // everyhting related to the effect functionality.\r\n                this._setEffectInProgress = false;\r\n                this._switchStreamEffect();\r\n                logger.error('Failed to switch to the new stream!', error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously mutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    mute() {\r\n        return this._queueSetMuted(true);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously unmutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    unmute() {\r\n        return this._queueSetMuted(false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\r\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\r\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\r\n     * serialized fashion.\r\n     *\r\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\r\n     * @returns {Promise}\r\n     */\r\n    _queueSetMuted(muted) {\r\n        const setMuted = this._setMuted.bind(this, muted);\r\n\r\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\r\n\r\n        return this._prevSetMuted;\r\n    }\r\n\r\n    /**\r\n     * Mutes / unmutes this track.\r\n     *\r\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\r\n     * otherwise, this track will be unmuted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _setMuted(muted) {\r\n        if (this.isMuted() === muted) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.disposed) {\r\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\r\n        }\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        // A function that will print info about muted status transition\r\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\r\n\r\n        if (this.isAudioTrack()\r\n                || this.videoType === VideoType.DESKTOP\r\n                || !browser.doesVideoMuteByStreamRemove()) {\r\n            logMuteInfo();\r\n\r\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\r\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\r\n            // mute state in which if the user mutes, system audio still has to go through.\r\n            if (this._streamEffect && this._streamEffect.setMuted) {\r\n                this._streamEffect.setMuted(muted);\r\n            } else if (this.track) {\r\n                this.track.enabled = !muted;\r\n            }\r\n        } else if (muted) {\r\n            promise = new Promise((resolve, reject) => {\r\n                logMuteInfo();\r\n                this._removeStreamFromConferenceAsMute(\r\n                    () => {\r\n                        if (this._streamEffect) {\r\n                            this._stopStreamEffect();\r\n                        }\r\n\r\n                        // FIXME: Maybe here we should set the SRC for the\r\n                        // containers to something\r\n                        // We don't want any events to be fired on this stream\r\n                        this._unregisterHandlers();\r\n                        this.stopStream();\r\n                        this._setStream(null);\r\n                        resolve();\r\n                    },\r\n                    reject);\r\n            });\r\n        } else {\r\n            logMuteInfo();\r\n\r\n            // This path is only for camera.\r\n            const streamOptions = {\r\n                cameraDeviceId: this.getDeviceId(),\r\n                devices: [ MediaType.VIDEO ],\r\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\r\n                facingMode: this.getCameraFacingMode()\r\n            };\r\n\r\n            promise\r\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\r\n                    {},\r\n                    streamOptions,\r\n                    { constraints: { video: this._constraints } }));\r\n\r\n            promise = promise.then(streamsInfo => {\r\n                // The track kind for presenter track is video as well.\r\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\r\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\r\n\r\n                if (streamInfo) {\r\n                    this._setStream(streamInfo.stream);\r\n                    this.track = streamInfo.track;\r\n\r\n                    // This is not good when video type changes after\r\n                    // unmute, but let's not crash here\r\n                    if (this.videoType !== streamInfo.videoType) {\r\n                        logger.warn(\r\n                            `${this}: video type has changed after unmute!`,\r\n                            this.videoType, streamInfo.videoType);\r\n                        this.videoType = streamInfo.videoType;\r\n                    }\r\n                } else {\r\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\r\n                }\r\n\r\n                if (this._streamEffect) {\r\n                    this._startStreamEffect(this._streamEffect);\r\n                }\r\n\r\n                this.containers.map(\r\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n\r\n                return this._addStreamToConferenceAsUnmute();\r\n            });\r\n        }\r\n\r\n        return promise\r\n            .then(() => {\r\n                this._sendMuteStatus(muted);\r\n                this.emit(TRACK_MUTE_CHANGED, this);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Adds stream to conference and marks it as \"unmute\" operation.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _addStreamToConferenceAsUnmute() {\r\n        if (!this.conference) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // FIXME it would be good to not included conference as part of this\r\n        // process. Only TraceablePeerConnections to which the track is attached\r\n        // should care about this action. The TPCs to which the track is not\r\n        // attached can sync up when track is re-attached.\r\n        // A problem with that is that the \"modify sources\" queue is part of\r\n        // the JingleSessionPC and it would be excluded from the process. One\r\n        // solution would be to extract class between TPC and JingleSessionPC\r\n        // which would contain the queue and would notify the signaling layer\r\n        // when local SSRCs are changed. This would help to separate XMPP from\r\n        // the RTC module.\r\n        return new Promise((resolve, reject) => {\r\n            this.conference._addLocalTrackAsUnmute(this)\r\n                .then(resolve, error => reject(new Error(error)));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes stream from conference and marks it as \"mute\" operation.\r\n     *\r\n     * @param {Function} successCallback will be called on success\r\n     * @param {Function} errorCallback will be called on error\r\n     * @private\r\n     */\r\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\r\n        if (!this.conference) {\r\n            successCallback();\r\n\r\n            return;\r\n        }\r\n        this.conference._removeLocalTrackAsMute(this).then(\r\n            successCallback,\r\n            error => errorCallback(new Error(error)));\r\n    }\r\n\r\n    /**\r\n     * Sends mute status for a track to conference if any.\r\n     *\r\n     * @param {boolean} mute - If track is muted.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _sendMuteStatus(mute) {\r\n        if (this.conference && this.conference.room) {\r\n            this.conference.room[\r\n                this.isAudioTrack()\r\n                    ? 'setAudioMute'\r\n                    : 'setVideoMute'](mute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * Stops sending the media track. And removes it from the HTML.\r\n     * NOTE: Works for local tracks only.\r\n     *\r\n     * @extends JitsiTrack#dispose\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        let promise = Promise.resolve();\r\n\r\n        // Remove the effect instead of stopping it so that the original stream is restored\r\n        // on both the local track and on the peerconnection.\r\n        if (this._streamEffect) {\r\n            promise = this.setEffect();\r\n        }\r\n\r\n        if (this.conference) {\r\n            promise = promise.then(() => this.conference.removeTrack(this));\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stopStream();\r\n            this.detach();\r\n        }\r\n\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        if (this._onAudioOutputDeviceChanged) {\r\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        return promise.then(() => super.dispose());\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\r\n     * otherwise.\r\n     *\r\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        // this.stream will be null when we mute local video on Chrome\r\n        if (!this.stream) {\r\n            return true;\r\n        }\r\n        if (this.isVideoTrack() && !this.isActive()) {\r\n            return true;\r\n        }\r\n\r\n        // If currently used stream effect has its own muted state, use that.\r\n        if (this._streamEffect && this._streamEffect.isMuted) {\r\n            return this._streamEffect.isMuted();\r\n        }\r\n\r\n        return !this.track || !this.track.enabled;\r\n    }\r\n\r\n    /**\r\n     * Sets the JitsiConference object associated with the track. This is temp\r\n     * solution.\r\n     *\r\n     * @param conference the JitsiConference object\r\n     */\r\n    _setConference(conference) {\r\n        this.conference = conference;\r\n\r\n        // We want to keep up with postponed events which should have been fired\r\n        // on \"attach\" call, but for local track we not always have the\r\n        // conference before attaching. However this may result in duplicated\r\n        // events if they have been triggered on \"attach\" already.\r\n        for (let i = 0; i < this.containers.length; i++) {\r\n            this._maybeFireTrackAttached(this.containers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt>.\r\n     *\r\n     * @returns {boolean} <tt>true</tt>\r\n     */\r\n    isLocal() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns device id associated with track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._realDeviceId || this.deviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.conference && this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Handles bytes sent statistics.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\r\n     * @param {number} bytesSent the new value\r\n     * NOTE: used only for audio tracks to detect audio issues.\r\n     */\r\n    _onByteSentStatsReceived(tpc, bytesSent) {\r\n        if (bytesSent > 0) {\r\n            this._hasSentData = true;\r\n        }\r\n        const iceConnectionState = tpc.getConnectionState();\r\n\r\n        if (this._testDataSent && iceConnectionState === 'connected') {\r\n            setTimeout(() => {\r\n                if (!this._hasSentData) {\r\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\r\n                        ${bytesSent}`);\r\n\r\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\r\n                }\r\n            }, 3000);\r\n            this._testDataSent = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns facing mode for video track from camera. For other cases (e.g.\r\n     * audio track or 'desktop' video track) returns undefined.\r\n     *\r\n     * @returns {CameraFacingMode|undefined}\r\n     */\r\n    getCameraFacingMode() {\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            // MediaStreamTrack#getSettings() is not implemented in many\r\n            // browsers, so we need feature checking here. Progress on the\r\n            // respective browser's implementation can be tracked at\r\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\r\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\r\n            // for Firefox. Even if a browser implements getSettings() already,\r\n            // it might still not return anything for 'facingMode'.\r\n            const trackSettings = this.track.getSettings?.();\r\n\r\n            if (trackSettings && 'facingMode' in trackSettings) {\r\n                return trackSettings.facingMode;\r\n            }\r\n\r\n            if (typeof this._facingMode !== 'undefined') {\r\n                return this._facingMode;\r\n            }\r\n\r\n            // In most cases we are showing a webcam. So if we've gotten here,\r\n            // it should be relatively safe to assume that we are probably\r\n            // showing the user-facing camera.\r\n            return CameraFacingMode.USER;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the associated MediaStream.\r\n     */\r\n    stopStream() {\r\n        /**\r\n         * Indicates that we are executing {@link #stopStream} i.e.\r\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\r\n         * associated with this <tt>JitsiTrack</tt> instance.\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this._stopStreamInProgress = true;\r\n\r\n        try {\r\n            RTCUtils.stopMediaStream(this.stream);\r\n        } finally {\r\n            this._stopStreamInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the\r\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\r\n     * question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch\r\n     * between the front/user-facing and the back/environment-facing cameras\r\n     * because it will likely be (as is the case of react-native-webrtc)\r\n     * noticeably faster that creating a new MediaStreamTrack via a new\r\n     * getUserMedia call with the switched facingMode constraint value.\r\n     * Moreover, the approach with a new getUserMedia call may not even work:\r\n     * WebRTC on Android and iOS is either very slow to open the camera a second\r\n     * time or plainly freezes attempting to do that.\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the attached MediaStream is receiving data from source or\r\n     * not. If the stream property is null(because of mute or another reason)\r\n     * this method will return false.\r\n     * NOTE: This method doesn't indicate problem with the streams directly.\r\n     * For example in case of video mute the method will return false or if the\r\n     * user has disposed the track.\r\n     *\r\n     * @returns {boolean} true if the stream is receiving data and false\r\n     * this otherwise.\r\n     */\r\n    isReceivingData() {\r\n        if (this.isVideoTrack()\r\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.stream) {\r\n            return false;\r\n        }\r\n\r\n        // In older version of the spec there is no muted property and\r\n        // readyState can have value muted. In the latest versions\r\n        // readyState can have values \"live\" and \"ended\" and there is\r\n        // muted boolean property. If the stream is muted that means that\r\n        // we aren't receiving any data from the source. We want to notify\r\n        // the users for error if the stream is muted or ended on it's\r\n        // creation.\r\n\r\n        // For video blur enabled use the original video stream\r\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\r\n\r\n        return stream.getTracks().some(track =>\r\n            (!('readyState' in track) || track.readyState === 'live')\r\n                && (!('muted' in track) || track.muted !== true));\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this local track instance.\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\r\n    }\r\n}\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport transform from 'sdp-transform';\r\n\r\n/**\r\n * Rewrites the source information in the way sdp-transform expects.\r\n * Source information is split into multiple ssrc objects each containing\r\n * an id, attribute and value.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst write = function(session, opts) {\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            if (mLine.sources && mLine.sources.length) {\r\n                mLine.ssrcs = [];\r\n                mLine.sources.forEach(source => {\r\n                    Object.keys(source).forEach(attribute => {\r\n                        if (attribute === 'id') {\r\n                            return;\r\n                        }\r\n                        mLine.ssrcs.push({\r\n                            id: source.id,\r\n                            attribute,\r\n                            value: source[attribute]\r\n                        });\r\n                    });\r\n                });\r\n                delete mLine.sources;\r\n            }\r\n\r\n            // join ssrcs in ssrc groups\r\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\r\n                    && Array.isArray(ssrcGroup.ssrcs)) {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return transform.write(session, opts);\r\n};\r\n\r\n/**\r\n * Rewrites the source information that we get from sdp-transform.\r\n * All the ssrc lines with different attributes that belong to the\r\n * same ssrc are grouped into a single soure object with multiple key value pairs.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst parse = function(sdp) {\r\n    const session = transform.parse(sdp);\r\n\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            // group sources attributes by ssrc\r\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n                mLine.sources = [];\r\n                mLine.ssrcs.forEach(ssrc => {\r\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\r\n\r\n                    if (found > -1) {\r\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\r\n                    } else {\r\n                        const src = { id: ssrc.id };\r\n\r\n                        src[ssrc.attribute] = ssrc.value;\r\n                        mLine.sources.push(src);\r\n                    }\r\n                });\r\n                delete mLine.ssrcs;\r\n            }\r\n\r\n            // split ssrcs in ssrc groups\r\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs === 'string') {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return session;\r\n};\r\n\r\nexport default {\r\n    write,\r\n    parse\r\n};\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport transform from './transform.js';\r\n\r\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\r\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\r\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\r\n\r\n/**\r\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\r\n * to the m-line.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\r\n * the m-line.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n */\r\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\r\n    if (!mLine || !simGroup) {\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    simGroup.ssrcs.forEach(src => {\r\n        mLine.sources.push(findSourcebyId(src));\r\n\r\n        // find the related FID group member for this ssrc.\r\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\r\n\r\n        if (relatedFidGroup) {\r\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\r\n\r\n            mLine.sources.push(findSourcebyId(relatedSsrc));\r\n            mLine.ssrcGroups.push(relatedFidGroup);\r\n        }\r\n    });\r\n\r\n    // Add the SIM group last.\r\n    mLine.ssrcGroups.push(simGroup);\r\n}\r\n\r\n/**\r\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\r\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\r\n * group and the other ssrcs from the related FID groups are added to the same\r\n * m-line since they all belong to the same remote source. Since the ssrcs are\r\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\r\n * if not, just add the FID group.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} ssrc - the primary ssrc.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n * @returns {void}\r\n */\r\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\r\n    if (!mLine || !ssrc) {\r\n        return;\r\n    }\r\n    mLine.sources = [];\r\n    mLine.ssrcGroups = [];\r\n\r\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\r\n    if (!sourceGroups[ssrc.id]) {\r\n        mLine.sources.push(ssrc);\r\n        mLine.msid = ssrc.msid;\r\n\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    // Find the SIM and FID groups that this ssrc belongs to.\r\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\r\n    if (simGroup) {\r\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\r\n    } else if (fidGroup) {\r\n        // check if the other ssrc from this FID group is part of a SIM group\r\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\r\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\r\n\r\n        if (simGroup2) {\r\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\r\n        } else {\r\n            // Add the FID group ssrcs.\r\n            fidGroup.ssrcs.forEach(src => {\r\n                mLine.sources.push(findSourcebyId(src));\r\n            });\r\n            mLine.ssrcGroups.push(fidGroup);\r\n        }\r\n    }\r\n\r\n    // Set the msid for the media description using the msid attribute of the ssrcs.\r\n    mLine.msid = mLine.sources[0].msid;\r\n}\r\n\r\n/**\r\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\r\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\r\n * so we also check if mline for that ssrc exists.\r\n * For example:\r\n * If the following ssrcs are in a SIM group,\r\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\r\n *        <source ssrc=\\\"1806330949\\\"/>\r\n *        <source ssrc=\\\"4173145196\\\"/>\r\n *        <source ssrc=\\\"2002632207\\\"/>\r\n * </ssrc-group>\r\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\r\n * @param {Object} ssrc - ssrc to check.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} mlines - mlines in the description\r\n\r\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\r\n * exists, returns false otherwise.\r\n */\r\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\r\n    const findMatchingMline = mline => {\r\n        if (mline.sources) {\r\n            return mline.sources.some(source => source.id === ssrc.id);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    if (!mlines.find(findMatchingMline)) {\r\n        // check if this ssrc is member of a SIM group. If so, check if there\r\n        // is a matching m-line for the primary ssrc of the SIM group.\r\n        if (!sourceGroups[ssrc.id]) {\r\n            return false;\r\n        }\r\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n        if (simGroup) {\r\n            return mlines.some(mline => mline.sources\r\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\r\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\r\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\r\n\r\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Create an inverted sourceGroup map to put all the grouped ssrcs\r\n * in the same m-line.\r\n * @param {Array<Object>} sourceGroups\r\n * @returns {Object} - An inverted sourceGroup map.\r\n */\r\nfunction createSourceGroupMap(sourceGroups) {\r\n    const ssrc2group = {};\r\n\r\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\r\n        return ssrc2group;\r\n    }\r\n    sourceGroups.forEach(group => {\r\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\r\n            group.ssrcs.forEach(ssrc => {\r\n                if (typeof ssrc2group[ssrc] === 'undefined') {\r\n                    ssrc2group[ssrc] = [];\r\n                }\r\n                ssrc2group[ssrc].push(group);\r\n            });\r\n        }\r\n    });\r\n\r\n    return ssrc2group;\r\n}\r\n\r\n/**\r\n * Check if a new SDP requests an ICE restart.\r\n * @param {Object} - the parsed new SDP\r\n * @param {Object} - the parsed previous SDP\r\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\r\n */\r\nfunction checkForIceRestart(newDesc, oldDesc) {\r\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const newMLine = newDesc.media[0];\r\n    const oldMLine = oldDesc.media[0];\r\n\r\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\r\n}\r\n\r\n/**\r\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\r\n * vice versa.\r\n */\r\nexport class Interop {\r\n    /**\r\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\r\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toPlanB(description) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a unified plan sdp\r\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\r\n            console.warn('The description does not look like unified plan sdp');\r\n\r\n            return description;\r\n        }\r\n\r\n        const media = {};\r\n        const sessionMedia = session.media;\r\n\r\n        session.media = [];\r\n        sessionMedia.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                mLine.mid = 'data';\r\n                media[mLine.mid] = mLine;\r\n\r\n                return;\r\n            }\r\n            if (typeof media[type] === 'undefined') {\r\n                const bLine = clonedeep(mLine);\r\n\r\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\r\n                if (bLine.sources && Array.isArray(bLine.sources)) {\r\n                    bLine.sources.forEach(source => {\r\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\r\n                    });\r\n                }\r\n\r\n                // Do not signal the FID groups if there is no msid attribute present\r\n                // on the sources as sesison-accept with this source info will fail strophe\r\n                // validation and the session will not be established. This behavior is seen\r\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\r\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\r\n                // this case.\r\n                if (!bLine.ssrcGroups || !mLine.msid) {\r\n                    bLine.ssrcGroups = [];\r\n                }\r\n                delete bLine.msid;\r\n                bLine.mid = type;\r\n                media[type] = bLine;\r\n            } else if (mLine.msid) {\r\n                // Add sources and source-groups to the existing m-line of the same media type.\r\n                if (mLine.sources && Array.isArray(mLine.sources)) {\r\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\r\n                }\r\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\r\n                }\r\n            }\r\n        });\r\n        session.media = Object.values(media);\r\n\r\n        // Bundle the media only if it is active.\r\n        const bundle = [];\r\n\r\n        Object.values(media).forEach(mline => {\r\n            if (mline.direction !== 'inactive') {\r\n                bundle.push(mline.mid);\r\n            }\r\n        });\r\n\r\n        // We regenerate the BUNDLE group with the new mids.\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = bundle.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n        const resStr = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resStr\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\r\n     * @param {RTCSessionDescription} description - The description in plan-b format.\r\n     * @param {RTCSessionDescription} current - The current description set on\r\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\r\n     * remoteDescription on the RTCPeerConnection object.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toUnifiedPlan(description, current = null) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a plan-b sdp.\r\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\r\n            console.warn('The description does not look like plan-b');\r\n\r\n            return description;\r\n        }\r\n        const currentDesc = current ? transform.parse(current.sdp) : null;\r\n        const iceRestart = checkForIceRestart(session, currentDesc);\r\n        const newIceUfrag = session.media[0].iceUfrag;\r\n        const newIcePwd = session.media[0].icePwd;\r\n        const newFingerprint = session.media[0].fingerprint;\r\n        const media = {};\r\n\r\n        session.media.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    media[mLine.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\r\n\r\n                if (mLineForData) {\r\n                    currentDesc.media[mLineForData] = mLine;\r\n                    currentDesc.media[mLineForData].mid = mLineForData;\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\r\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\r\n\r\n            // If there are no sources advertised for a media type, add the description if this is the first\r\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\r\n            // recvonly ssrcs unlike Firefox and Safari.\r\n            if (!mLine.sources) {\r\n                if (!currentDesc) {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    media[mLine.mid] = newMline;\r\n                }\r\n\r\n                return;\r\n            }\r\n            mLine.sources.forEach((ssrc, idx) => {\r\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\r\n                // These ssrcs do not have the \"msid\" attribute set.\r\n                if (!ssrc.msid) {\r\n                    return;\r\n                }\r\n\r\n                // If there is no description set on the peerconnection, create new m-lines.\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\r\n                        return;\r\n                    }\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    newMline.direction = idx\r\n                        ? 'sendonly'\r\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\r\n                    newMline.bundleOnly = undefined;\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    media[newMline.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n\r\n                // Create and append the m-lines to the existing description.\r\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\r\n                    return;\r\n                }\r\n                const newMline = clonedeep(mLine);\r\n\r\n                newMline.mid = currentDesc.media.length.toString();\r\n                newMline.direction = 'sendonly';\r\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                currentDesc.media.push(newMline);\r\n            });\r\n        });\r\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\r\n        const mids = [];\r\n\r\n        session.media.forEach(mLine => {\r\n            mids.push(mLine.mid);\r\n            if (iceRestart) {\r\n                mLine.iceUfrag = newIceUfrag;\r\n                mLine.icePwd = newIcePwd;\r\n                mLine.fingerprint = newFingerprint;\r\n            }\r\n        });\r\n\r\n        // We regenerate the BUNDLE group (since we regenerated the mids)\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = mids.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n\r\n        // Increment the session version every time.\r\n        session.origin.sessionVersion++;\r\n        const resultSdp = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resultSdp\r\n        });\r\n    }\r\n}\r\n","import * as transform from 'sdp-transform';\r\n\r\n/**\r\n * Parses the primary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the primary SSRC number\r\n */\r\nexport function parsePrimarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[0], 10);\r\n}\r\n\r\n/**\r\n * Parses the secondary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the secondary SSRC number\r\n */\r\nexport function parseSecondarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[1], 10);\r\n}\r\n\r\n/**\r\n * Tells how many distinct SSRCs are contained in given media line.\r\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\r\n * @return {number}\r\n */\r\nfunction _getSSRCCount(mLine) {\r\n    if (!mLine.ssrcs) {\r\n        return 0;\r\n    }\r\n\r\n    return mLine.ssrcs\r\n        .map(ssrcInfo => ssrcInfo.id)\r\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n        .length;\r\n}\r\n\r\n/**\r\n * A wrapper around 'sdp-transform' media description object which provides\r\n * utility methods for common SDP/SSRC related operations.\r\n */\r\nclass MLineWrap {\r\n\r\n    /**\r\n     * Creates new <tt>MLineWrap</t>>\r\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    constructor(mLine) {\r\n        if (!mLine) {\r\n            throw new Error('mLine is undefined');\r\n        }\r\n\r\n        this.mLine = mLine;\r\n    }\r\n\r\n    /**\r\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\r\n     * one will be preassigned.\r\n     *\r\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    get ssrcs() {\r\n        if (!this.mLine.ssrcs) {\r\n            this.mLine.ssrcs = [];\r\n        }\r\n\r\n        return this.mLine.ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Setter for the mLine's \"ssrcs\" array.\r\n     *\r\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    set ssrcs(ssrcs) {\r\n        this.mLine.ssrcs = ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of the underlying media description.\r\n     * @return {string} the media direction name as defined in the SDP.\r\n     */\r\n    get direction() {\r\n        return this.mLine.direction;\r\n    }\r\n\r\n    /**\r\n     * Modifies the direction of the underlying media description.\r\n     * @param {string} direction the new direction to be set\r\n     */\r\n    set direction(direction) {\r\n        this.mLine.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Exposes the SSRC group array of the underlying media description object.\r\n     * @return {Array.<Object>}\r\n     */\r\n    get ssrcGroups() {\r\n        if (!this.mLine.ssrcGroups) {\r\n            this.mLine.ssrcGroups = [];\r\n        }\r\n\r\n        return this.mLine.ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Modifies the SSRC groups array of the underlying media description\r\n     * object.\r\n     * @param {Array.<Object>} ssrcGroups\r\n     */\r\n    set ssrcGroups(ssrcGroups) {\r\n        this.mLine.ssrcGroups = ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Obtains value from SSRC attribute.\r\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\r\n     * found\r\n     * @param {string} attrName the name of the SSRC attribute to be found.\r\n     * @return {string|undefined} the value of SSRC attribute or\r\n     * <tt>undefined</tt> if no such attribute exists.\r\n     */\r\n    getSSRCAttrValue(ssrcNumber, attrName) {\r\n        const attribute = this.ssrcs.find(\r\n            ssrcObj => ssrcObj.id === ssrcNumber\r\n            && ssrcObj.attribute === attrName);\r\n\r\n\r\n        return attribute && attribute.value;\r\n    }\r\n\r\n    /**\r\n     * Removes all attributes for given SSRC number.\r\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\r\n     * removed.\r\n     */\r\n    removeSSRC(ssrcNum) {\r\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcs\r\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\r\n    }\r\n\r\n    /**\r\n     * Adds SSRC attribute\r\n     * @param {object} ssrcObj the SSRC attribute object as defined in\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCAttribute(ssrcObj) {\r\n        this.ssrcs.push(ssrcObj);\r\n    }\r\n\r\n    /**\r\n     * Finds a SSRC group matching both semantics and SSRCs in order.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\r\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\r\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\r\n     * not found.\r\n     */\r\n    findGroup(semantics, ssrcs) {\r\n        return this.ssrcGroups.find(\r\n            group =>\r\n                group.semantics === semantics\r\n                    && (!ssrcs || ssrcs === group.ssrcs));\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name.\r\n     * @param {string} semantics the name of the semantics\r\n     * @return {Array.<object>} an array of SSRC group objects as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    findGroups(semantics) {\r\n        return this.ssrcGroups.filter(\r\n            group => group.semantics === semantics);\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name and group's primary SSRC.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {number} primarySSRC the primary SSRC number to be matched\r\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\r\n     */\r\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\r\n        return this.ssrcGroups.find(\r\n            group => group.semantics === semantics\r\n                && parsePrimarySSRC(group) === primarySSRC);\r\n    }\r\n\r\n    /**\r\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\r\n     * the first SSRC object with any 'msid' value.\r\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    findSSRCByMSID(msid) {\r\n        return this.ssrcs.find(\r\n            ssrcObj => ssrcObj.attribute === 'msid'\r\n                && (msid === null || ssrcObj.value === msid));\r\n    }\r\n\r\n    /**\r\n     * Gets the SSRC count for the underlying media description.\r\n     * @return {number}\r\n     */\r\n    getSSRCCount() {\r\n        return _getSSRCCount(this.mLine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying media description contains any SSRC groups.\r\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    containsAnySSRCGroups() {\r\n        return this.mLine.ssrcGroups !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the primary video SSRC.\r\n     * @returns {number|undefined} the primary video ssrc\r\n     * @throws Error if the underlying media description is not a video\r\n     */\r\n    getPrimaryVideoSsrc() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\r\n        }\r\n\r\n        const numSsrcs = _getSSRCCount(this.mLine);\r\n\r\n        if (numSsrcs === 1) {\r\n            // Not using \"ssrcs\" getter on purpose here\r\n            return this.mLine.ssrcs[0].id;\r\n        }\r\n\r\n        // Look for a SIM, FID, or FEC-FR group\r\n        if (this.mLine.ssrcGroups) {\r\n            const simGroup = this.findGroup('SIM');\r\n\r\n            if (simGroup) {\r\n                return parsePrimarySSRC(simGroup);\r\n            }\r\n            const fidGroup = this.findGroup('FID');\r\n\r\n            if (fidGroup) {\r\n                return parsePrimarySSRC(fidGroup);\r\n            }\r\n            const fecGroup = this.findGroup('FEC-FR');\r\n\r\n            if (fecGroup) {\r\n                return parsePrimarySSRC(fecGroup);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains RTX SSRC from the underlying video description (the\r\n     * secondary SSRC of the first \"FID\" group found)\r\n     * @param {number} primarySsrc the video ssrc for which to find the\r\n     * corresponding rtx ssrc\r\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\r\n     * one)\r\n     */\r\n    getRtxSSRC(primarySsrc) {\r\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\r\n\r\n\r\n        return fidGroup && parseSecondarySSRC(fidGroup);\r\n    }\r\n\r\n    /**\r\n     * Obtains all SSRCs contained in the underlying media description.\r\n     * @return {Array.<number>} an array with all SSRC as numbers.\r\n     */\r\n    getSSRCs() {\r\n        return this.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\r\n    }\r\n\r\n    /**\r\n     * Obtains primary video SSRCs.\r\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\r\n     * @throws Error if the wrapped media description is not a video.\r\n     */\r\n    getPrimaryVideoSSRCs() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\r\n        }\r\n\r\n        const videoSSRCs = this.getSSRCs();\r\n\r\n        for (const ssrcGroupInfo of this.ssrcGroups) {\r\n            // Right now, FID and FEC-FR groups are the only ones we parse to\r\n            // disqualify streams.  If/when others arise we'll\r\n            // need to add support for them here\r\n            if (ssrcGroupInfo.semantics === 'FID'\r\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\r\n                // secondary streams should be filtered out\r\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\r\n\r\n                videoSSRCs.splice(\r\n                    videoSSRCs.indexOf(secondarySsrc), 1);\r\n            }\r\n        }\r\n\r\n        return videoSSRCs;\r\n    }\r\n\r\n    /**\r\n     * Dumps all SSRC groups of this media description to JSON.\r\n     */\r\n    dumpSSRCGroups() {\r\n        return JSON.stringify(this.mLine.ssrcGroups);\r\n    }\r\n\r\n    /**\r\n     * Removes all SSRC groups which contain given SSRC number at any position.\r\n     * @param {number} ssrc the SSRC for which all matching groups are to be\r\n     * removed.\r\n     */\r\n    removeGroupsWithSSRC(ssrc) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\r\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\r\n    }\r\n\r\n    /**\r\n     * Removes groups that match given semantics.\r\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\r\n     */\r\n    removeGroupsBySemantics(semantics) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups\r\n            = this.mLine.ssrcGroups\r\n                .filter(groupInfo => groupInfo.semantics !== semantics);\r\n    }\r\n\r\n    /**\r\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\r\n     * @param {number} oldSSRC the old SSRC number\r\n     * @param {number} newSSRC the new SSRC number\r\n     */\r\n    replaceSSRC(oldSSRC, newSSRC) {\r\n        if (this.mLine.ssrcs) {\r\n            this.mLine.ssrcs.forEach(ssrcInfo => {\r\n                if (ssrcInfo.id === oldSSRC) {\r\n                    ssrcInfo.id = newSSRC;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds given SSRC group to this media description.\r\n     * @param {object} group the SSRC group object as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCGroup(group) {\r\n        this.ssrcGroups.push(group);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility class for SDP manipulation using the 'sdp-transform' library.\r\n *\r\n * Typical use usage scenario:\r\n *\r\n * const transformer = new SdpTransformWrap(rawSdp);\r\n * const videoMLine = transformer.selectMedia('video);\r\n * if (videoMLine) {\r\n *     videoMLiner.addSSRCAttribute({\r\n *         id: 2342343,\r\n *         attribute: \"cname\",\r\n *         value: \"someCname\"\r\n *     });\r\n *     rawSdp = transformer.toRawSdp();\r\n * }\r\n */\r\nexport class SdpTransformWrap {\r\n\r\n    /**\r\n     * Creates new instance and parses the raw SDP into objects using\r\n     * 'sdp-transform' lib.\r\n     * @param {string} rawSDP the SDP in raw text format.\r\n     */\r\n    constructor(rawSDP) {\r\n        this.parsedSDP = transform.parse(rawSDP);\r\n    }\r\n\r\n    /**\r\n     * Selects the first media SDP of given name.\r\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\r\n     * 'data'.\r\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\r\n     * line or <tt>null</tt> if not found. The object returned references\r\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\r\n     * (it's not a copy).\r\n     */\r\n    selectMedia(mediaType) {\r\n        const selectedMLine\r\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\r\n\r\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\r\n    }\r\n\r\n    /**\r\n     * Converts the currently stored SDP state in this instance to raw text SDP\r\n     * format.\r\n     * @return {string}\r\n     */\r\n    toRawSDP() {\r\n        return transform.write(this.parsedSDP);\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport MediaDirection from '../../service/RTC/MediaDirection';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport { SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\r\n * description getter. Modifies the SDP, so that it will contain muted local\r\n * video tracks description, even though their underlying {MediaStreamTrack}s\r\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\r\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\r\n * side.\r\n */\r\nexport default class LocalSdpMunger {\r\n\r\n    /**\r\n     * Creates new <tt>LocalSdpMunger</tt> instance.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {string} localEndpointId - The endpoint id of the local user.\r\n     */\r\n    constructor(tpc, localEndpointId) {\r\n        this.tpc = tpc;\r\n        this.localEndpointId = localEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Makes sure that muted local video tracks associated with the parent\r\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\r\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\r\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\r\n     * removed from the peerconnection).\r\n     *\r\n     * NOTE 1 video track is assumed\r\n     *\r\n     * @param {SdpTransformWrap} transformer the transformer instance which will\r\n     * be used to process the SDP.\r\n     * @return {boolean} <tt>true</tt> if there were any modifications to\r\n     * the SDP wrapped by <tt>transformer</tt>.\r\n     * @private\r\n     */\r\n    _addMutedLocalVideoTracksToSDP(transformer) {\r\n        // Go over each video tracks and check if the SDP has to be changed\r\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\r\n\r\n        if (!localVideos.length) {\r\n            return false;\r\n        } else if (localVideos.length !== 1) {\r\n            logger.error(\r\n                `${this.tpc} there is more than 1 video track ! `\r\n                    + 'Strange things may happen !', localVideos);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.tpc} unable to hack local video track SDP`\r\n                    + '- no \"video\" media');\r\n\r\n            return false;\r\n        }\r\n\r\n        let modified = false;\r\n\r\n        for (const videoTrack of localVideos) {\r\n            const muted = videoTrack.isMuted();\r\n            const mediaStream = videoTrack.getOriginalStream();\r\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\r\n\r\n            // During the mute/unmute operation there are periods of time when\r\n            // the track's underlying MediaStream is not added yet to\r\n            // the PeerConnection. The SDP needs to be munged in such case.\r\n            const isInPeerConnection\r\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\r\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\r\n\r\n            if (!shouldFakeSdp) {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            // Inject removed SSRCs\r\n            const requiredSSRCs\r\n                = this.tpc.isSimulcastOn()\r\n                    ? this.tpc.simulcast.ssrcCache\r\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\r\n\r\n            if (!requiredSSRCs.length) {\r\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\r\n\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            modified = true;\r\n\r\n            // We need to fake sendrecv.\r\n            // NOTE the SDP produced here goes only to Jicofo and is never set\r\n            // as localDescription. That's why\r\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\r\n            videoMLine.direction = MediaDirection.SENDRECV;\r\n\r\n            // Check if the recvonly has MSID\r\n            const primarySSRC = requiredSSRCs[0];\r\n\r\n            // FIXME The cname could come from the stream, but may turn out to\r\n            // be too complex. It is fine to come up with any value, as long as\r\n            // we only care about the actual SSRC values when deciding whether\r\n            // or not an update should be sent.\r\n            const primaryCname = `injected-${primarySSRC}`;\r\n\r\n            for (const ssrcNum of requiredSSRCs) {\r\n                // Remove old attributes\r\n                videoMLine.removeSSRC(ssrcNum);\r\n\r\n                // Inject\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'cname',\r\n                    value: primaryCname\r\n                });\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'msid',\r\n                    value: videoTrack.storedMSID\r\n                });\r\n            }\r\n            if (requiredSSRCs.length > 1) {\r\n                const group = {\r\n                    ssrcs: requiredSSRCs.join(' '),\r\n                    semantics: 'SIM'\r\n                };\r\n\r\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\r\n                    // Inject the group\r\n                    videoMLine.addSSRCGroup(group);\r\n                }\r\n            }\r\n\r\n            // Insert RTX\r\n            // FIXME in P2P RTX is used by Chrome regardless of config option\r\n            // status. Because of that 'source-remove'/'source-add'\r\n            // notifications are still sent to remove/add RTX SSRC and FID group\r\n            if (!this.tpc.options.disableRtx) {\r\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\r\n            }\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that can be set as the MSID attribute for a source.\r\n     *\r\n     * @param {string} mediaType - Media type of the source.\r\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\r\n     * @param {string} streamId - Id of the MediaStream associated with the source.\r\n     * @returns {string|null}\r\n     */\r\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\r\n        if (!(mediaType && trackId)) {\r\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\r\n\r\n            return null;\r\n        }\r\n        const pcId = this.tpc.id;\r\n\r\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\r\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\r\n        // and uses the msid for that.\r\n        if (streamId === '-' || !streamId) {\r\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\r\n        }\r\n\r\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\r\n    }\r\n\r\n    /**\r\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\r\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\r\n     * sign.\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\r\n     * session description which will be modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _transformMediaIdentifiers(mediaSection) {\r\n        const pcId = this.tpc.id;\r\n\r\n        for (const ssrcLine of mediaSection.ssrcs) {\r\n            switch (ssrcLine.attribute) {\r\n            case 'cname':\r\n            case 'label':\r\n            case 'mslabel':\r\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\r\n                break;\r\n            case 'msid': {\r\n                if (ssrcLine.value) {\r\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\r\n\r\n                    if (streamAndTrackIDs.length === 2) {\r\n                        ssrcLine.value\r\n                            = this._generateMsidAttribute(\r\n                                mediaSection.mLine?.type,\r\n                                streamAndTrackIDs[1],\r\n                                streamAndTrackIDs[0]);\r\n                    } else {\r\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\r\n        if (!this.tpc.usesUnifiedPlan()) {\r\n            return;\r\n        }\r\n\r\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\r\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\r\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\r\n        const mediaDirection = mediaSection.mLine?.direction;\r\n\r\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\r\n            mediaSection.ssrcs = undefined;\r\n            mediaSection.ssrcGroups = undefined;\r\n\r\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\r\n        // a=ssrc line with msid attribute for p2p connection.\r\n        } else {\r\n            const msidLine = mediaSection.mLine?.msid;\r\n            const trackId = msidLine && msidLine.split(' ')[1];\r\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\r\n\r\n            for (const source of sources) {\r\n                const msidExists = mediaSection.ssrcs\r\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\r\n\r\n                if (!msidExists) {\r\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\r\n\r\n                    mediaSection.ssrcs.push({\r\n                        id: source,\r\n                        attribute: 'msid',\r\n                        value: generatedMsid\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maybe modifies local description to fake local video tracks SDP when\r\n     * those are muted.\r\n     *\r\n     * @param {object} desc the WebRTC SDP object instance for the local\r\n     * description.\r\n     * @returns {RTCSessionDescription}\r\n     */\r\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\r\n        if (!desc) {\r\n            throw new Error('No local description passed in.');\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(desc.sdp);\r\n\r\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transformer.toRawSDP()\r\n            });\r\n        }\r\n\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * This transformation will make sure that stream identifiers are unique\r\n     * across all of the local PeerConnections even if the same stream is used\r\n     * by multiple instances at the same time.\r\n     * Each PeerConnection assigns different SSRCs to the same local\r\n     * MediaStream, but the MSID remains the same as it's used to identify\r\n     * the stream by the WebRTC backend. The transformation will append\r\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\r\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\r\n     *\r\n     * @param {RTCSessionDescription} sessionDesc - The local session\r\n     * description (this instance remains unchanged).\r\n     * @return {RTCSessionDescription} - Transformed local session description\r\n     * (a modified copy of the one given as the input).\r\n     */\r\n    transformStreamIdentifiers(sessionDesc) {\r\n        // FIXME similar check is probably duplicated in all other transformers\r\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\r\n            return sessionDesc;\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\r\n        const audioMLine = transformer.selectMedia('audio');\r\n\r\n        if (audioMLine) {\r\n            this._transformMediaIdentifiers(audioMLine);\r\n            this._injectSourceNames(audioMLine);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (videoMLine) {\r\n            this._transformMediaIdentifiers(videoMLine);\r\n            this._injectSourceNames(videoMLine);\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: sessionDesc.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\r\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\r\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\r\n     * modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _injectSourceNames(mediaSection) {\r\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            return;\r\n        }\r\n\r\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\r\n        const mediaType = mediaSection.mLine?.type;\r\n\r\n        if (!mediaType) {\r\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\r\n        }\r\n\r\n        for (const source of sources) {\r\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\r\n\r\n            if (!nameExists) {\r\n                const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n\r\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\r\n                mediaSection.ssrcs.push({\r\n                    id: source,\r\n                    attribute: 'name',\r\n                    value: `${this.localEndpointId}-${firstLetterOfMediaType}0`\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport SDPUtil from './SDPUtil';\r\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Begin helper functions\r\n */\r\n/**\r\n * Updates or inserts the appropriate rtx information for primarySsrc with\r\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\r\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\r\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\r\n * @param {MLineWrap} mLine\r\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\r\n *  primary ssrc\r\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\r\n */\r\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\r\n    const primarySsrc = primarySsrcInfo.id;\r\n    const primarySsrcMsid = primarySsrcInfo.msid;\r\n    const primarySsrcCname = primarySsrcInfo.cname;\r\n\r\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\r\n\r\n    if (previousRtxSSRC === rtxSsrc) {\r\n        return;\r\n    }\r\n    if (previousRtxSSRC) {\r\n        // Stream already had an rtx ssrc that is different than the one given,\r\n        //  remove all trace of the old one\r\n        mLine.removeSSRC(previousRtxSSRC);\r\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\r\n    }\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'cname',\r\n        value: primarySsrcCname\r\n    });\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'msid',\r\n        value: primarySsrcMsid\r\n    });\r\n    mLine.addSSRCGroup({\r\n        semantics: 'FID',\r\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\r\n    });\r\n}\r\n\r\n/**\r\n * End helper functions\r\n */\r\n\r\n/**\r\n * Adds any missing RTX streams for video streams\r\n *  and makes sure that they remain consistent\r\n */\r\nexport default class RtxModifier {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Map of video ssrc to corresponding RTX\r\n         *  ssrc\r\n         */\r\n        this.correspondingRtxSsrcs = new Map();\r\n    }\r\n\r\n    /**\r\n     * Clear the cached map of primary video ssrcs to\r\n     *  their corresponding rtx ssrcs so that they will\r\n     *  not be used for the next call to modifyRtxSsrcs\r\n     */\r\n    clearSsrcCache() {\r\n        this.correspondingRtxSsrcs.clear();\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary video ssrc -> rtx ssrc\r\n     *  mapping to be used in modifyRtxSsrcs\r\n     * @param {Map} ssrcMapping a mapping of primary video\r\n     *  ssrcs to their corresponding rtx ssrcs\r\n     */\r\n    setSsrcCache(ssrcMapping) {\r\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\r\n        this.correspondingRtxSsrcs = ssrcMapping;\r\n    }\r\n\r\n    /**\r\n     * Adds RTX ssrcs for any video ssrcs that don't\r\n     *  already have them.  If the video ssrc has been\r\n     *  seen before, and already had an RTX ssrc generated,\r\n     *  the same RTX ssrc will be used again.\r\n     * @param {string} sdpStr sdp in raw string format\r\n     */\r\n    modifyRtxSsrcs(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        return this.modifyRtxSsrcs2(videoMLine)\r\n            ? sdpTransformer.toRawSDP() : sdpStr;\r\n    }\r\n\r\n    /**\r\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\r\n     *  {@link MLineWrap} instance wrapping video media as an argument.\r\n     * @param {MLineWrap} videoMLine\r\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\r\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\r\n     */\r\n    modifyRtxSsrcs2(videoMLine) {\r\n        if (videoMLine.direction === 'recvonly') {\r\n\r\n            return false;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n\r\n            return false;\r\n        }\r\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\r\n\r\n        for (const ssrc of primaryVideoSsrcs) {\r\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\r\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\r\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\r\n\r\n            if (!correspondingRtxSsrc) {\r\n                // If there's one in the sdp already for it, we'll just set\r\n                //  that as the corresponding one\r\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\r\n\r\n                if (previousAssociatedRtxStream) {\r\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\r\n                } else {\r\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\r\n                }\r\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\r\n            }\r\n            updateAssociatedRtxStream(\r\n                videoMLine,\r\n                {\r\n                    id: ssrc,\r\n                    cname,\r\n                    msid\r\n                },\r\n                correspondingRtxSsrc);\r\n        }\r\n\r\n        // FIXME we're not looking into much details whether the SDP has been\r\n        // modified or not once the precondition requirements are met.\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Strip all rtx streams from the given sdp\r\n     * @param {string} sdpStr sdp in raw string format\r\n     * @returns {string} sdp string with all rtx streams stripped\r\n     */\r\n    stripRtx(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (!videoMLine.containsAnySSRCGroups()) {\r\n            logger.debug('RtxModifier doing nothing, '\r\n              + 'no video ssrcGroups present');\r\n\r\n            return sdpStr;\r\n        }\r\n        const fidGroups = videoMLine.findGroups('FID');\r\n\r\n        // Remove the fid groups from the mline\r\n\r\n        videoMLine.removeGroupsBySemantics('FID');\r\n\r\n        // Get the rtx ssrcs and remove them from the mline\r\n        for (const fidGroup of fidGroups) {\r\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\r\n\r\n            videoMLine.removeSSRC(rtxSsrc);\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    parsePrimarySSRC,\r\n    parseSecondarySSRC,\r\n    SdpTransformWrap\r\n} from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles the work of keeping video ssrcs consistent across multiple\r\n * o/a cycles, making it such that all stream operations can be\r\n * kept local and do not need to be signaled.\r\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\r\n * the primary video stream\r\n */\r\nexport default class SdpConsistency {\r\n    /**\r\n     * Constructor\r\n     * @param {string} logPrefix the log prefix appended to every logged\r\n     * message, currently used to distinguish for which\r\n     * <tt>TraceablePeerConnection</tt> the instance works.\r\n     */\r\n    constructor(logPrefix) {\r\n        this.clearVideoSsrcCache();\r\n        this.logPrefix = logPrefix;\r\n    }\r\n\r\n    /**\r\n     * Clear the cached video primary and primary rtx ssrcs so that\r\n     *  they will not be used for the next call to\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     */\r\n    clearVideoSsrcCache() {\r\n        this.cachedPrimarySsrc = null;\r\n        this.injectRecvOnly = false;\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary ssrc to be used in\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     * @param {number} primarySsrc the primarySsrc to be used\r\n     *  in future calls to makeVideoPrimarySsrcsConsistent\r\n     * @throws Error if <tt>primarySsrc</tt> is not a number\r\n     */\r\n    setPrimarySsrc(primarySsrc) {\r\n        if (typeof primarySsrc !== 'number') {\r\n            throw new Error('Primary SSRC must be a number!');\r\n        }\r\n        this.cachedPrimarySsrc = primarySsrc;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not there is a primary video SSRC cached already.\r\n     * @return {boolean}\r\n     */\r\n    hasPrimarySsrcCached() {\r\n        return Boolean(this.cachedPrimarySsrc);\r\n    }\r\n\r\n    /**\r\n     * Given an sdp string, either:\r\n     *  1) record the primary video and primary rtx ssrcs to be\r\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\r\n     *  2) change the primary and primary rtx ssrcs in the given sdp\r\n     *   to match the ones previously cached\r\n     * @param {string} sdpStr the sdp string to (potentially)\r\n     *  change to make the video ssrcs consistent\r\n     * @returns {string} a (potentially) modified sdp string\r\n     *  with ssrcs consistent with this class' cache\r\n     */\r\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        if (videoMLine.direction === 'recvonly') {\r\n            // If the mline is recvonly, we'll add the primary\r\n            //  ssrc as a recvonly ssrc\r\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\r\n                videoMLine.addSSRCAttribute({\r\n                    id: this.cachedPrimarySsrc,\r\n                    attribute: 'cname',\r\n                    value: `recvonly-${this.cachedPrimarySsrc}`\r\n                });\r\n            } else {\r\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\r\n            }\r\n        } else {\r\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\r\n\r\n            if (!newPrimarySsrc) {\r\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\r\n\r\n                return sdpStr;\r\n            }\r\n            if (this.cachedPrimarySsrc) {\r\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\r\n                for (const group of videoMLine.ssrcGroups) {\r\n                    if (group.semantics === 'FID') {\r\n                        const primarySsrc = parsePrimarySSRC(group);\r\n                        const rtxSsrc = parseSecondarySSRC(group);\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (primarySsrc === newPrimarySsrc) {\r\n                            group.ssrcs\r\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.cachedPrimarySsrc = newPrimarySsrc;\r\n            }\r\n            this.injectRecvOnly = true;\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nconst RTCEvents = require('../../service/RTC/RTCEvents');\r\n\r\nlet ttfmTrackerAudioAttached = false;\r\nlet ttfmTrackerVideoAttached = false;\r\n\r\n/**\r\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\r\n * container for every event in the list.\r\n */\r\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiRemoteTrack extends JitsiTrack {\r\n    /**\r\n     * Creates new JitsiRemoteTrack instance.\r\n     * @param {RTC} rtc the RTC service instance.\r\n     * @param {JitsiConference} conference the conference to which this track\r\n     *        belongs to\r\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\r\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\r\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\r\n     *        the new JitsiRemoteTrack\r\n     * @param {MediaType} mediaType the type of the media\r\n     * @param {VideoType} videoType the type of the video if applicable\r\n     * @param {number} ssrc the SSRC number of the Media Stream\r\n     * @param {boolean} muted the initial muted state\r\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\r\n     * P2P session\r\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\r\n     * @constructor\r\n     */\r\n    constructor(\r\n            rtc,\r\n            conference,\r\n            ownerEndpointId,\r\n            stream,\r\n            track,\r\n            mediaType,\r\n            videoType,\r\n            ssrc,\r\n            muted,\r\n            isP2P) {\r\n        super(\r\n            conference,\r\n            stream,\r\n            track,\r\n            () => {\r\n                // Nothing to do if the track is inactive.\r\n            },\r\n            mediaType,\r\n            videoType);\r\n        this.rtc = rtc;\r\n\r\n        // Prevent from mixing up type of SSRC which should be a number\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\r\n        }\r\n        this.ssrc = ssrc;\r\n        this.ownerEndpointId = ownerEndpointId;\r\n        this.muted = muted;\r\n        this.isP2P = isP2P;\r\n\r\n        logger.debug(`New remote track added: ${this}`);\r\n\r\n        // we want to mark whether the track has been ever muted\r\n        // to detect ttfm events for startmuted conferences, as it can\r\n        // significantly increase ttfm values\r\n        this.hasBeenMuted = muted;\r\n\r\n        // Bind 'onmute' and 'onunmute' event handlers\r\n        if (this.rtc && this.track) {\r\n            this._bindTrackHandlers();\r\n        }\r\n        this._containerHandlers = {};\r\n        containerEvents.forEach(event => {\r\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n    /**\r\n     * Attaches the track handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _bindTrackHandlers() {\r\n        this.track.addEventListener('mute', () => this._onTrackMute());\r\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\r\n        this.track.addEventListener('ended', () => {\r\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is muted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackMute() {\r\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is unmuted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackUnmute() {\r\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Sets current muted status and fires an events for the change.\r\n     * @param value the muted status.\r\n     */\r\n    setMute(value) {\r\n        if (this.muted === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.hasBeenMuted = true;\r\n        }\r\n\r\n        // we can have a fake video stream\r\n        if (this.stream) {\r\n            this.stream.muted = value;\r\n        }\r\n\r\n        this.muted = value;\r\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current muted status of the track.\r\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\r\n     * muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.ownerEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Return false;\r\n     */\r\n    isLocal() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the synchronization source identifier (SSRC) of this remote\r\n     * track.\r\n     *\r\n     * @returns {number} the SSRC of this remote track.\r\n     */\r\n    getSSRC() {\r\n        return this.ssrc;\r\n    }\r\n\r\n    /**\r\n     * Changes the video type of the track.\r\n     *\r\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\r\n     */\r\n    _setVideoType(type) {\r\n        if (this.videoType === type) {\r\n            return;\r\n        }\r\n        this.videoType = type;\r\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\r\n    }\r\n\r\n    /**\r\n     * Handles track play events.\r\n     */\r\n    _playCallback() {\r\n        const type = this.isVideoTrack() ? 'video' : 'audio';\r\n\r\n        const now = window.performance.now();\r\n\r\n        console.log(`(TIME) Render ${type}:\\t`, now);\r\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\r\n\r\n        // The conference can be started without calling GUM\r\n        // FIXME if there would be a module for connection times this kind\r\n        // of logic (gumDuration or ttfm) should end up there\r\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\r\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\r\n        const gumDuration\r\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\r\n\r\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\r\n        // waits until there are 2 participants to start Jingle sessions.\r\n        const ttfm = now\r\n            - (this.conference.getConnectionTimes()['session.initiate']\r\n                - this.conference.getConnectionTimes()['muc.joined'])\r\n            - gumDuration;\r\n\r\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\r\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\r\n\r\n        Statistics.sendAnalytics(createTtfmEvent(\r\n            {\r\n                'media_type': type,\r\n                muted: this.hasBeenMuted,\r\n                value: ttfm\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) {\r\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\r\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\r\n            return;\r\n        }\r\n\r\n        if (this.isAudioTrack()) {\r\n            ttfmTrackerAudioAttached = true;\r\n        }\r\n        if (this.isVideoTrack()) {\r\n            ttfmTrackerVideoAttached = true;\r\n        }\r\n\r\n        container.addEventListener('canplay', this._playCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) {\r\n        containerEvents.forEach(event => {\r\n            container.addEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) {\r\n        containerEvents.forEach(event => {\r\n            container.removeEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * An event handler for events triggered by the attached container.\r\n     *\r\n     * @param {string} type - The type of the event.\r\n     */\r\n    _containerEventHandler(type) {\r\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a string with a description of the current status of the track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    _getStatus() {\r\n        const { enabled, muted, readyState } = this.track;\r\n\r\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport MediaDirection from '../../service/RTC/MediaDirection';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger(__filename);\r\nconst SIM_LAYER_1_RID = '1';\r\nconst SIM_LAYER_2_RID = '2';\r\nconst SIM_LAYER_3_RID = '3';\r\n\r\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\r\n\r\n/**\r\n * Handles track related operations on TraceablePeerConnection when browser is\r\n * running in unified plan mode.\r\n */\r\nexport class TPCUtils {\r\n    /**\r\n     * Creates a new instance for a given TraceablePeerConnection\r\n     *\r\n     * @param peerconnection - the tpc instance for which we have utility functions.\r\n     * @param videoBitrates - the bitrates to be configured on the video senders for\r\n     * different resolutions both in unicast and simulcast mode.\r\n     */\r\n    constructor(peerconnection, videoBitrates) {\r\n        this.pc = peerconnection;\r\n        this.videoBitrates = videoBitrates.VP8 || videoBitrates;\r\n\r\n        /**\r\n         * The startup configuration for the stream encodings that are applicable to\r\n         * the video stream when a new sender is created on the peerconnection. The initial\r\n         * config takes into account the differences in browser's simulcast implementation.\r\n         *\r\n         * Encoding parameters:\r\n         * active - determine the on/off state of a particular encoding.\r\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\r\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\r\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\r\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\r\n         *  original resolution of the captured video.\r\n         */\r\n        this.localStreamEncodingsConfig = [\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\r\n                rid: SIM_LAYER_1_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.standard,\r\n                rid: SIM_LAYER_2_RID,\r\n                scaleResolutionDownBy: 2.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\r\n                rid: SIM_LAYER_3_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\r\n     *\r\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\r\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\r\n     * @returns {RTCRtpTransceiver}\r\n     */\r\n    _findTransceiver(mediaType, localTrack = null) {\r\n        let transceiver = null;\r\n\r\n        // Check if the local track has been removed from the peerconnection already.\r\n        const trackRemoved = !localTrack\r\n            || (localTrack\r\n                && browser.doesVideoMuteByStreamRemove()\r\n                && localTrack.isVideoTrack()\r\n                && localTrack.isMuted());\r\n\r\n        if (trackRemoved) {\r\n            transceiver = this.pc.peerconnection.getTransceivers()\r\n                .find(t => t.receiver?.track?.kind === mediaType);\r\n        } else if (localTrack) {\r\n            transceiver = this.pc.peerconnection.getTransceivers()\r\n                .find(t => t.sender?.track?.id === localTrack.getTrackId());\r\n        }\r\n\r\n        return transceiver;\r\n    }\r\n\r\n    /**\r\n     * Obtains stream encodings that need to be configured on the given track based\r\n     * on the track media type and the simulcast setting.\r\n     * @param {JitsiLocalTrack} localTrack\r\n     */\r\n    _getStreamEncodings(localTrack) {\r\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\r\n            return this.localStreamEncodingsConfig;\r\n        }\r\n\r\n        return localTrack.isVideoTrack()\r\n            ? [ {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.high\r\n            } ]\r\n            : [ { active: true } ];\r\n    }\r\n\r\n    /**\r\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\r\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\r\n     * plan since we have only one FID group per media description.\r\n     * @param {Object} description the webRTC session description instance for the remote\r\n     * description.\r\n     * @private\r\n     */\r\n    ensureCorrectOrderOfSsrcs(description) {\r\n        const parsedSdp = transform.parse(description.sdp);\r\n\r\n        parsedSdp.media.forEach(mLine => {\r\n            if (mLine.type === MediaType.AUDIO) {\r\n                return;\r\n            }\r\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\r\n                return;\r\n            }\r\n            let reorderedSsrcs = [];\r\n\r\n            const ssrcs = new Set();\r\n\r\n            mLine.ssrcGroups.map(group =>\r\n                group.ssrcs\r\n                    .split(' ')\r\n                    .filter(Boolean)\r\n                    .forEach(ssrc => ssrcs.add(ssrc)),\r\n            );\r\n\r\n            ssrcs.forEach(ssrc => {\r\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\r\n\r\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\r\n            });\r\n            mLine.ssrcs = reorderedSsrcs;\r\n        });\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Takes in a *unified plan* offer and inserts the appropriate\r\n     * parameters for adding simulcast receive support.\r\n     * @param {Object} desc - A session description object\r\n     * @param {String} desc.type - the type (offer/answer)\r\n     * @param {String} desc.sdp - the sdp content\r\n     *\r\n     * @return {Object} A session description (same format as above) object\r\n     * with its sdp field modified to advertise simulcast receive support\r\n     */\r\n    insertUnifiedPlanSimulcastReceive(desc) {\r\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\r\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\r\n        if (browser.usesSdpMungingForSimulcast()) {\r\n            return desc;\r\n        }\r\n        const sdp = transform.parse(desc.sdp);\r\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\r\n\r\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\r\n            // Make sure we don't have the simulcast recv line on video descriptions other than\r\n            // the first video description.\r\n            sdp.media.forEach((mline, i) => {\r\n                if (mline.type === MediaType.VIDEO && i !== idx) {\r\n                    sdp.media[i].rids = undefined;\r\n                    sdp.media[i].simulcast = undefined;\r\n\r\n                    // eslint-disable-next-line camelcase\r\n                    sdp.media[i].simulcast_03 = undefined;\r\n                }\r\n            });\r\n\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transform.write(sdp)\r\n            });\r\n        }\r\n\r\n        // In order of highest to lowest spatial quality\r\n        sdp.media[idx].rids = [\r\n            {\r\n                id: SIM_LAYER_1_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_2_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_3_RID,\r\n                direction: 'recv'\r\n            }\r\n        ];\r\n\r\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\r\n        // eslint-disable-next-line max-len\r\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\r\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\r\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\r\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\r\n\r\n        // eslint-disable-next-line camelcase\r\n        sdp.media[idx].simulcast_03 = {\r\n            value: simulcastLine\r\n        };\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\r\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\r\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\r\n    * @returns {void}\r\n    */\r\n    addTrack(localTrack, isInitiator) {\r\n        const track = localTrack.getTrack();\r\n\r\n        if (isInitiator) {\r\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\r\n            // to the peerconnection before a session-initiate is sent over to the peer.\r\n            const transceiverInit = {\r\n                direction: MediaDirection.SENDRECV,\r\n                streams: [ localTrack.getOriginalStream() ],\r\n                sendEncodings: []\r\n            };\r\n\r\n            if (!browser.isFirefox()) {\r\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\r\n            }\r\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\r\n        } else {\r\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\r\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\r\n            // unused \"recv-only\" transceiver.\r\n            this.pc.peerconnection.addTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    addTrackUnmute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const track = localTrack.getTrack();\r\n        const transceiver = this._findTransceiver(mediaType);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n        logger.debug(`${this.pc} Adding ${localTrack}`);\r\n\r\n        return transceiver.sender.replaceTrack(track);\r\n    }\r\n\r\n    /**\r\n     * Obtains the current local video track's height constraints based on the\r\n     * initial stream encodings configuration on the sender and the resolution\r\n     * of the current local track added to the peerconnection.\r\n     * @param {MediaStreamTrack} localTrack local video track\r\n     * @returns {Array[number]} an array containing the resolution heights of\r\n     * simulcast streams configured on the video sender.\r\n     */\r\n    getLocalStreamHeightConstraints(localTrack) {\r\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\r\n        if (browser.isReactNative()) {\r\n            return null;\r\n        }\r\n\r\n        const localVideoHeightConstraints = [];\r\n\r\n        // Firefox doesn't return the height of the desktop track, assume a min. height of 720.\r\n        const { height = 720 } = localTrack.getSettings();\r\n\r\n        for (const encoding of this.localStreamEncodingsConfig) {\r\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\r\n        }\r\n\r\n        return localVideoHeightConstraints;\r\n    }\r\n\r\n    /**\r\n     * Removes the track from the RTCRtpSender as part of the mute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    removeTrackMute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const transceiver = this._findTransceiver(mediaType, localTrack);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n\r\n        logger.debug(`${this.pc} Removing ${localTrack}`);\r\n\r\n        return transceiver.sender.replaceTrack(null);\r\n    }\r\n\r\n    /**\r\n     * Replaces the existing track on a RTCRtpSender with the given track.\r\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\r\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        if (oldTrack && newTrack) {\r\n            const mediaType = newTrack.getType();\r\n            const stream = newTrack.getOriginalStream();\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state,like\r\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\r\n            // do not have a mediastream attached. Replace track will be called again when the device is\r\n            // unmuted and the track will be replaced on the peerconnection then.\r\n            if (!stream) {\r\n                this.pc.localTracks.delete(oldTrack.rtcId);\r\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const transceiver = this._findTransceiver(mediaType, oldTrack);\r\n            const track = newTrack.getTrack();\r\n\r\n            if (!transceiver) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\r\n\r\n            return transceiver.sender.replaceTrack(track)\r\n                .then(() => {\r\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                    this.pc._addedStreams.push(stream);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                });\r\n        } else if (oldTrack && !newTrack) {\r\n            return this.removeTrackMute(oldTrack)\r\n                .then(() => {\r\n                    const mediaType = oldTrack.getType();\r\n                    const transceiver = this._findTransceiver(mediaType);\r\n\r\n                    // Change the direction on the transceiver to 'recvonly' so that a 'removetrack'\r\n                    // is fired on the associated media stream on the remote peer.\r\n                    if (transceiver) {\r\n                        transceiver.direction = MediaDirection.RECVONLY;\r\n                    }\r\n\r\n                    // Remove the old track from the list of local tracks.\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                });\r\n        } else if (newTrack && !oldTrack) {\r\n            return this.addTrackUnmute(newTrack)\r\n                .then(() => {\r\n                    const mediaType = newTrack.getType();\r\n                    const transceiver = this._findTransceiver(mediaType, newTrack);\r\n\r\n                    // Change the direction on the transceiver back to 'sendrecv' so that a 'track'\r\n                    // event is fired on the remote peer.\r\n                    if (transceiver) {\r\n                        transceiver.direction = MediaDirection.SENDRECV;\r\n                    }\r\n\r\n                    // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\r\n                    // for the newly added track using SDP munging which happens during the renegotiation.\r\n                    const promise = browser.usesSdpMungingForSimulcast()\r\n                        ? Promise.resolve()\r\n                        : this.setEncodings(newTrack);\r\n\r\n                    return promise\r\n                        .then(() => {\r\n                            // Add the new track to the list of local tracks.\r\n                            this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n                        });\r\n                });\r\n        }\r\n\r\n        logger.info(`${this.pc} TPCUtils.replaceTrack called with no new track and no old track`);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n    * Enables/disables audio transmission on the peer connection. When\r\n    * disabled the audio transceiver direction will be set to 'inactive'\r\n    * which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable audio media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setAudioTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.AUDIO, active);\r\n    }\r\n\r\n    /**\r\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\r\n     * @param {JitsiLocalTrack} track - the current track in use for which\r\n     * the encodings are to be set.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    setEncodings(track) {\r\n        const mediaType = track.getType();\r\n        const transceiver = this._findTransceiver(mediaType, track);\r\n        const parameters = transceiver?.sender?.getParameters();\r\n\r\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\r\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\r\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\r\n        if (!parameters?.encodings?.length) {\r\n            return Promise.resolve();\r\n        }\r\n        parameters.encodings = this._getStreamEncodings(track);\r\n\r\n        return transceiver.sender.setParameters(parameters);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables media transmission on the peerconnection by changing the direction\r\n     * on the transceiver for the specified media type.\r\n     * @param {String} mediaType - 'audio' or 'video'\r\n     * @param {boolean} active - true to enable media transmission or false\r\n     * to disable.\r\n     * @returns {void}\r\n     */\r\n    setMediaTransferActive(mediaType, active) {\r\n        const transceivers = this.pc.peerconnection.getTransceivers()\r\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n        const localTracks = this.pc.getLocalTracks(mediaType);\r\n\r\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\r\n        transceivers.forEach((transceiver, idx) => {\r\n            if (active) {\r\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\r\n                if (idx === 0 && localTracks.length) {\r\n                    transceiver.direction = MediaDirection.SENDRECV;\r\n                } else {\r\n                    transceiver.direction = MediaDirection.RECVONLY;\r\n                }\r\n            } else {\r\n                transceiver.direction = MediaDirection.INACTIVE;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Enables/disables video media transmission on the peer connection. When\r\n    * disabled the SDP video media direction in the local SDP will be adjusted to\r\n    * 'inactive' which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable video media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setVideoTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.VIDEO, active);\r\n    }\r\n\r\n    /**\r\n     * Ensures that the resolution of the stream encodings are consistent with the values\r\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\r\n     * This should prevent us from overriding the default values if the browser returns\r\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\r\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\r\n     * @returns {void}\r\n     */\r\n    updateEncodingsResolution(parameters) {\r\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\r\n            return;\r\n        }\r\n        const allEqualEncodings\r\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\r\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\r\n\r\n        // Implement the workaround only when all the encodings report the same resolution.\r\n        if (allEqualEncodings(parameters.encodings)) {\r\n            parameters.encodings.forEach((encoding, idx) => {\r\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* global __filename, RTCSessionDescription */\r\n\r\nimport { Interop } from '@jitsi/sdp-interop';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport MediaDirection from '../../service/RTC/MediaDirection';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\r\nimport browser from '../browser';\r\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\r\nimport RtxModifier from '../sdp/RtxModifier';\r\nimport SDP from '../sdp/SDP';\r\nimport SDPUtil from '../sdp/SDPUtil';\r\nimport SdpConsistency from '../sdp/SdpConsistency';\r\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\r\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\r\nimport RTC from './RTC';\r\nimport RTCUtils from './RTCUtils';\r\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\r\n\r\n// FIXME SDP tools should end up in some kind of util module\r\n\r\nconst logger = getLogger(__filename);\r\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\r\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\r\nconst DESKTOP_SHARE_RATE = 500000;\r\nconst HD_BITRATE = 2500000;\r\nconst LD_BITRATE = 200000;\r\nconst SD_BITRATE = 700000;\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Creates new instance of 'TraceablePeerConnection'.\r\n *\r\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\r\n * @param {number} id the peer connection id assigned by the parent RTC module.\r\n * @param {SignalingLayer} signalingLayer the signaling layer instance\r\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\r\n * @param {object} constraints WebRTC 'PeerConnection' constraints\r\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\r\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\r\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\r\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\r\n * peerconnection.\r\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\r\n *\r\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\r\n * debug the peer connection. Since many other responsibilities have been added\r\n * it would make sense to extract a separate class from it and come up with\r\n * a more suitable name.\r\n *\r\n * @constructor\r\n */\r\nexport default function TraceablePeerConnection(\r\n        rtc,\r\n        id,\r\n        signalingLayer,\r\n        pcConfig,\r\n        constraints,\r\n        isP2P,\r\n        options) {\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.audioTransferActive = !(options.startSilent === true);\r\n\r\n    /**\r\n     * The DTMF sender instance used to send DTMF tones.\r\n     *\r\n     * @type {RTCDTMFSender|undefined}\r\n     * @private\r\n     */\r\n    this._dtmfSender = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} TouchToneRequest\r\n     * @property {string} tones - The DTMF tones string as defined by\r\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n     * @property {number} duration - The amount of time in milliseconds that\r\n     * each DTMF should last.\r\n     * @property {string} interToneGap - The length of time in miliseconds to\r\n     * wait between tones.\r\n     */\r\n    /**\r\n     * TouchToneRequests which are waiting to be played. This queue is filled\r\n     * if there are touch tones currently being played.\r\n     *\r\n     * @type {Array<TouchToneRequest>}\r\n     * @private\r\n     */\r\n    this._dtmfTonesQueue = [];\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.videoTransferActive = true;\r\n\r\n    /**\r\n     * The parent instance of RTC service which created this\r\n     * <tt>TracablePeerConnection</tt>.\r\n     * @type {RTC}\r\n     */\r\n    this.rtc = rtc;\r\n\r\n    /**\r\n     * The peer connection identifier assigned by the RTC module.\r\n     * @type {number}\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Indicates whether or not this instance is used in a peer to peer\r\n     * connection.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2P = isP2P;\r\n\r\n    // FIXME: We should support multiple streams per jid.\r\n    /**\r\n     * The map holds remote tracks associated with this peer connection.\r\n     * It maps user's JID to media type and remote track\r\n     * (one track per media type per user's JID).\r\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\r\n     */\r\n    this.remoteTracks = new Map();\r\n\r\n    /**\r\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, JitsiLocalTrack>}\r\n     */\r\n    this.localTracks = new Map();\r\n\r\n    /**\r\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\r\n     * the underlying WebRTC PeerConnection.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._addedStreams = [];\r\n\r\n    /**\r\n     * @typedef {Object} TPCGroupInfo\r\n     * @property {string} semantics the SSRC groups semantics\r\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\r\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\r\n     * on...\r\n     */\r\n    /**\r\n     * @typedef {Object} TPCSSRCInfo\r\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\r\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\r\n     * groups\r\n     */\r\n    /**\r\n     * Holds the info about local track's SSRCs mapped per their\r\n     * {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, TPCSSRCInfo>}\r\n     */\r\n    this.localSSRCs = new Map();\r\n\r\n    /**\r\n     * The local ICE username fragment for this session.\r\n     */\r\n    this.localUfrag = null;\r\n\r\n    /**\r\n     * The remote ICE username fragment for this session.\r\n     */\r\n    this.remoteUfrag = null;\r\n\r\n    /**\r\n     * The signaling layer which operates this peer connection.\r\n     * @type {SignalingLayer}\r\n     */\r\n    this.signalingLayer = signalingLayer;\r\n\r\n    // SignalingLayer listeners\r\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n        this._peerVideoTypeChanged);\r\n\r\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_MUTED_CHANGED,\r\n        this._peerMutedChanged);\r\n    this.options = options;\r\n\r\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\r\n    // connection is P2P to rtcstats.\r\n    const safeConstraints = constraints || {};\r\n\r\n    safeConstraints.optional = safeConstraints.optional || [];\r\n\r\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\r\n    // Firefox and Safari just ignore it.\r\n    if (Array.isArray(safeConstraints.optional)) {\r\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\r\n    } else {\r\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\r\n    }\r\n\r\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\r\n\r\n    // The standard video bitrates are used in Unified plan when switching\r\n    // between camera/desktop tracks on the same sender.\r\n    const standardVideoBitrates = {\r\n        low: LD_BITRATE,\r\n        standard: SD_BITRATE,\r\n        high: HD_BITRATE\r\n    };\r\n\r\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\r\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\r\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\r\n        ? this.options.videoQuality.maxBitratesVideo\r\n        : standardVideoBitrates;\r\n\r\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\r\n    this.updateLog = [];\r\n    this.stats = {};\r\n    this.statsinterval = null;\r\n\r\n    /**\r\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\r\n     */\r\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\r\n\r\n    /**\r\n    * Flag used to indicate if the browser is running in unified  plan mode.\r\n    */\r\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\r\n\r\n    /**\r\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\r\n     * munging for codec selection.\r\n     */\r\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\r\n    this._usesTransceiverCodecPreferences\r\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\r\n\r\n    /**\r\n     * @type {number} The max number of stats to keep in this.stats. Limit to\r\n     * 300 values, i.e. 5 minutes; set to 0 to disable\r\n     */\r\n    this.maxstats = options.maxstats;\r\n\r\n    this.interop = new Interop();\r\n    const Simulcast = require('@jitsi/sdp-simulcast');\r\n\r\n    this.simulcast = new Simulcast(\r\n        {\r\n            numOfLayers: SIM_LAYER_RIDS.length,\r\n            explodeRemoteSimulcast: false,\r\n            usesUnifiedPlan: this._usesUnifiedPlan\r\n        });\r\n    this.sdpConsistency = new SdpConsistency(this.toString());\r\n\r\n    /**\r\n     * Munges local SDP provided to the Jingle Session in order to prevent from\r\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\r\n     * @type {LocalSdpMunger}\r\n     */\r\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\r\n\r\n    /**\r\n     * TracablePeerConnection uses RTC's eventEmitter\r\n     * @type {EventEmitter}\r\n     */\r\n    this.eventEmitter = rtc.eventEmitter;\r\n    this.rtxModifier = new RtxModifier();\r\n\r\n    /**\r\n     * The height constraint applied on the video sender.\r\n     */\r\n    this.senderVideoMaxHeight = null;\r\n\r\n    // override as desired\r\n    this.trace = (what, info) => {\r\n        logger.debug(what, info);\r\n\r\n        this.updateLog.push({\r\n            time: new Date(),\r\n            type: what,\r\n            value: info || ''\r\n        });\r\n    };\r\n    this.onicecandidate = null;\r\n    this.peerconnection.onicecandidate = event => {\r\n        this.trace(\r\n            'onicecandidate',\r\n            JSON.stringify(event.candidate, null, ' '));\r\n\r\n        if (this.onicecandidate !== null) {\r\n            this.onicecandidate(event);\r\n        }\r\n    };\r\n\r\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\r\n    if (this._usesUnifiedPlan) {\r\n        this.onTrack = evt => {\r\n            const stream = evt.streams[0];\r\n\r\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\r\n            stream.addEventListener('removetrack', e => {\r\n                this._remoteTrackRemoved(stream, e.track);\r\n            });\r\n        };\r\n        this.peerconnection.addEventListener('track', this.onTrack);\r\n    } else {\r\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\r\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\r\n    }\r\n    this.onsignalingstatechange = null;\r\n    this.peerconnection.onsignalingstatechange = event => {\r\n        this.trace('onsignalingstatechange', this.signalingState);\r\n        if (this.onsignalingstatechange !== null) {\r\n            this.onsignalingstatechange(event);\r\n        }\r\n    };\r\n    this.oniceconnectionstatechange = null;\r\n    this.peerconnection.oniceconnectionstatechange = event => {\r\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\r\n        if (this.oniceconnectionstatechange !== null) {\r\n            this.oniceconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.onnegotiationneeded = null;\r\n    this.peerconnection.onnegotiationneeded = event => {\r\n        this.trace('onnegotiationneeded');\r\n        if (this.onnegotiationneeded !== null) {\r\n            this.onnegotiationneeded(event);\r\n        }\r\n    };\r\n    this.onconnectionstatechange = null;\r\n    this.peerconnection.onconnectionstatechange = event => {\r\n        this.trace('onconnectionstatechange', this.connectionState);\r\n        if (this.onconnectionstatechange !== null) {\r\n            this.onconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.ondatachannel = null;\r\n    this.peerconnection.ondatachannel = event => {\r\n        this.trace('ondatachannel');\r\n        if (this.ondatachannel !== null) {\r\n            this.ondatachannel(event);\r\n        }\r\n    };\r\n\r\n    if (this.maxstats) {\r\n        this.statsinterval = window.setInterval(() => {\r\n            this.getStats().then(stats => {\r\n                if (typeof stats?.result === 'function') {\r\n                    const results = stats.result();\r\n\r\n                    for (let i = 0; i < results.length; ++i) {\r\n                        const res = results[i];\r\n\r\n                        res.names().forEach(name => {\r\n                            this._processStat(res, name, res.stat(name));\r\n                        });\r\n                    }\r\n                } else {\r\n                    stats.forEach(r => this._processStat(r, '', r));\r\n                }\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    logger.info(`Create new ${this}`);\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Process stat and adds it to the array of stats we store.\r\n * @param report the current stats report.\r\n * @param name the name of the report, if available\r\n * @param statValue the value to add.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processStat\r\n    = function(report, name, statValue) {\r\n        const id = `${report.id}-${name}`;\r\n        let s = this.stats[id];\r\n        const now = new Date();\r\n\r\n        if (!s) {\r\n            this.stats[id] = s = {\r\n                startTime: now,\r\n                endTime: now,\r\n                values: [],\r\n                times: []\r\n            };\r\n        }\r\n        s.values.push(statValue);\r\n        s.times.push(now.getTime());\r\n        if (s.values.length > this.maxstats) {\r\n            s.values.shift();\r\n            s.times.shift();\r\n        }\r\n        s.endTime = now;\r\n    };\r\n\r\n/**\r\n * Returns a string representation of a SessionDescription object.\r\n */\r\nconst dumpSDP = function(description) {\r\n    if (typeof description === 'undefined' || description === null) {\r\n        return '';\r\n    }\r\n\r\n    return `type: ${description.type}\\r\\n${description.sdp}`;\r\n};\r\n\r\n\r\n/**\r\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\r\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\r\n * succeeded and is up and running. We never see \"completed\" state for\r\n * the JVB connection, but it started appearing for the P2P one. This method\r\n * allows to adapt old logic to this new situation.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.getConnectionState = function() {\r\n    const state = this.peerconnection.iceConnectionState;\r\n\r\n    if (state === 'completed') {\r\n        return 'connected';\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n/**\r\n * Obtains the media direction for given {@link MediaType}. The method takes\r\n * into account whether or not there are any local tracks for media and\r\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\r\n * @param {MediaType} mediaType\r\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\r\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\r\n * etc.) which should be used when setting local description on the peer\r\n * connection.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\r\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        return isAddOperation\r\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\r\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\r\n    }\r\n\r\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\r\n\r\n    if (mediaTransferActive) {\r\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\r\n    }\r\n\r\n    return MediaDirection.INACTIVE;\r\n};\r\n\r\n/**\r\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\r\n * the set of remote endpoints specified.\r\n * @param {Array<string>} endpoints list of the endpoints\r\n * @param {string} mediaType 'audio' or 'video'\r\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\r\n */\r\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\r\n    let remoteTracks = [];\r\n    let receivers = [];\r\n\r\n    for (const endpoint of endpoints) {\r\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\r\n    }\r\n\r\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\r\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\r\n\r\n    receivers = this.peerconnection.getReceivers()\r\n        .filter(receiver => receiver.track\r\n            && receiver.track.kind === mediaType\r\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\r\n\r\n    return receivers;\r\n};\r\n\r\n/**\r\n * Tells whether or not this TPC instance is using Simulcast.\r\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\r\n * <tt>false</tt> if it's turned off.\r\n */\r\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\r\n    return !this.options.disableSimulcast;\r\n};\r\n\r\n/**\r\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\r\n        endpointId,\r\n        videoType) {\r\n    // Check if endpointId has a value to avoid action on random track\r\n    if (!endpointId) {\r\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\r\n\r\n        return;\r\n    }\r\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\r\n\r\n    if (videoTrack.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        videoTrack[0]._setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote track mute / unmute events.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new mute state\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerMutedChanged = function(\r\n        endpointId,\r\n        mediaType,\r\n        isMuted) {\r\n    // Check if endpointId is a value to avoid doing action on all remote tracks\r\n    if (!endpointId) {\r\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\r\n\r\n        return;\r\n    }\r\n    const track = this.getRemoteTracks(endpointId, mediaType);\r\n\r\n    if (track.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        track[0].setMute(isMuted);\r\n    }\r\n};\r\n\r\n/**\r\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\r\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\r\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\r\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\r\n */\r\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\r\n    const audioLevels = {};\r\n    const audioReceivers = speakerList.length\r\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\r\n        : this.peerconnection.getReceivers()\r\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\r\n\r\n    audioReceivers.forEach(remote => {\r\n        const ssrc = remote.getSynchronizationSources();\r\n\r\n        if (ssrc && ssrc.length) {\r\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\r\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\r\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\r\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\r\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\r\n        }\r\n    });\r\n\r\n    return audioLevels;\r\n};\r\n\r\n/**\r\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\r\n * argument is omitted the list of all local tracks will be returned.\r\n * @param {MediaType} [mediaType]\r\n * @return {Array<JitsiLocalTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = Array.from(this.localTracks.values());\r\n\r\n    if (mediaType !== undefined) {\r\n        tracks = tracks.filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Retrieves the local video track.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video track.\r\n */\r\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO)[0];\r\n};\r\n\r\n/**\r\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\r\n * any local tracks for given <tt>mediaType</tt>.\r\n * @param {MediaType} mediaType\r\n * @return {boolean}\r\n */\r\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\r\n    if (!mediaType) {\r\n        throw new Error('\"mediaType\" is required');\r\n    }\r\n\r\n    return this.getLocalTracks(mediaType).length > 0;\r\n};\r\n\r\n/**\r\n * Obtains all remote tracks currently known to this PeerConnection instance.\r\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\r\n * @param {MediaType} [mediaType] the remote tracks will be filtered\r\n * by their media type if this argument is specified.\r\n * @return {Array<JitsiRemoteTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getRemoteTracks = function(\r\n        endpointId,\r\n        mediaType) {\r\n    const remoteTracks = [];\r\n    const endpoints\r\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\r\n\r\n    for (const endpoint of endpoints) {\r\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\r\n\r\n        if (!endpointTrackMap) {\r\n\r\n            // Otherwise an empty Map() would have to be allocated above\r\n            // eslint-disable-next-line no-continue\r\n            continue;\r\n        }\r\n\r\n        for (const trackMediaType of endpointTrackMap.keys()) {\r\n            // per media type filtering\r\n            if (!mediaType || mediaType === trackMediaType) {\r\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\r\n\r\n                if (mediaTrack) {\r\n                    remoteTracks.push(mediaTrack);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return remoteTracks;\r\n};\r\n\r\n/**\r\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\r\n *\r\n * @param {string} id Endpoint id of the remote participant.\r\n * @returns {Array<string>} The sdp lines that have the ssrc information.\r\n */\r\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\r\n    const removeSsrcInfo = [];\r\n    const remoteTracks = this.getRemoteTracks(id);\r\n\r\n    if (!remoteTracks?.length) {\r\n        return removeSsrcInfo;\r\n    }\r\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\r\n    const sdp = new SDP(this.remoteDescription.sdp);\r\n\r\n    primarySsrcs.forEach((ssrc, idx) => {\r\n        for (const media of sdp.media) {\r\n            let lines = '';\r\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n            if (ssrcLines.length) {\r\n                if (!removeSsrcInfo[idx]) {\r\n                    removeSsrcInfo[idx] = '';\r\n                }\r\n\r\n                // Check if there are any FID groups present for the primary ssrc.\r\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\r\n\r\n                if (fidLines.length) {\r\n                    const secondarySsrc = fidLines[0].split(' ')[2];\r\n\r\n                    lines += `${fidLines[0]}\\r\\n`;\r\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\r\n                }\r\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                removeSsrcInfo[idx] += lines;\r\n            }\r\n        }\r\n    });\r\n\r\n    return removeSsrcInfo;\r\n};\r\n\r\n/**\r\n * Returns the target bitrates configured for the local video source.\r\n *\r\n * @returns {Object}\r\n */\r\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\r\n    const currentCodec = this.getConfiguredVideoCodec();\r\n\r\n    return this.videoBitrates[currentCodec.toUpperCase()] || this.videoBitrates;\r\n};\r\n\r\n/**\r\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\r\n * local and remote tracks bound to this instance.\r\n * @param {number} ssrc\r\n * @return {JitsiTrack|null}\r\n */\r\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\r\n    if (typeof ssrc !== 'number') {\r\n        throw new Error(`SSRC ${ssrc} is not a number`);\r\n    }\r\n    for (const localTrack of this.localTracks.values()) {\r\n        if (this.getLocalSSRC(localTrack) === ssrc) {\r\n            return localTrack;\r\n        }\r\n    }\r\n    for (const remoteTrack of this.getRemoteTracks()) {\r\n        if (remoteTrack.getSSRC() === ssrc) {\r\n            return remoteTrack;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\r\n * both local and remote tracks bound to this instance.\r\n * @param {string} id\r\n * @return {number|null}\r\n */\r\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\r\n\r\n    const findTrackById = track => track.getTrack().id === id;\r\n    const localTrack = this.getLocalTracks().find(findTrackById);\r\n\r\n    if (localTrack) {\r\n        return this.getLocalSSRC(localTrack);\r\n    }\r\n\r\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\r\n\r\n    if (remoteTrack) {\r\n        return remoteTrack.getSSRC();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Called when new remote MediaStream is added to the PeerConnection.\r\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\r\n    const streamId = RTC.getStreamID(stream);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Bind 'addtrack'/'removetrack' event handlers\r\n    if (browser.isChromiumBased()) {\r\n        stream.onaddtrack = event => {\r\n            this._remoteTrackAdded(stream, event.track);\r\n        };\r\n        stream.onremovetrack = event => {\r\n            this._remoteTrackRemoved(stream, event.track);\r\n        };\r\n    }\r\n\r\n    // Call remoteTrackAdded for each track in the stream\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackAdded(stream, audioTrack);\r\n    }\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackAdded(stream, videoTrack);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\r\n * handle streams on per track basis). Finds the owner and the SSRC for\r\n * the track and passes that to ChatRoom for further processing.\r\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\r\n * the parent of the track\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\r\n * participant.\r\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\r\n * for the remote participant in unified plan.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const mediaType = track.kind;\r\n\r\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\r\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\r\n\r\n    // look up an associated JID for a stream id\r\n    if (!mediaType) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `MediaType undefined for remote track, stream id: ${streamId}`\r\n            ));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    const remoteSDP = this._usesUnifiedPlan\r\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\r\n        : new SDP(this.remoteDescription.sdp);\r\n    let mediaLines;\r\n\r\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\r\n    // 'msid' attribute of the stream.\r\n    if (this._usesUnifiedPlan) {\r\n        if (transceiver && transceiver.mid) {\r\n            const mid = transceiver.mid;\r\n\r\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\r\n        } else {\r\n            mediaLines = remoteSDP.media.filter(mls => {\r\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\r\n\r\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\r\n            });\r\n        }\r\n    } else {\r\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\r\n    }\r\n\r\n    if (!mediaLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\r\n\r\n    ssrcLines\r\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\r\n    if (!ssrcLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\r\n    // with global error handler anyway\r\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\r\n    const trackSsrc = Number(ssrcStr);\r\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\r\n\r\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\r\n\r\n        // Abort\r\n        return;\r\n    } else if (!ownerEndpointId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\r\n\r\n    const peerMediaInfo\r\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\r\n\r\n    if (!peerMediaInfo) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\r\n\r\n        return;\r\n    }\r\n\r\n    const muted = peerMediaInfo.muted;\r\n    const videoType = peerMediaInfo.videoType; // can be undefined\r\n\r\n    this._createRemoteTrack(\r\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\r\n};\r\n\r\n// FIXME cleanup params\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Initializes a new JitsiRemoteTrack instance with the data provided by\r\n * the signaling layer and SDP.\r\n *\r\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\r\n * @param {MediaStream} stream the WebRTC stream instance\r\n * @param {MediaStreamTrack} track the WebRTC track instance\r\n * @param {MediaType} mediaType the track's type of the media\r\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\r\n * @param {number} ssrc the track's main SSRC number\r\n * @param {boolean} muted the initial muted status\r\n */\r\nTraceablePeerConnection.prototype._createRemoteTrack = function(\r\n        ownerEndpointId,\r\n        stream,\r\n        track,\r\n        mediaType,\r\n        videoType,\r\n        ssrc,\r\n        muted) {\r\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\r\n\r\n    if (!remoteTracksMap) {\r\n        remoteTracksMap = new Map();\r\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\r\n    }\r\n\r\n    const existingTrack = remoteTracksMap.get(mediaType);\r\n\r\n    if (existingTrack && existingTrack.getTrack() === track) {\r\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\r\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\r\n\r\n        return;\r\n    } else if (existingTrack) {\r\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\r\n            + 'deleting the existing track');\r\n\r\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\r\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\r\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\r\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\r\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\r\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\r\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\r\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\r\n    }\r\n\r\n    const remoteTrack\r\n        = new JitsiRemoteTrack(\r\n                this.rtc,\r\n                this.rtc.conference,\r\n                ownerEndpointId,\r\n                stream,\r\n                track,\r\n                mediaType,\r\n                videoType,\r\n                ssrc,\r\n                muted,\r\n                this.isP2P);\r\n\r\n    remoteTracksMap.set(mediaType, remoteTrack);\r\n\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Handles remote stream removal.\r\n * @param stream the WebRTC MediaStream object which is being removed from the\r\n * PeerConnection\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\r\n    if (!RTC.isUserStream(stream)) {\r\n        const id = RTC.getStreamID(stream);\r\n\r\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Call remoteTrackRemoved for each track in the stream\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackRemoved(stream, videoTrack);\r\n    }\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackRemoved(stream, audioTrack);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote media track removal.\r\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\r\n * of the track.\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\r\n * removed from the PeerConnection.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\r\n        stream,\r\n        track) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const trackId = track && RTC.getTrackID(track);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\r\n\r\n    if (!streamId) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!trackId) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\r\n        // NOTE this warning is always printed when user leaves the room,\r\n        // because we remove remote tracks manually on MUC member left event,\r\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\r\n        // ignore this warning, but still it's better to keep it printed for\r\n        // debugging purposes.\r\n        //\r\n        // We could change the behaviour to emit track removed only from here,\r\n        // but the order of the events will change and consuming apps could\r\n        // behave unexpectedly (the \"user left\" event would come before \"track\r\n        // removed\" events).\r\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\r\n    }\r\n};\r\n\r\n/**\r\n * Finds remote track by it's stream and track ids.\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @return {JitsiRemoteTrack|undefined} the track's instance or\r\n * <tt>undefined</tt> if not found.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    // .find will break the loop once the first match is found\r\n    for (const endpointTrackMap of this.remoteTracks.values()) {\r\n        for (const mediaTrack of endpointTrackMap.values()) {\r\n            // FIXME verify and try to use ===\r\n            /* eslint-disable eqeqeq */\r\n            if (mediaTrack.getStreamId() == streamId\r\n                && mediaTrack.getTrackId() == trackId) {\r\n                return mediaTrack;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n * (resource part of the JID). Returns array of removed tracks.\r\n *\r\n * @param {string} owner - The resource part of the MUC JID.\r\n * @returns {JitsiRemoteTrack[]}\r\n */\r\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\r\n    const removedTracks = [];\r\n    const remoteTracksMap = this.remoteTracks.get(owner);\r\n\r\n    if (remoteTracksMap) {\r\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\r\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\r\n\r\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\r\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\r\n\r\n        this.remoteTracks.delete(owner);\r\n    }\r\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\r\n\r\n    return removedTracks;\r\n};\r\n\r\n/**\r\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\r\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\r\n * @param {JitsiRemoteTrack} toBeRemoved\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\r\n    toBeRemoved.dispose();\r\n    const participantId = toBeRemoved.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    if (!remoteTracksMap) {\r\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\r\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\r\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\r\n    }\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\r\n};\r\n\r\n/**\r\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\r\n * track ids.\r\n *\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\r\n * <tt>undefined</tt> if no track matching given stream and track ids was\r\n * found.\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\r\n\r\n    if (toBeRemoved) {\r\n        this._removeRemoteTrack(toBeRemoved);\r\n    }\r\n\r\n    return toBeRemoved;\r\n};\r\n\r\n/**\r\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\r\n * @param {RTCSessionDescription} desc the local description.\r\n * @return {Map<string,TrackSSRCInfo>}\r\n */\r\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\r\n    /**\r\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\r\n     * @type {Map<string,TrackSSRCInfo>}\r\n     */\r\n    const ssrcMap = new Map();\r\n\r\n    /**\r\n     * Groups mapped by primary SSRC number\r\n     * @type {Map<number,Array<SSRCGroupInfo>>}\r\n     */\r\n    const groupsMap = new Map();\r\n\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument');\r\n\r\n        return ssrcMap;\r\n    }\r\n\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (!Array.isArray(session.media)) {\r\n        return ssrcMap;\r\n    }\r\n\r\n    let media = session.media;\r\n\r\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\r\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\r\n    if (this._usesUnifiedPlan) {\r\n        media = [];\r\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\r\n            const mLine = session.media.find(m => m.type === mediaType);\r\n\r\n            mLine && media.push(mLine);\r\n        });\r\n    }\r\n\r\n    for (const mLine of media) {\r\n        if (!Array.isArray(mLine.ssrcs)) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        if (Array.isArray(mLine.ssrcGroups)) {\r\n            for (const group of mLine.ssrcGroups) {\r\n                if (typeof group.semantics !== 'undefined'\r\n                    && typeof group.ssrcs !== 'undefined') {\r\n                    // Parse SSRCs and store as numbers\r\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\r\n                    const primarySSRC = groupSSRCs[0];\r\n\r\n                    // Note that group.semantics is already present\r\n                    group.ssrcs = groupSSRCs;\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (!groupsMap.has(primarySSRC)) {\r\n                        groupsMap.set(primarySSRC, []);\r\n                    }\r\n                    groupsMap.get(primarySSRC).push(group);\r\n                }\r\n            }\r\n        }\r\n\r\n        let ssrcs = mLine.ssrcs;\r\n\r\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\r\n        ssrcs = this._usesUnifiedPlan\r\n            ? ssrcs.filter(s => s.attribute === 'cname')\r\n            : ssrcs.filter(s => s.attribute === 'msid');\r\n\r\n        for (const ssrc of ssrcs) {\r\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\r\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\r\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\r\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\r\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\r\n            const ssrcNumber = ssrc.id;\r\n            let ssrcInfo = ssrcMap.get(key);\r\n\r\n            if (!ssrcInfo) {\r\n                ssrcInfo = {\r\n                    ssrcs: [],\r\n                    groups: [],\r\n                    msid: key\r\n                };\r\n                ssrcMap.set(key, ssrcInfo);\r\n            }\r\n            ssrcInfo.ssrcs.push(ssrcNumber);\r\n\r\n            if (groupsMap.has(ssrcNumber)) {\r\n                const ssrcGroups = groupsMap.get(ssrcNumber);\r\n\r\n                for (const group of ssrcGroups) {\r\n                    ssrcInfo.groups.push(group);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n};\r\n\r\n/**\r\n * Takes a SessionDescription object and returns a \"normalized\" version.\r\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\r\n * only SSRCs.\r\n */\r\nconst normalizePlanB = function(desc) {\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument');\r\n\r\n        return desc;\r\n    }\r\n\r\n    // eslint-disable-next-line no-shadow\r\n    const transform = require('sdp-transform');\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (typeof session !== 'undefined'\r\n            && typeof session.media !== 'undefined'\r\n            && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n\r\n            // Chrome appears to be picky about the order in which a=ssrc lines\r\n            // are listed in an m-line when rtx is enabled (and thus there are\r\n            // a=ssrc-group lines with FID semantics). Specifically if we have\r\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\r\n            // the \"a=ssrc:S1\" lines, SRD fails.\r\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\r\n            // first.\r\n            const firstSsrcs = [];\r\n            const newSsrcLines = [];\r\n\r\n            if (typeof mLine.ssrcGroups !== 'undefined'\r\n                && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(group => {\r\n                    if (typeof group.semantics !== 'undefined'\r\n                        && group.semantics === 'FID') {\r\n                        if (typeof group.ssrcs !== 'undefined') {\r\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(mLine.ssrcs)) {\r\n                let i;\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] === 'object'\r\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\r\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                        delete mLine.ssrcs[i];\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                    }\r\n                }\r\n\r\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\r\n            }\r\n        });\r\n    }\r\n\r\n    const resStr = transform.write(session);\r\n\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: resStr\r\n    });\r\n};\r\n\r\n/**\r\n * Unified plan differentiates a remote track not associated with a stream using\r\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\r\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\r\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\r\n * line. Normally the ssrcs are not used by the client, as the bridge controls\r\n * media flow, but keep one reference to the ssrc for the p2p case.\r\n *\r\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\r\n * @private\r\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\r\n */\r\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\r\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\r\n        return ssrcLines;\r\n    }\r\n\r\n    let filteredLines = [ ...ssrcLines ];\r\n\r\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\r\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\r\n        .map(ssrcLine => ssrcLine.id);\r\n\r\n    problematicSsrcIds.forEach(ssrcId => {\r\n        // Find the cname which is to be modified and left in.\r\n        const cnameLine = filteredLines.find(line =>\r\n            line.id === ssrcId && line.attribute === 'cname');\r\n\r\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\r\n\r\n        // Remove all of lines for the ssrc.\r\n        filteredLines\r\n            = filteredLines.filter(line => line.id !== ssrcId);\r\n\r\n        // But re-add the cname line so there is a reference kept to the ssrc\r\n        // in the SDP.\r\n        filteredLines.push(cnameLine);\r\n    });\r\n\r\n    return filteredLines;\r\n}\r\n\r\n/**\r\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\r\n * @param {Object} localDescription the SDP object as defined by WebRTC.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n */\r\nconst enforceSendRecv = function(localDescription, options) {\r\n    if (!localDescription) {\r\n        throw new Error('No local description passed in.');\r\n    }\r\n\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\r\n    let changed = false;\r\n\r\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\r\n        if (options.startSilent) {\r\n            audioMedia.direction = MediaDirection.INACTIVE;\r\n        } else {\r\n            audioMedia.direction = MediaDirection.SENDRECV;\r\n        }\r\n\r\n        changed = true;\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\r\n\r\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\r\n        videoMedia.direction = MediaDirection.SENDRECV;\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n *\r\n * @param {JitsiLocalTrack} localTrack\r\n */\r\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\r\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\r\n\r\n    return ssrcInfo && ssrcInfo.ssrcs[0];\r\n};\r\n\r\n/**\r\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\r\n * same msid but no ssrc-group, since unified plan signals the simulcast\r\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\r\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\r\n * an ssrc-group line to make Jicofo happy.\r\n * @param desc A session description object (with 'type' and 'sdp' fields)\r\n * @return A session description object with its sdp field modified to\r\n * contain an inject ssrc-group for simulcast\r\n */\r\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\r\n    = function(desc) {\r\n        const sdp = transform.parse(desc.sdp);\r\n        const video = sdp.media.find(mline => mline.type === 'video');\r\n\r\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\r\n        video.ssrcGroups = video.ssrcGroups || [];\r\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\r\n\r\n        if (video.simulcast || video.simulcast_03) {\r\n            const ssrcs = [];\r\n\r\n            if (fidGroups && fidGroups.length) {\r\n                fidGroups.forEach(group => {\r\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\r\n                });\r\n            } else {\r\n                video.ssrcs.forEach(ssrc => {\r\n                    if (ssrc.attribute === 'msid') {\r\n                        ssrcs.push(ssrc.id);\r\n                    }\r\n                });\r\n            }\r\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\r\n                // Group already exists, no need to do anything\r\n                return desc;\r\n            }\r\n\r\n            video.ssrcGroups.push({\r\n                semantics: 'SIM',\r\n                ssrcs: ssrcs.join(' ')\r\n            });\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    };\r\n\r\n/* eslint-disable-next-line vars-on-top */\r\nconst getters = {\r\n    signalingState() {\r\n        return this.peerconnection.signalingState;\r\n    },\r\n    iceConnectionState() {\r\n        return this.peerconnection.iceConnectionState;\r\n    },\r\n    connectionState() {\r\n        return this.peerconnection.connectionState;\r\n    },\r\n    localDescription() {\r\n        let desc = this.peerconnection.localDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug(`${this} getLocalDescription no localDescription found`);\r\n\r\n            return {};\r\n        }\r\n\r\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\r\n\r\n        // If the browser is running in unified plan mode and this is a jvb connection,\r\n        // transform the SDP to Plan B first.\r\n        if (this._usesUnifiedPlan && !this.isP2P) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace('getLocalDescription::postTransform (Plan B)',\r\n                dumpSDP(desc));\r\n\r\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\r\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\r\n                dumpSDP(desc));\r\n        } else if (!this._usesUnifiedPlan) {\r\n            if (browser.doesVideoMuteByStreamRemove()) {\r\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\r\n                logger.debug(\r\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\r\n            }\r\n\r\n            // What comes out of this getter will be signalled over Jingle to\r\n            // the other peer, so we need to make sure the media direction is\r\n            // 'sendrecv' because we won't change the direction later and don't want\r\n            // the other peer to think we can't send or receive.\r\n            //\r\n            // Note that the description we set in chrome does have the accurate\r\n            // direction (e.g. 'recvonly'), since that is technically what is\r\n            // happening (check setLocalDescription impl).\r\n            desc = enforceSendRecv(desc, this.options);\r\n        }\r\n\r\n        // See the method's doc for more info about this transformation.\r\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\r\n\r\n        return desc;\r\n    },\r\n    remoteDescription() {\r\n        let desc = this.peerconnection.remoteDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\r\n\r\n            return {};\r\n        }\r\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\r\n\r\n        if (this._usesUnifiedPlan) {\r\n            if (this.isP2P) {\r\n                // Adjust the media direction for p2p based on whether a local source has been added.\r\n                desc = this._adjustRemoteMediaDirection(desc);\r\n            } else {\r\n                // If this is a jvb connection, transform the SDP to Plan B first.\r\n                desc = this.interop.toPlanB(desc);\r\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\r\n            }\r\n        }\r\n\r\n        return desc;\r\n    }\r\n};\r\n\r\nObject.keys(getters).forEach(prop => {\r\n    Object.defineProperty(\r\n        TraceablePeerConnection.prototype,\r\n        prop, {\r\n            get: getters[prop]\r\n        }\r\n    );\r\n});\r\n\r\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\r\n    return this.localSSRCs.get(rtcId);\r\n};\r\n\r\n/**\r\n * Checks if low fps screensharing is in progress.\r\n *\r\n * @private\r\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\r\n */\r\nTraceablePeerConnection.prototype._isSharingLowFpsScreen = function() {\r\n    return this._isSharingScreen() && this._capScreenshareBitrate;\r\n};\r\n\r\n/**\r\n * Checks if screensharing is in progress.\r\n *\r\n * @returns {boolean}  Returns true if a desktop track has been added to the\r\n * peerconnection, false otherwise.\r\n */\r\nTraceablePeerConnection.prototype._isSharingScreen = function() {\r\n    const track = this.getLocalVideoTrack();\r\n\r\n    return track && track.videoType === VideoType.DESKTOP;\r\n};\r\n\r\n/**\r\n * Munges the order of the codecs in the SDP passed based on the preference\r\n * set through config.js settings. All instances of the specified codec are\r\n * moved up to the top of the list when it is preferred. The specified codec\r\n * is deleted from the list if the configuration specifies that the codec be\r\n * disabled.\r\n * @param {RTCSessionDescription} description that needs to be munged.\r\n * @returns {RTCSessionDescription} the munged description.\r\n */\r\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\r\n    if (!this.codecPreference) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n\r\n    // Only the m-line that defines the source the browser will be sending should need to change.\r\n    // This is typically the first m-line with the matching media type.\r\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    if (!mLine) {\r\n        return description;\r\n    }\r\n\r\n    if (this.codecPreference.enable) {\r\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n        // High profile codecs give better quality at the expense of higher load which\r\n        // we do not want on mobile clients.\r\n        // Jicofo offers only the baseline code for the jvb connection.\r\n        // TODO - add check for mobile browsers once js-utils provides that check.\r\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n        }\r\n\r\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\r\n        // as soon as the browser switches to VP9.\r\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\r\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\r\n            const bitrates = this.videoBitrates.VP9 || this.videoBitrates;\r\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\r\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\r\n\r\n            // Use only the HD bitrate for now as there is no API available yet for configuring\r\n            // the bitrates on the individual SVC layers.\r\n            mLine.bandwidth = [ {\r\n                type: 'AS',\r\n                limit\r\n            } ];\r\n        } else {\r\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\r\n            // This is needed on react native clients as react-native-webrtc returns the\r\n            // SDP that the application passed instead of returning the SDP off the native side.\r\n            // This line automatically gets cleared on web on every renegotiation.\r\n            mLine.bandwidth = undefined;\r\n        }\r\n    } else {\r\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Checks if given track belongs to this peerconnection instance.\r\n *\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.containsTrack = function(track) {\r\n    if (track.isLocal()) {\r\n        return this.localTracks.has(track.rtcId);\r\n    }\r\n\r\n    const participantId = track.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\r\n};\r\n\r\n/**\r\n * Add {@link JitsiLocalTrack} to this TPC.\r\n * @param {JitsiLocalTrack} track\r\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\r\n * @returns {Promise<void>} - resolved when done.\r\n */\r\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\r\n    const rtcId = track.rtcId;\r\n\r\n    logger.info(`${this} adding ${track}`);\r\n\r\n    if (this.localTracks.has(rtcId)) {\r\n\r\n        return Promise.reject(new Error(`${track} is already in ${this}`));\r\n    }\r\n\r\n    this.localTracks.set(rtcId, track);\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        try {\r\n            this.tpcUtils.addTrack(track, isInitiator);\r\n        } catch (error) {\r\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n    } else {\r\n        // Use addStream API for the plan-b case.\r\n        const webrtcStream = track.getOriginalStream();\r\n\r\n        if (webrtcStream) {\r\n            this._addStream(webrtcStream);\r\n\r\n        // It's not ok for a track to not have a WebRTC stream if:\r\n        } else if (!browser.doesVideoMuteByStreamRemove()\r\n                    || track.isAudioTrack()\r\n                    || (track.isVideoTrack() && !track.isMuted())) {\r\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\r\n        }\r\n\r\n        // Muted video tracks do not have WebRTC stream\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\r\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\r\n\r\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\r\n            const simGroup\r\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\r\n            }\r\n            const fidGroups\r\n                = ssrcInfo.groups.filter(\r\n                    groupInfo => groupInfo.semantics === 'FID');\r\n\r\n            if (fidGroups) {\r\n                const rtxSsrcMapping = new Map();\r\n\r\n                fidGroups.forEach(fidGroup => {\r\n                    const primarySsrc = fidGroup.ssrcs[0];\r\n                    const rtxSsrc = fidGroup.ssrcs[1];\r\n\r\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\r\n                });\r\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\r\n            }\r\n        }\r\n    }\r\n    let promiseChain = Promise.resolve();\r\n\r\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\r\n    if (browser.isFirefox()) {\r\n        promiseChain = promiseChain.then(() => this.tpcUtils.setEncodings(track));\r\n    }\r\n\r\n    return promiseChain;\r\n};\r\n\r\n/**\r\n * Adds local track as part of the unmute operation.\r\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\r\n * operation\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\r\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\r\n        // Abort\r\n        return Promise.reject('Track not found on the peerconnection');\r\n    }\r\n\r\n    logger.info(`${this} Adding track=${track} as unmute`);\r\n    const webRtcStream = track.getOriginalStream();\r\n\r\n    if (!webRtcStream) {\r\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\r\n\r\n        return Promise.reject('Stream not found');\r\n    }\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        return this.tpcUtils.addTrackUnmute(track);\r\n    }\r\n\r\n    this._addStream(webRtcStream);\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Adds WebRTC media stream to the underlying PeerConnection\r\n * @param {MediaStream} mediaStream\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\r\n    this.peerconnection.addStream(mediaStream);\r\n    this._addedStreams.push(mediaStream);\r\n};\r\n\r\n/**\r\n * Removes WebRTC media stream from the underlying PeerConection\r\n * @param {MediaStream} mediaStream\r\n */\r\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\r\n    this.peerconnection.removeStream(mediaStream);\r\n    this._addedStreams\r\n        = this._addedStreams.filter(stream => stream !== mediaStream);\r\n};\r\n\r\n/**\r\n * This method when called will check if given <tt>localTrack</tt> belongs to\r\n * this TPC (that it has been previously added using {@link addTrack}). If the\r\n * track does not belong an error message will be logged.\r\n * @param {string} methodName the method name that will be logged in an error\r\n * message\r\n * @param {JitsiLocalTrack} localTrack\r\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\r\n * <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\r\n        methodName,\r\n        localTrack) {\r\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\r\n\r\n    if (!doesBelong) {\r\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\r\n    }\r\n\r\n    return doesBelong;\r\n};\r\n\r\n/**\r\n * Returns the codec that is configured on the client as the preferred video codec.\r\n * This takes into account the current order of codecs in the local description sdp.\r\n *\r\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\r\n * video in the local SDP.\r\n */\r\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\r\n    const sdp = this.peerconnection.localDescription?.sdp;\r\n    const defaultCodec = CodecMimeType.VP8;\r\n\r\n    if (!sdp) {\r\n        return defaultCodec;\r\n    }\r\n    const parsedSdp = transform.parse(sdp);\r\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\r\n    const codec = mLine.rtp[0].codec;\r\n\r\n    if (codec) {\r\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n    }\r\n\r\n    return defaultCodec;\r\n};\r\n\r\n/**\r\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\r\n *\r\n * @param {number} maxFps framerate to be used for desktop track capture.\r\n */\r\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\r\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\r\n\r\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\r\n};\r\n\r\n/**\r\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\r\n * the next renegotiation happens.\r\n *\r\n * @param {CodecMimeType} preferredCodec the preferred codec.\r\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\r\n    // If both enable and disable are set, disable settings will prevail.\r\n    const enable = disabledCodec === null;\r\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\r\n\r\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\r\n        this.codecPreference.enable = enable;\r\n        this.codecPreference.mimeType = mimeType;\r\n    } else if (preferredCodec || disabledCodec) {\r\n        this.codecPreference = {\r\n            enable,\r\n            mediaType: MediaType.VIDEO,\r\n            mimeType\r\n        };\r\n    } else {\r\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\r\n            atleast one value is needed`);\r\n    }\r\n};\r\n\r\n/**\r\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\r\n * the underlying WebRTC PeerConnection.\r\n * @param {MediaStream} mediaStream\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\r\n    return this._addedStreams.indexOf(mediaStream) > -1;\r\n};\r\n\r\n/**\r\n * Remove local track from this TPC.\r\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\r\n *\r\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\r\n *       The same applies to addTrack.\r\n */\r\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStream',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\r\n\r\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return;\r\n    }\r\n    this.localTracks.delete(localTrack.rtcId);\r\n    this.localSSRCs.delete(localTrack.rtcId);\r\n\r\n    if (webRtcStream) {\r\n        this.peerconnection.removeStream(webRtcStream);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given media type.\r\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\r\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\r\n};\r\n\r\n/**\r\n * Returns the receiver corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\r\n    return this.peerconnection.getReceivers().find(r => r.track === track);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\r\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n * <tt>oldTrack</tt>\r\n *\r\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\r\n * replaced\r\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\r\n * @returns {Promise<boolean>} - If the promise resolves with true,\r\n * renegotiation will be needed. Otherwise no renegotiation is needed.\r\n */\r\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    if (this._usesUnifiedPlan) {\r\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\r\n\r\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\r\n\r\n            // Renegotiate when SDP is used for simulcast munging or when in p2p mode.\r\n            .then(() => (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()) || this.isP2P);\r\n    }\r\n\r\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    if (oldTrack) {\r\n        this.removeTrack(oldTrack);\r\n    }\r\n    if (newTrack) {\r\n        promiseChain = this.addTrack(newTrack);\r\n    }\r\n\r\n    return promiseChain.then(() => true);\r\n};\r\n\r\n/**\r\n * Removes local track as part of the mute operation.\r\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\r\n * the mute operation.\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStreamMute',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\r\n\r\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return Promise.reject('Track not found in the peerconnection');\r\n    }\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        return this.tpcUtils.removeTrackMute(localTrack);\r\n    }\r\n\r\n    if (webRtcStream) {\r\n        logger.info(`${this} Removing track=${localTrack} as mute`);\r\n        this._removeStream(webRtcStream);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\r\n\r\n    return Promise.reject('Stream not found');\r\n};\r\n\r\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\r\n    this.trace('createDataChannel', label, opts);\r\n\r\n    return this.peerconnection.createDataChannel(label, opts);\r\n};\r\n\r\n/**\r\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\r\n * in the SDP so that simulcast is properly activated.\r\n *\r\n * @param {Object} localSdp the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\r\n        localSdp) {\r\n    let sdpStr = localSdp.sdp;\r\n\r\n    const videoStartIndex = sdpStr.indexOf('m=video');\r\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\r\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n\r\n    if (simStartIndex === -1\r\n        || otherStartIndex === -1\r\n        || otherStartIndex === simStartIndex) {\r\n        return localSdp;\r\n    }\r\n\r\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\r\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\r\n\r\n    sdpStr = sdpStr.replace(simStr, '');\r\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\r\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\r\n    const simStrTrimmed = simStr.trim();\r\n    const sdpTail = sdpStr.slice(otherEndIndex);\r\n\r\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\r\n\r\n    return new RTCSessionDescription({\r\n        type: localSdp.type,\r\n        sdp: sdpStr\r\n    });\r\n};\r\n\r\n/**\r\n * Will adjust audio and video media direction in the given SDP object to\r\n * reflect the current status of the {@link audioTransferActive} and\r\n * {@link videoTransferActive} flags.\r\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    let modifiedDirection = false;\r\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\r\n\r\n    if (audioMedia) {\r\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\r\n\r\n        if (audioMedia.direction !== desiredAudioDirection) {\r\n            audioMedia.direction = desiredAudioDirection;\r\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn(`${this} No \"audio\" media found in the local description`);\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\r\n\r\n    if (videoMedia) {\r\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\r\n\r\n        if (videoMedia.direction !== desiredVideoDirection) {\r\n            videoMedia.direction = desiredVideoDirection;\r\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn(`${this} No \"video\" media found in the local description`);\r\n    }\r\n\r\n    if (modifiedDirection) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\r\n * media connection.\r\n *\r\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\r\n * @returns the transformed remoteDescription.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\r\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\r\n\r\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\r\n        const media = transformer.selectMedia(mediaType);\r\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\r\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\r\n\r\n        media.direction = hasLocalSource && hasRemoteSource\r\n            ? MediaDirection.SENDRECV\r\n            : hasLocalSource\r\n                ? MediaDirection.RECVONLY\r\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: remoteDescription.type,\r\n        sdp: transformer.toRawSDP()\r\n    });\r\n};\r\n\r\n/**\r\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\r\n * on values set through config.js, if present.\r\n *\r\n * @param {RTCSessionDescription} description that needs to be munged.\r\n * @returns {RTCSessionDescription} the munged description.\r\n */\r\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\r\n    const { audioQuality } = this.options;\r\n\r\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n    const mLines = parsedSdp.media;\r\n\r\n    for (const mLine of mLines) {\r\n        if (mLine.type === 'audio') {\r\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\r\n\r\n            if (!payload) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\r\n\r\n            if (!fmtpOpus) {\r\n                fmtpOpus = {\r\n                    payload,\r\n                    config: ''\r\n                };\r\n            }\r\n\r\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\r\n            let sdpChanged = false;\r\n\r\n            if (audioQuality?.stereo) {\r\n                fmtpConfig.stereo = 1;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (audioQuality?.opusMaxAverageBitrate) {\r\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (!sdpChanged) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let mungedConfig = '';\r\n\r\n            for (const key of Object.keys(fmtpConfig)) {\r\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\r\n            }\r\n\r\n            fmtpOpus.config = mungedConfig.trim();\r\n        }\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\r\n    let localSdp = description;\r\n\r\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\r\n\r\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\r\n    localSdp = this._mungeOpus(localSdp);\r\n\r\n    if (!this._usesUnifiedPlan) {\r\n        localSdp = this._adjustLocalMediaDirection(localSdp);\r\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\r\n    } else if (!this.isP2P) {\r\n\r\n        // if we're using unified plan, transform to it first.\r\n        localSdp = this.interop.toUnifiedPlan(localSdp);\r\n        this.trace(\r\n            'setLocalDescription::postTransform (Unified Plan)',\r\n            dumpSDP(localSdp));\r\n    }\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\r\n    if (!this._usesTransceiverCodecPreferences) {\r\n        localSdp = this._mungeCodecOrder(localSdp);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setLocalDescription(localSdp)\r\n            .then(() => {\r\n                this.trace('setLocalDescriptionOnSuccess');\r\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\r\n\r\n                if (localUfrag !== this.localUfrag) {\r\n                    this.localUfrag = localUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setLocalDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n                    err, this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables audio media transmission on this peer connection. When\r\n * disabled the SDP audio media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\r\n    logger.debug(`${this} audio transfer active: ${active}`);\r\n    const changed = this.audioTransferActive !== active;\r\n\r\n    this.audioTransferActive = active;\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        this.tpcUtils.setAudioTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sets the degradation preference on the video sender. This setting determines if\r\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\r\n * to 'maintain-resolution' when a desktop track is being shared instead.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug(`${this} Browser does not support RTCRtpSender`);\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n    const preference = this._isSharingLowFpsScreen()\r\n\r\n        // Prefer resolution for low fps share.\r\n        ? DEGRADATION_PREFERENCE_DESKTOP\r\n\r\n        // Prefer frame-rate for high fps share and camera.\r\n        : DEGRADATION_PREFERENCE_CAMERA;\r\n\r\n    logger.info(`${this} Setting a degradation preference [preference=${preference},track=${localVideoTrack}`);\r\n    parameters.degradationPreference = preference;\r\n    this.tpcUtils.updateEncodingsResolution(parameters);\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\n/**\r\n * Sets the max bitrate on the RTCRtpSender so that the\r\n * bitrate of the enocder doesn't exceed the configured value.\r\n * This is needed for the desktop share until spec-complaint\r\n * simulcast is implemented.\r\n * @param {JitsiLocalTrack} localTrack - the local track whose\r\n * max bitrate is to be configured.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\r\n    // For VP9, max bitrate is configured by setting b=AS value in SDP. Browsers do\r\n    // not yet support setting max bitrates for individual VP9 SVC layers.\r\n    if (this.getConfiguredVideoCodec() === CodecMimeType.VP9 || !window.RTCRtpSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const videoType = localVideoTrack.getVideoType();\r\n\r\n    // Apply the maxbitrates on the video track when one of the conditions is met.\r\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\r\n    // 2. Track is a low fps desktop track.\r\n    // 3. The client is running in Unified plan mode (the same sender is re-used for different types\r\n    // of tracks so bitrates have to be configured whenever the local tracks are replaced).\r\n    if (!(this.options?.videoQuality?.maxBitratesVideo || this._isSharingLowFpsScreen() || this._usesUnifiedPlan)) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const presenterEnabled = localVideoTrack._originalStream\r\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters.encodings?.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                const bitrate = this._isSharingLowFpsScreen()\r\n\r\n                    // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on.\r\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\r\n                    // if capScreenshareBitrate option is enabled then simulcast is turned off for the stream.\r\n                    ? presenterEnabled ? HD_BITRATE : DESKTOP_SHARE_RATE\r\n\r\n                    // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome, because if simulcast is\r\n                    // enabled for screen and maxBitrates are set then Chrome will not send the desktop stream.\r\n                    : videoType === VideoType.DESKTOP && browser.isChromiumBased()\r\n                        ? undefined\r\n                        : this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\r\n\r\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\r\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\r\n                parameters.encodings[encoding].maxBitrate = bitrate;\r\n            }\r\n        }\r\n    } else {\r\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\r\n        let bitrate = this.getTargetVideoBitrates()?.high;\r\n\r\n        if (videoType === VideoType.CAMERA) {\r\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\r\n            const scaleFactor = this.senderVideoMaxHeight\r\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\r\n                : 1;\r\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\r\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\r\n\r\n            if (encoding) {\r\n                logger.info(`${this} Setting max bitrate=${encoding.maxBitrate} bps on track=${localVideoTrack}`);\r\n                bitrate = encoding.maxBitrate;\r\n            }\r\n        }\r\n        parameters.encodings[0].maxBitrate = bitrate;\r\n    }\r\n    this.tpcUtils.updateEncodingsResolution(parameters);\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\r\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    /* eslint-disable no-param-reassign */\r\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\r\n    description = this._mungeOpus(description);\r\n\r\n    /* eslint-enable no-param-reassign */\r\n\r\n    if (!this._usesUnifiedPlan) {\r\n        // TODO the focus should squeze or explode the remote simulcast\r\n        if (this.isSimulcastOn()) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (simulcast)',\r\n                dumpSDP(description));\r\n        }\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = normalizePlanB(description);\r\n    } else if (!this.isP2P) {\r\n        const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = this.interop.toUnifiedPlan(description, currentDescription);\r\n        this.trace(\r\n            'setRemoteDescription::postTransform (Unified)',\r\n            dumpSDP(description));\r\n\r\n        if (this.isSimulcastOn()) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description);\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (sim receive)',\r\n                dumpSDP(description));\r\n        }\r\n    }\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js.\r\n    // eslint-disable-next-line no-param-reassign\r\n    description = this._mungeCodecOrder(description);\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.trace('setRemoteDescriptionOnSuccess');\r\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\r\n\r\n                if (remoteUfrag !== this.remoteUfrag) {\r\n                    this.remoteUfrag = remoteUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setRemoteDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n                    err,\r\n                    this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on\r\n * the user preferred value. If simulcast is enabled on the peerconection, all the\r\n * simulcast encodings that have a resolution height lower or equal to the value\r\n * provided will remain active. For the non-simulcast case, video constraint is\r\n * applied on the track.\r\n * @param {number} frameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\r\n    if (frameHeight < 0) {\r\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\r\n    }\r\n\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Need to explicitly check for null as 0 is falsy, but a valid value\r\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\r\n\r\n    this.senderVideoMaxHeight = newHeight;\r\n\r\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\r\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\r\n    // lib-jitsi-meet.\r\n    if (newHeight === null) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\r\n\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\r\n        return Promise.resolve();\r\n    }\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters?.encodings?.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\r\n        this.encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\r\n            .map(height => height <= newHeight);\r\n\r\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\r\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\r\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\r\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\r\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\r\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\r\n\r\n        if (newHeight > 0 && ldStreamIndex !== -1) {\r\n            this.encodingsEnabledState[ldStreamIndex] = true;\r\n        }\r\n\r\n        // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in progress\r\n        // There is no way to enable or disable simulcast during the call since we are re-using the same sender.\r\n        // Safari is an exception here since it does not send the desktop stream at all if only the high resolution\r\n        // stream is enabled.\r\n        if (this._isSharingLowFpsScreen() && this._usesUnifiedPlan && !browser.isWebKitBased()) {\r\n            const highResolutionEncoding = browser.isFirefox() ? 0 : this.encodingsEnabledState.length - 1;\r\n\r\n            this.encodingsEnabledState = this.encodingsEnabledState\r\n                .map((encoding, idx) => idx === highResolutionEncoding);\r\n        }\r\n\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\r\n            }\r\n        }\r\n        this.tpcUtils.updateEncodingsResolution(parameters);\r\n    } else if (newHeight > 0) {\r\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\r\n        parameters.encodings[0].scaleResolutionDownBy\r\n            = localVideoTrack.videoType === VideoType.DESKTOP || localVideoTrack.resolution <= newHeight\r\n                ? 1\r\n                : Math.floor(localVideoTrack.resolution / newHeight);\r\n        parameters.encodings[0].active = true;\r\n    } else {\r\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\r\n        parameters.encodings[0].active = false;\r\n    }\r\n\r\n    logger.info(`${this} setting max height=${newHeight},encodings=${JSON.stringify(parameters.encodings)}`);\r\n\r\n    return videoSender.setParameters(parameters).then(() => {\r\n        localVideoTrack.maxEnabledResolution = newHeight;\r\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n\r\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\r\n        // the send resolution changes.\r\n        if (this.isP2P || !this.isSimulcastOn()) {\r\n            return this.setMaxBitRate();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables video media transmission on this peer connection. When\r\n * disabled the SDP video media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\r\n    logger.debug(`${this} video transfer active: ${active}`);\r\n    const changed = this.videoTransferActive !== active;\r\n\r\n    this.videoTransferActive = active;\r\n\r\n    if (this._usesUnifiedPlan) {\r\n        this.tpcUtils.setVideoTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sends DTMF tones if possible.\r\n *\r\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\r\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\r\n *\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\r\n    if (!this._dtmfSender) {\r\n        if (this.peerconnection.getSenders) {\r\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\r\n\r\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\r\n        }\r\n\r\n        if (!this._dtmfSender) {\r\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\r\n\r\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\r\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\r\n            }\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\r\n        }\r\n\r\n        if (this._dtmfSender) {\r\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\r\n        }\r\n    }\r\n\r\n    if (this._dtmfSender) {\r\n        if (this._dtmfSender.toneBuffer) {\r\n            this._dtmfTonesQueue.push({\r\n                tones,\r\n                duration,\r\n                interToneGap\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    } else {\r\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\r\n * a single tone.\r\n *\r\n * @param {Object} event - The tonechange event which indicates what characters\r\n * are left to be played for the current tone.\r\n * @private\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype._onToneChange = function(event) {\r\n    // An empty event.tone indicates the current tones have finished playing.\r\n    // Automatically start playing any queued tones on finish.\r\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\r\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    }\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n * the recvonly video stream.\r\n */\r\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\r\n    const newSSRC = SDPUtil.generateSsrc();\r\n\r\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\r\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection forget the current primary video\r\n * SSRC.\r\n */\r\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\r\n    logger.info(`${this} Clearing primary video SSRC!`);\r\n    this.sdpConsistency.clearVideoSsrcCache();\r\n};\r\n\r\n/**\r\n * Closes underlying WebRTC PeerConnection instance and removes all remote\r\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\r\n * them.\r\n */\r\nTraceablePeerConnection.prototype.close = function() {\r\n    this.trace('stop');\r\n\r\n    // Off SignalingEvents\r\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\r\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\r\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\r\n\r\n    for (const peerTracks of this.remoteTracks.values()) {\r\n        for (const remoteTrack of peerTracks.values()) {\r\n            this._removeRemoteTrack(remoteTrack);\r\n        }\r\n    }\r\n    this.remoteTracks.clear();\r\n\r\n    this._addedStreams = [];\r\n\r\n    this._dtmfSender = null;\r\n    this._dtmfTonesQueue = [];\r\n\r\n    if (!this.rtc._removePeerConnection(this)) {\r\n        logger.error(`${this} RTC._removePeerConnection returned false`);\r\n    }\r\n    if (this.statsinterval !== null) {\r\n        window.clearInterval(this.statsinterval);\r\n        this.statsinterval = null;\r\n    }\r\n    logger.info(`${this} Closing peerconnection`);\r\n    this.peerconnection.close();\r\n};\r\n\r\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\r\n    return this._createOfferOrAnswer(false /* answer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\r\n    return this._createOfferOrAnswer(true /* offer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\r\n        isOffer,\r\n        constraints) {\r\n    const logName = isOffer ? 'Offer' : 'Answer';\r\n\r\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\r\n\r\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\r\n        try {\r\n            this.trace(\r\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\r\n\r\n            if (!this._usesUnifiedPlan) {\r\n                // If there are no local video tracks, then a \"recvonly\"\r\n                // SSRC needs to be generated\r\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\r\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\r\n                    this.generateRecvonlySsrc();\r\n                }\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\r\n                        resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}OnSuccess::postTransform `\r\n                         + '(make primary audio/video ssrcs consistent)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\r\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\r\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\r\n                || this._usesUnifiedPlan\r\n                || !this._isSharingLowFpsScreen())) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\r\n                this.trace(\r\n                    `create${logName}`\r\n                        + 'OnSuccess::postTransform (simulcast)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}`\r\n                         + 'OnSuccess::postTransform (rtx modifier)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            const ssrcMap = this._extractSSRCMap(resultSdp);\r\n\r\n            this._processLocalSSRCsMap(ssrcMap);\r\n\r\n            resolveFn(resultSdp);\r\n        } catch (e) {\r\n            this.trace(`create${logName}OnError`, e);\r\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\r\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\r\n\r\n            rejectFn(e);\r\n        }\r\n    };\r\n\r\n    const handleFailure = (err, rejectFn) => {\r\n        this.trace(`create${logName}OnFailure`, err);\r\n        const eventType\r\n            = isOffer\r\n                ? RTCEvents.CREATE_OFFER_FAILED\r\n                : RTCEvents.CREATE_ANSWER_FAILED;\r\n\r\n        this.eventEmitter.emit(eventType, err, this);\r\n\r\n        rejectFn(err);\r\n    };\r\n\r\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\r\n    // the correct preference order.\r\n    if (this._usesTransceiverCodecPreferences) {\r\n        const transceiver = this.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\r\n\r\n        if (transceiver) {\r\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\r\n            const mimeType = this.codecPreference?.mimeType;\r\n            const enable = this.codecPreference?.enable;\r\n\r\n            if (capabilities && mimeType && enable) {\r\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\r\n                /* eslint-disable-next-line arrow-body-style */\r\n                capabilities.sort(caps => {\r\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\r\n                });\r\n            } else if (capabilities && mimeType) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\r\n            }\r\n\r\n            try {\r\n                transceiver.setCodecPreferences(capabilities);\r\n            } catch (err) {\r\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let oaPromise;\r\n\r\n        if (isOffer) {\r\n            oaPromise = this.peerconnection.createOffer(constraints);\r\n        } else {\r\n            oaPromise = this.peerconnection.createAnswer(constraints);\r\n        }\r\n\r\n        oaPromise\r\n            .then(\r\n                sdp => handleSuccess(sdp, resolve, reject),\r\n                error => handleFailure(error, reject));\r\n    });\r\n};\r\n\r\n/**\r\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\r\n * @param {TrackSSRCInfo} ssrcObj\r\n * @return {number|null} the primary SSRC or <tt>null</tt>\r\n */\r\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\r\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\r\n        return ssrcObj.groups[0].ssrcs[0];\r\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\r\n        return ssrcObj.ssrcs[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Goes over the SSRC map extracted from the latest local description and tries\r\n * to match them with the local tracks (by MSID). Will update the values\r\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\r\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\r\n    for (const track of this.localTracks.values()) {\r\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\r\n\r\n        if (ssrcMap.has(sourceIdentifier)) {\r\n            const newSSRC = ssrcMap.get(sourceIdentifier);\r\n\r\n            if (!newSSRC) {\r\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\r\n\r\n                return;\r\n            }\r\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\r\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\r\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\r\n\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (newSSRCNum !== oldSSRCNum) {\r\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\r\n                this.localSSRCs.set(track.rtcId, newSSRC);\r\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\r\n            }\r\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\r\n            // It is normal to find no SSRCs for a muted video track in\r\n            // the local SDP as the recv-only SSRC is no longer munged in.\r\n            // So log the warning only if it's not a muted video track.\r\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\r\n        }\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    this.trace('addIceCandidate', JSON.stringify({\r\n        candidate: candidate.candidate,\r\n        sdpMid: candidate.sdpMid,\r\n        sdpMLineIndex: candidate.sdpMLineIndex,\r\n        usernameFragment: candidate.usernameFragment\r\n    }, null, ' '));\r\n\r\n    return this.peerconnection.addIceCandidate(candidate);\r\n};\r\n\r\n/**\r\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\r\n *\r\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\r\n */\r\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\r\n    let activeStreams = 1;\r\n\r\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\r\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\r\n    } else if (this.isSimulcastOn()) {\r\n        activeStreams = SIM_LAYER_RIDS.length;\r\n    }\r\n\r\n    return activeStreams;\r\n};\r\n\r\n/**\r\n * Obtains call-related stats from the peer connection.\r\n *\r\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\r\n * the peerconnection.\r\n */\r\nTraceablePeerConnection.prototype.getStats = function() {\r\n    return this.peerconnection.getStats();\r\n};\r\n\r\n/**\r\n * Generates and stores new SSRC info object for given local track.\r\n * The method should be called only for a video track being added to this TPC\r\n * in the muted state (given that the current browser uses this strategy).\r\n * @param {JitsiLocalTrack} track\r\n * @return {TPCSSRCInfo}\r\n */\r\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\r\n    const rtcId = track.rtcId;\r\n    let ssrcInfo = this._getSSRC(rtcId);\r\n\r\n    if (ssrcInfo) {\r\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\r\n    }\r\n\r\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\r\n    if (this.isSimulcastOn()\r\n        && (track.getVideoType() === VideoType.CAMERA || !this._isSharingLowFpsScreen())) {\r\n        ssrcInfo = {\r\n            ssrcs: [],\r\n            groups: []\r\n        };\r\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\r\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\r\n        }\r\n        ssrcInfo.groups.push({\r\n            ssrcs: ssrcInfo.ssrcs.slice(),\r\n            semantics: 'SIM'\r\n        });\r\n    } else {\r\n        ssrcInfo = {\r\n            ssrcs: [ SDPUtil.generateSsrc() ],\r\n            groups: []\r\n        };\r\n    }\r\n    if (!this.options.disableRtx) {\r\n        // Specifically use a for loop here because we'll\r\n        //  be adding to the list we're iterating over, so we\r\n        //  only want to iterate through the items originally\r\n        //  on the list\r\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\r\n\r\n        for (let i = 0; i < currNumSsrcs; ++i) {\r\n            const primarySsrc = ssrcInfo.ssrcs[i];\r\n            const rtxSsrc = SDPUtil.generateSsrc();\r\n\r\n            ssrcInfo.ssrcs.push(rtxSsrc);\r\n            ssrcInfo.groups.push({\r\n                ssrcs: [ primarySsrc, rtxSsrc ],\r\n                semantics: 'FID'\r\n            });\r\n        }\r\n    }\r\n    ssrcInfo.msid = track.storedMSID;\r\n    this.localSSRCs.set(rtcId, ssrcInfo);\r\n\r\n    return ssrcInfo;\r\n};\r\n\r\n/**\r\n * Returns if the peer connection uses Unified plan implementation.\r\n *\r\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\r\n */\r\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\r\n    return this._usesUnifiedPlan;\r\n};\r\n\r\n/**\r\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\r\n * instance.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.toString = function() {\r\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport { safeCounterIncrement } from '../util/MathUtil';\r\n\r\nimport BridgeChannel from './BridgeChannel';\r\nimport JitsiLocalTrack from './JitsiLocalTrack';\r\nimport RTCUtils from './RTCUtils';\r\nimport TraceablePeerConnection from './TraceablePeerConnection';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The counter used to generated id numbers assigned to peer connections\r\n * @type {number}\r\n */\r\nlet peerConnectionIdCounter = 0;\r\n\r\n/**\r\n * The counter used to generate id number for the local\r\n * <code>MediaStreamTrack</code>s.\r\n * @type {number}\r\n */\r\nlet rtcTrackIdCounter = 0;\r\n\r\n/**\r\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\r\n * about MedieaTracks.\r\n *\r\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\r\n * MediaTrack instances. Each can look like:\r\n * {{\r\n *     stream: MediaStream instance that holds a track with audio or video,\r\n *     track: MediaTrack within the MediaStream,\r\n *     videoType: \"camera\" or \"desktop\" or falsy,\r\n *     sourceId: ID of the desktopsharing source,\r\n *     sourceType: The desktopsharing source type,\r\n *     effects: Array of effect types\r\n * }}\r\n */\r\nfunction _createLocalTracks(mediaStreamMetaData = []) {\r\n    return mediaStreamMetaData.map(metaData => {\r\n        const {\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType,\r\n            effects\r\n        } = metaData;\r\n\r\n        const { deviceId, facingMode } = track.getSettings();\r\n\r\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\r\n        // so RTC does not need to handle ID management. This move would be\r\n        // safer to do once the old createLocalTracks is removed.\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n\r\n        return new JitsiLocalTrack({\r\n            deviceId,\r\n            facingMode,\r\n            mediaType: track.kind,\r\n            rtcId: rtcTrackIdCounter,\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType: videoType || null,\r\n            effects\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class RTC extends Listenable {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param options\r\n     */\r\n    constructor(conference, options = {}) {\r\n        super();\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of active <tt>TraceablePeerConnection</tt>.\r\n         * @type {Map.<number, TraceablePeerConnection>}\r\n         */\r\n        this.peerConnections = new Map();\r\n\r\n        this.localTracks = [];\r\n\r\n        this.options = options;\r\n\r\n        // BridgeChannel instance.\r\n        // @private\r\n        // @type {BridgeChannel}\r\n        this._channel = null;\r\n\r\n        /**\r\n         * The value specified to the last invocation of setLastN before the\r\n         * channel completed opening. If non-null, the value will be sent\r\n         * through a channel (once) as soon as it opens and will then be\r\n         * discarded.\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this._lastN = undefined;\r\n\r\n        /**\r\n         * Defines the last N endpoints list. It can be null or an array once\r\n         * initialised with a channel last N event.\r\n         * @type {Array<string>|null}\r\n         * @private\r\n         */\r\n        this._lastNEndpoints = null;\r\n\r\n        /**\r\n         * The number representing the maximum video height the local client\r\n         * should receive from the bridge.\r\n         *\r\n         * @type {number|undefined}\r\n         * @private\r\n         */\r\n        this._maxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The endpoint IDs of currently selected participants.\r\n         *\r\n         * @type {Array}\r\n         * @private\r\n         */\r\n        this._selectedEndpoints = null;\r\n\r\n        // The last N change listener.\r\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\r\n\r\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\r\n        this._updateAudioOutputForAudioTracks\r\n            = this._updateAudioOutputForAudioTracks.bind(this);\r\n\r\n        // The default video type assumed by the bridge.\r\n        this._videoType = BridgeVideoType.NONE;\r\n\r\n        // Switch audio output device on all remote audio tracks. Local audio\r\n        // tracks handle this event by themselves.\r\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._updateAudioOutputForAudioTracks\r\n            );\r\n\r\n            RTCUtils.addListener(\r\n                RTCEvents.DEVICE_LIST_CHANGED,\r\n                this._onDeviceListChanged\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any listeners and stored state from this {@code RTC} instance.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\r\n\r\n        if (this._channelOpenListener) {\r\n            this.removeListener(\r\n                RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exposes the private helper for converting a WebRTC MediaStream to a\r\n     * JitsiLocalTrack.\r\n     *\r\n     * @param {Array<Object>} tracksInfo\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    static createLocalTracks(tracksInfo) {\r\n        return _createLocalTracks(tracksInfo);\r\n    }\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {object} [options] Optional parameters.\r\n     * @param {array} options.devices The devices that will be requested.\r\n     * @param {string} options.resolution Resolution constraints.\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    static obtainAudioAndVideoPermissions(options) {\r\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\r\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\r\n    }\r\n\r\n    /**\r\n     * Initializes the bridge channel of this instance.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     */\r\n    initializeBridgeChannel(peerconnection, wsUrl) {\r\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\r\n\r\n        this._channelOpenListener = () => {\r\n            const logError = (error, msgType, value) => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\r\n            };\r\n\r\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\r\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\r\n            if (this._receiverVideoConstraints) {\r\n                try {\r\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\r\n                } catch (error) {\r\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\r\n                }\r\n            }\r\n            if (this._selectedEndpoints) {\r\n                try {\r\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\r\n                } catch (error) {\r\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\r\n                }\r\n            }\r\n            if (typeof this._maxFrameHeight !== 'undefined') {\r\n                try {\r\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\r\n                } catch (error) {\r\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\r\n                }\r\n            }\r\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\r\n                try {\r\n                    this._channel.sendSetLastNMessage(this._lastN);\r\n                } catch (error) {\r\n                    logError(error, 'LastNChangedEvent', this._lastN);\r\n                }\r\n            }\r\n            try {\r\n                this._channel.sendVideoTypeMessage(this._videoType);\r\n            } catch (error) {\r\n                logError(error, 'VideoTypeMessage', this._videoType);\r\n            }\r\n\r\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\r\n            this._channelOpenListener = null;\r\n        };\r\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\r\n\r\n        // Add Last N change listener.\r\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the list of known audio and video devices has\r\n     * been updated. Attempts to update the known available audio output\r\n     * devices.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onDeviceListChanged() {\r\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\r\n    }\r\n\r\n    /**\r\n     * Receives events when Last N had changed.\r\n     * @param {array} lastNEndpoints The new Last N endpoints.\r\n     * @private\r\n     */\r\n    _onLastNChanged(lastNEndpoints = []) {\r\n        const oldLastNEndpoints = this._lastNEndpoints || [];\r\n        let leavingLastNEndpoints = [];\r\n        let enteringLastNEndpoints = [];\r\n\r\n        this._lastNEndpoints = lastNEndpoints;\r\n\r\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\r\n            id => !this.isInLastN(id));\r\n\r\n        enteringLastNEndpoints = lastNEndpoints.filter(\r\n            id => oldLastNEndpoints.indexOf(id) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            leavingLastNEndpoints,\r\n            enteringLastNEndpoints);\r\n    }\r\n\r\n    /**\r\n     * Should be called when current media session ends and after the\r\n     * PeerConnection has been closed using PeerConnection.close() method.\r\n     */\r\n    onCallEnded() {\r\n        if (this._channel) {\r\n            // The BridgeChannel is not explicitly closed as the PeerConnection\r\n            // is closed on call ended which triggers datachannel onclose\r\n            // events. If using a WebSocket, the channel must be closed since\r\n            // it is not managed by the PeerConnection.\r\n            // The reference is cleared to disable any logic related to the\r\n            // channel.\r\n            if (this._channel && this._channel.mode === 'websocket') {\r\n                this._channel.close();\r\n            }\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the capture frame rate to be used for desktop tracks.\r\n     *\r\n     * @param {number} maxFps framerate to be used for desktop track capture.\r\n     */\r\n    setDesktopSharingFrameRate(maxFps) {\r\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\r\n    }\r\n\r\n    /**\r\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\r\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\r\n     * is established.\r\n     * @param {*} constraints\r\n     */\r\n    setNewReceiverVideoConstraints(constraints) {\r\n        this._receiverVideoConstraints = constraints;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video size the local participant should receive from\r\n     * remote participants. Will cache the value and send it through the channel\r\n     * once it is created.\r\n     *\r\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\r\n     * this receiver is willing to receive.\r\n     * @returns {void}\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the video type and availability for the local video source.\r\n     *\r\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\r\n     * 'none' for when local video source is muted or removed from the peerconnection.\r\n     * @returns {void}\r\n     */\r\n    setVideoType(videoType) {\r\n        if (this._videoType !== videoType) {\r\n            this._videoType = videoType;\r\n\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendVideoTypeMessage(videoType);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected\r\n     * participants in order to always receive video for this participant (even\r\n     * when last n is enabled). If there is no channel we store it and send it\r\n     * through the channel once it is created.\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSelectedEndpointsMessage(ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static addListener(eventType, listener) {\r\n        RTCUtils.addListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static removeListener(eventType, listener) {\r\n        RTCUtils.removeListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     */\r\n    static init(options = {}) {\r\n        this.options = options;\r\n\r\n        return RTCUtils.init(this.options);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>TraceablePeerConnection</tt>\r\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\r\n     * participants which is not carried over SDP.\r\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\r\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\r\n     * @param {object} options The config options.\r\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\r\n     * enabled on the PeerConnection.\r\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\r\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\r\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n     * @return {TraceablePeerConnection}\r\n     */\r\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\r\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\r\n\r\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\r\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\r\n\r\n            Statistics.analytics.addPermanentProperties(\r\n                { abtestSuspendVideo: options.abtestSuspendVideo });\r\n        }\r\n\r\n        if (options.enableInsertableStreams) {\r\n            logger.debug('E2EE - setting insertable streams constraints');\r\n            pcConfig.encodedInsertableStreams = true;\r\n        }\r\n\r\n        const supportsSdpSemantics = browser.isReactNative()\r\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\r\n\r\n        if (supportsSdpSemantics) {\r\n            logger.debug('WebRTC application is running in plan-b mode');\r\n            pcConfig.sdpSemantics = 'plan-b';\r\n        }\r\n\r\n        if (options.forceTurnRelay) {\r\n            pcConfig.iceTransportPolicy = 'relay';\r\n        }\r\n\r\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\r\n        // The default policy generates separate ice candidates for audio and video connections.\r\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\r\n        pcConfig.bundlePolicy = 'max-bundle';\r\n\r\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\r\n\r\n        const newConnection\r\n            = new TraceablePeerConnection(\r\n                this,\r\n                peerConnectionIdCounter,\r\n                signaling,\r\n                pcConfig, pcConstraints,\r\n                isP2P, options);\r\n\r\n        this.peerConnections.set(newConnection.id, newConnection);\r\n\r\n        return newConnection;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Removed given peer connection from this RTC module instance.\r\n     * @param {TraceablePeerConnection} traceablePeerConnection\r\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\r\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\r\n     * this RTC instance.\r\n     */\r\n    _removePeerConnection(traceablePeerConnection) {\r\n        const id = traceablePeerConnection.id;\r\n\r\n        if (this.peerConnections.has(id)) {\r\n            // NOTE Remote tracks are not removed here.\r\n            this.peerConnections.delete(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    addLocalTrack(track) {\r\n        if (!track) {\r\n            throw new Error('track must not be null nor undefined');\r\n        }\r\n\r\n        this.localTracks.push(track);\r\n\r\n        track.conference = this.conference;\r\n    }\r\n\r\n    /**\r\n     * Get local video track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalVideoTrack() {\r\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\r\n\r\n\r\n        return localVideo.length ? localVideo[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get local audio track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalAudioTrack() {\r\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n\r\n        return localAudio.length ? localAudio[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the endpoint id for the local user.\r\n     * @returns {string}\r\n     */\r\n    getLocalEndpointId() {\r\n        return this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Returns the local tracks of the given media type, or all local tracks if\r\n     * no specific type is given.\r\n     * @param {MediaType} [mediaType] Optional media type filter.\r\n     * (audio or video).\r\n     */\r\n    getLocalTracks(mediaType) {\r\n        let tracks = this.localTracks.slice();\r\n\r\n        if (mediaType !== undefined) {\r\n            tracks = tracks.filter(\r\n                track => track.getType() === mediaType);\r\n        }\r\n\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * Obtains all remote tracks currently known to this RTC module instance.\r\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\r\n     *      by their media type if this argument is specified.\r\n     * @return {Array<JitsiRemoteTrack>}\r\n     */\r\n    getRemoteTracks(mediaType) {\r\n        let remoteTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\r\n\r\n            if (pcRemoteTracks) {\r\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\r\n            }\r\n        }\r\n\r\n        return remoteTracks;\r\n    }\r\n\r\n    /**\r\n     * Set mute for all local audio streams attached to the conference.\r\n     * @param value The mute value.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\r\n            // this is a Promise\r\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\r\n        });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n    * Set mute for all local video streams attached to the conference.\r\n    * @param value The mute value.\r\n    * @returns {Promise}\r\n    */\r\n    setVideoMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\r\n            .forEach(videoTrack => {\r\n                // this is a Promise\r\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\r\n            });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    removeLocalTrack(track) {\r\n        const pos = this.localTracks.indexOf(track);\r\n\r\n        if (pos === -1) {\r\n            return;\r\n        }\r\n\r\n        this.localTracks.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param elSelector\r\n     * @param stream\r\n     */\r\n    static attachMediaStream(elSelector, stream) {\r\n        return RTCUtils.attachMediaStream(elSelector, stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given stream.\r\n     * @param {MediaStream} stream\r\n     */\r\n    static getStreamID(stream) {\r\n        return RTCUtils.getStreamID(stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given track.\r\n     * @param {MediaStreamTrack} track\r\n     */\r\n    static getTrackID(track) {\r\n        return RTCUtils.getTrackID(track);\r\n    }\r\n\r\n    /**\r\n     * Returns true if retrieving the list of input devices is supported\r\n     * and false if not.\r\n     */\r\n    static isDeviceListAvailable() {\r\n        return RTCUtils.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] Type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    static isDeviceChangeAvailable(deviceType) {\r\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    static isWebRtcSupported() {\r\n        return browser.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    static getAudioOutputDevice() {\r\n        return RTCUtils.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {array} list of available media devices.\r\n     */\r\n    static getCurrentlyAvailableMediaDevices() {\r\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns whether available devices have permissions granted\r\n     * @returns {Boolean}\r\n     */\r\n    static arePermissionsGrantedForAvailableDevices() {\r\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    static getEventDataForActiveDevice(device) {\r\n        return RTCUtils.getEventDataForActiveDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId Id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices().\r\n     * @returns {Promise} resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    static setAudioOutputDevice(deviceId) {\r\n        return RTCUtils.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\r\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\r\n     * \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStream(stream) {\r\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\r\n     * ID is considered a valid \"user\" stream which means that it's not a\r\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {string} streamId The id of WebRTC MediaStream.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStreamById(streamId) {\r\n        return streamId && streamId !== 'mixedmslabel'\r\n            && streamId !== 'default';\r\n    }\r\n\r\n    /**\r\n     * Allows to receive list of available cameras/microphones.\r\n     * @param {function} callback Would receive array of devices as an\r\n     *      argument.\r\n     */\r\n    static enumerateDevices(callback) {\r\n        RTCUtils.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param {MediaStream} mediaStream MediaStream object to stop.\r\n     */\r\n    static stopMediaStream(mediaStream) {\r\n        RTCUtils.stopMediaStream(mediaStream);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    static isDesktopSharingEnabled() {\r\n        return RTCUtils.isDesktopSharingEnabled();\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened bridge channel.\r\n     */\r\n    closeBridgeChannel() {\r\n        if (this._channel) {\r\n            this._channel.close();\r\n            this._channel = null;\r\n\r\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {number} ssrc\r\n     * @param {number} audioLevel\r\n     * @param {boolean} isLocal\r\n     */\r\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        const track = tpc.getTrackBySSRC(ssrc);\r\n\r\n        if (!track) {\r\n            return;\r\n        } else if (!track.isAudioTrack()) {\r\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\r\n\r\n            return;\r\n        } else if (track.isLocal() !== isLocal) {\r\n            logger.error(\r\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\r\n        }\r\n\r\n        track.setAudioLevel(audioLevel, tpc);\r\n    }\r\n\r\n    /**\r\n     * Sends message via the bridge channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     *      message. If \"\" the message will be sent to all participants.\r\n     * @param {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails or there is no data channel created.\r\n     */\r\n    sendChannelMessage(to, payload) {\r\n        if (this._channel) {\r\n            this._channel.sendMessage(to, payload);\r\n        } else {\r\n            throw new Error('Channel support is disabled!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the local stats via the bridge channel.\r\n     * @param {Object} payload The payload of the message.\r\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\r\n     */\r\n    sendEndpointStatsMessage(payload) {\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendEndpointStatsMessage(payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going\r\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n     * all available videos.\r\n     * @param {number} value the new value for lastN.\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendSetLastNMessage(value);\r\n            }\r\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the endpoint id is currently included in the last N.\r\n     * @param {string} id The endpoint id that we check for last N.\r\n     * @returns {boolean} true if the endpoint id is in the last N or if we\r\n     * don't have bridge channel support, otherwise we return false.\r\n     */\r\n    isInLastN(id) {\r\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\r\n            || this._lastNEndpoints.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Updates the target audio output device for all remote audio tracks.\r\n     *\r\n     * @param {string} deviceId - The device id of the audio ouput device to\r\n     * use for all remote tracks.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _updateAudioOutputForAudioTracks(deviceId) {\r\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const track of remoteAudioTracks) {\r\n            track.setAudioOutput(deviceId);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Indicates that the local connection statistics were updated.\r\n */\r\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\r\n\r\n/**\r\n * Indicates that the connection statistics for a particular remote participant\r\n * were updated.\r\n */\r\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport browser from '../browser';\r\n\r\nconst Resolutions = require('../../service/RTC/Resolutions');\r\nconst VideoType = require('../../service/RTC/VideoType');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\r\n * over the data channel.\r\n */\r\nconst STATS_MESSAGE_TYPE = 'stats';\r\n\r\nconst kSimulcastFormats = [\r\n    { width: 1920,\r\n        height: 1080,\r\n        layers: 3,\r\n        target: 'high',\r\n        targetRN: 4000000 },\r\n    { width: 1280,\r\n        height: 720,\r\n        layers: 3,\r\n        target: 'high',\r\n        targetRN: 2500000 },\r\n    { width: 960,\r\n        height: 540,\r\n        layers: 3,\r\n        target: 'standard',\r\n        targetRN: 900000 },\r\n    { width: 640,\r\n        height: 360,\r\n        layers: 2,\r\n        target: 'standard',\r\n        targetRN: 500000 },\r\n    { width: 480,\r\n        height: 270,\r\n        layers: 2,\r\n        target: 'low',\r\n        targetRN: 350000 },\r\n    { width: 320,\r\n        height: 180,\r\n        layers: 1,\r\n        target: 'low',\r\n        targetRN: 150000 }\r\n];\r\n\r\n/**\r\n * The maximum bitrate to use as a measurement against the participant's current\r\n * bitrate. This cap helps in the cases where the participant's bitrate is high\r\n * but not enough to fulfill high targets, such as with 1080p.\r\n */\r\nconst MAX_TARGET_BITRATE = 2500;\r\n\r\n/**\r\n * The initial bitrate for video in kbps.\r\n */\r\nlet startBitrate = 800;\r\n\r\n/**\r\n * Gets the expected bitrate (in kbps) in perfect network conditions.\r\n * @param simulcast {boolean} whether simulcast is enabled or not.\r\n * @param resolution {Resolution} the resolution.\r\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\r\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\r\n */\r\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\r\n    let target = 0;\r\n    let height = Math.min(resolution.height, resolution.width);\r\n\r\n    // Find the first format with height no bigger than ours.\r\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\r\n\r\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\r\n        // Sum the target fields from all simulcast layers for the given\r\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\r\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\r\n            const targetHeight = height;\r\n\r\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\r\n            if (simulcastFormat) {\r\n                target += browser.isReactNative()\r\n                    ? simulcastFormat.targetRN\r\n                    : videoQualitySettings[simulcastFormat.target];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    } else if (simulcastFormat) {\r\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\r\n        // same as that of the individual stream bitrate.\r\n        target = browser.isReactNative()\r\n            ? simulcastFormat.targetRN\r\n            : videoQualitySettings[simulcastFormat.target];\r\n    }\r\n\r\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\r\n    // of connection quality by 1 second. Convert target from bps to kbps.\r\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\r\n}\r\n\r\n/**\r\n * Gets the bitrate to which GCC would have ramped up in perfect network\r\n * conditions after millisSinceStart milliseconds.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video was enabled.\r\n */\r\nfunction rampUp(millisSinceStart) {\r\n    if (millisSinceStart > 60000) {\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // According to GCC the send side bandwidth estimation grows with at most\r\n    // 8% per second.\r\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\r\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\r\n}\r\n\r\n/**\r\n * A class which monitors the local statistics coming from the RTC modules, and\r\n * calculates a \"connection quality\" value, in percent, for the media\r\n * connection. A value of 100% indicates a very good network connection, and a\r\n * value of 0% indicates a poor connection.\r\n */\r\nexport default class ConnectionQuality {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param eventEmitter\r\n     * @param options\r\n     */\r\n    constructor(conference, eventEmitter, options) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        /**\r\n         * The owning JitsiConference.\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Holds statistics about the local connection quality.\r\n         */\r\n        this._localStats = {\r\n            connectionQuality: 100,\r\n            jvbRTT: undefined\r\n        };\r\n\r\n        /**\r\n         * The time this._localStats.connectionQuality was last updated.\r\n         */\r\n        this._lastConnectionQualityUpdate = -1;\r\n\r\n        /**\r\n         * Conference options.\r\n         */\r\n        this._options = options;\r\n\r\n        /**\r\n         * Maps a participant ID to an object holding connection quality\r\n         * statistics received from this participant.\r\n         */\r\n        this._remoteStats = {};\r\n\r\n        /**\r\n         * The time that the ICE state last changed to CONNECTED. We use this\r\n         * to calculate how much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeIceConnected = -1;\r\n\r\n        /**\r\n         * The time that local video was unmuted. We use this to calculate how\r\n         * much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeVideoUnmuted = -1;\r\n\r\n        // We assume a global startBitrate value for the sake of simplicity.\r\n        if (this._options.config?.startBitrate > 0) {\r\n            startBitrate = this._options.config.startBitrate;\r\n        }\r\n\r\n        // TODO: consider ignoring these events and letting the user of\r\n        // lib-jitsi-meet handle these separately.\r\n        conference.on(\r\n            ConferenceEvents.CONNECTION_INTERRUPTED,\r\n            () => {\r\n                this._updateLocalConnectionQuality(0);\r\n                this.eventEmitter.emit(\r\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n                    this._localStats);\r\n                this._broadcastLocalStats();\r\n            });\r\n\r\n        conference.room.addListener(\r\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n            (jingleSession, newState) => {\r\n                if (!jingleSession.isP2P && newState === 'connected') {\r\n                    this._timeIceConnected = window.performance.now();\r\n                }\r\n            });\r\n\r\n        // Listen to DataChannel message from other participants in the\r\n        // conference, and update the _remoteStats field accordingly.\r\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\r\n        // message format for sending the endpoint stats.\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            (participant, payload) => {\r\n                if (payload.type === STATS_MESSAGE_TYPE) {\r\n                    this._updateRemoteStats(\r\n                        participant.getId(), payload.values);\r\n                }\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\r\n            (participant, payload) => {\r\n                this._updateRemoteStats(participant.getId(), payload);\r\n            });\r\n\r\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\r\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\r\n\r\n        // Save the last time we were unmuted.\r\n        conference.on(\r\n            ConferenceEvents.TRACK_MUTE_CHANGED,\r\n            track => {\r\n                if (track.isVideoTrack()) {\r\n                    if (track.isMuted()) {\r\n                        this._timeVideoUnmuted = -1;\r\n                    } else {\r\n                        this._maybeUpdateUnmuteTime();\r\n                    }\r\n                }\r\n            });\r\n        conference.on(\r\n            ConferenceEvents.TRACK_ADDED,\r\n            track => {\r\n                if (track.isVideoTrack() && !track.isMuted()) {\r\n                    this._maybeUpdateUnmuteTime();\r\n                }\r\n            });\r\n        conference.rtc.on(\r\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\r\n            track => {\r\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.SERVER_REGION_CHANGED,\r\n            serverRegion => {\r\n                this._localStats.serverRegion = serverRegion;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.PROPERTIES_CHANGED,\r\n            properties => {\r\n                this._localStats.bridgeCount\r\n                    = Number((properties || {})['bridge-count']);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\r\n     * doesn't change it.\r\n     */\r\n    _maybeUpdateUnmuteTime() {\r\n        if (this._timeVideoUnmuted < 0) {\r\n            this._timeVideoUnmuted = window.performance.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a new \"connection quality\" value.\r\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\r\n     * @param isMuted {boolean} whether the local video is muted.\r\n     * @param resolutionName {Resolution} the input resolution used by the camera.\r\n     * @returns {*} the newly calculated connection quality.\r\n     */\r\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\r\n\r\n        // resolutionName is an index into Resolutions (where \"720\" is\r\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\r\n        const resolution = Resolutions[resolutionName];\r\n\r\n        let quality = 100;\r\n        let packetLoss;\r\n\r\n        // TODO: take into account packet loss for received streams\r\n\r\n        if (this._localStats.packetLoss) {\r\n            packetLoss = this._localStats.packetLoss.upload;\r\n\r\n            // Ugly Hack Alert (UHA):\r\n            // The packet loss for the upload direction is calculated based on\r\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\r\n            // termination for audio, these reports come from the actual\r\n            // receivers in the conference and therefore the reported packet\r\n            // loss includes loss from the bridge to the receiver.\r\n            // When we are sending video this effect is small, because the\r\n            // number of video packets is much larger than the number of audio\r\n            // packets (and our calculation is based on the total number of\r\n            // received and lost packets).\r\n            // When video is muted, however, the effect might be significant,\r\n            // but we don't know what it is. We do know that it is positive, so\r\n            // as a temporary solution, until RTCP termination is implemented\r\n            // for the audio streams, we relax the packet loss checks here.\r\n            if (isMuted) {\r\n                packetLoss *= 0.5;\r\n            }\r\n        }\r\n\r\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\r\n            || this._timeIceConnected < 0\r\n            || this._timeVideoUnmuted < 0) {\r\n\r\n            // Calculate a value based on packet loss only.\r\n            if (packetLoss === undefined) {\r\n                logger.error('Cannot calculate connection quality, unknown '\r\n                    + 'packet loss.');\r\n                quality = 100;\r\n            } else if (packetLoss <= 2) {\r\n                quality = 100; // Full 5 bars.\r\n            } else if (packetLoss <= 4) {\r\n                quality = 70; // 4 bars\r\n            } else if (packetLoss <= 6) {\r\n                quality = 50; // 3 bars\r\n            } else if (packetLoss <= 8) {\r\n                quality = 30; // 2 bars\r\n            } else if (packetLoss <= 12) {\r\n                quality = 10; // 1 bars\r\n            } else {\r\n                quality = 0; // Still 1 bar, but slower climb-up.\r\n            }\r\n        } else {\r\n            // Calculate a value based on the send video bitrate on the active TPC.\r\n            const activeTPC = this._conference.getActivePeerConnection();\r\n\r\n            if (activeTPC) {\r\n                const isSimulcastOn = activeTPC.isSimulcastOn();\r\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\r\n\r\n                // Add the codec info as well.\r\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\r\n\r\n                // Time since sending of video was enabled.\r\n                const millisSinceStart = window.performance.now()\r\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\r\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\r\n\r\n                // Expected sending bitrate in perfect conditions.\r\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\r\n\r\n                target = Math.min(target, MAX_TARGET_BITRATE);\r\n\r\n                // Calculate the quality only after the stats are available (after video was enabled).\r\n                if (millisSinceStart > statsInterval) {\r\n                    quality = 100 * this._localStats.bitrate.upload / target;\r\n                }\r\n            }\r\n\r\n            // Whatever the bitrate, drop early if there is significant loss\r\n            if (packetLoss && packetLoss >= 10) {\r\n                quality = Math.min(quality, 30);\r\n            }\r\n        }\r\n\r\n        // Make sure that the quality doesn't climb quickly\r\n        if (this._lastConnectionQualityUpdate > 0) {\r\n            const maxIncreasePerSecond = 2;\r\n            const prevConnectionQuality = this._localStats.connectionQuality;\r\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\r\n\r\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\r\n        }\r\n\r\n        return Math.min(100, quality);\r\n    }\r\n\r\n    /**\r\n     * Updates the localConnectionQuality value\r\n     * @param values {number} the new value. Should be in [0, 100].\r\n     */\r\n    _updateLocalConnectionQuality(value) {\r\n        this._localStats.connectionQuality = value;\r\n        this._lastConnectionQualityUpdate = window.performance.now();\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the local statistics to all other participants in the\r\n     * conference.\r\n     */\r\n    _broadcastLocalStats() {\r\n        // Send only the data that remote participants care about.\r\n        const data = {\r\n            bitrate: this._localStats.bitrate,\r\n            packetLoss: this._localStats.packetLoss,\r\n            connectionQuality: this._localStats.connectionQuality,\r\n            jvbRTT: this._localStats.jvbRTT,\r\n            serverRegion: this._localStats.serverRegion,\r\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\r\n            avgAudioLevels: this._localStats.localAvgAudioLevels\r\n        };\r\n\r\n        try {\r\n            this._conference.sendEndpointStatsMessage(data);\r\n        } catch (err) {\r\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\r\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the local statistics\r\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\r\n     * the stats\r\n     * @param data new statistics\r\n     */\r\n    _updateLocalStats(tpc, data) {\r\n        // Update jvbRTT\r\n        if (!tpc.isP2P) {\r\n            const jvbRTT\r\n                = data.transport\r\n                    && data.transport.length && data.transport[0].rtt;\r\n\r\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\r\n        }\r\n\r\n        // Do not continue with processing of other stats if they do not\r\n        // originate from the active peerconnection\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        let key;\r\n        const updateLocalConnectionQuality\r\n            = !this._conference.isConnectionInterrupted();\r\n        const localVideoTrack\r\n            = this._conference.getLocalVideoTrack();\r\n        const videoType\r\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\r\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\r\n        const resolution = localVideoTrack\r\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\r\n\r\n        if (!isMuted) {\r\n            this._maybeUpdateUnmuteTime();\r\n        }\r\n\r\n        // Copy the fields already in 'data'.\r\n        for (key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                this._localStats[key] = data[key];\r\n            }\r\n        }\r\n\r\n        // And re-calculate the connectionQuality field.\r\n        if (updateLocalConnectionQuality) {\r\n            this._updateLocalConnectionQuality(\r\n                this._calculateConnectionQuality(\r\n                    videoType,\r\n                    isMuted,\r\n                    resolution));\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._localStats);\r\n        this._broadcastLocalStats();\r\n    }\r\n\r\n    /**\r\n     * Updates remote statistics\r\n     * @param id the id of the remote participant\r\n     * @param data the statistics received\r\n     */\r\n    _updateRemoteStats(id, data) {\r\n        // Use only the fields we need\r\n        this._remoteStats[id] = {\r\n            bitrate: data.bitrate,\r\n            packetLoss: data.packetLoss,\r\n            connectionQuality: data.connectionQuality,\r\n            jvbRTT: data.jvbRTT,\r\n            serverRegion: data.serverRegion,\r\n            maxEnabledResolution: data.maxEnabledResolution,\r\n            avgAudioLevels: data.avgAudioLevels\r\n        };\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n            id,\r\n            this._remoteStats[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns the local statistics.\r\n     * Exported only for use in jitsi-meet-torture.\r\n     */\r\n    getStats() {\r\n        return this._localStats;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\r\n *\r\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\r\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\r\n * the internet offline status then the time will start counting after the internet comes back online.\r\n *\r\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\r\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\r\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\r\n */\r\nexport default class IceFailedHandling {\r\n    /**\r\n     * Creates new {@code DelayedIceFailed} task.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n    }\r\n\r\n    /**\r\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\r\n     * notification to Jicofo or emits the ice failed conference event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _actOnIceFailed() {\r\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\r\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\r\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\r\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\r\n\r\n        logger.info('ICE failed,'\r\n            + ` enableForcedReload: ${enableForcedReload},`\r\n            + ` enableIceRestart: ${enableIceRestart},`\r\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\r\n\r\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\r\n            logger.info('ICE failed, but ICE restarts are disabled');\r\n            const reason = enableForcedReload\r\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\r\n                : JitsiConferenceErrors.ICE_FAILED;\r\n\r\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\r\n\r\n            return;\r\n        }\r\n\r\n        const jvbConnection = this._conference.jvbJingleSession;\r\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\r\n\r\n        if (!jvbConnection) {\r\n            logger.warn('Not sending ICE failed - no JVB connection');\r\n        } else if (jvbConnIceState === 'connected') {\r\n            logger.info('ICE connection restored - not sending ICE failed');\r\n        } else {\r\n            logger.info('Sending ICE failed - the connection did not recover, '\r\n                + `ICE state: ${jvbConnIceState}, `\r\n                + `use 'session-terminate': ${useTerminateForRestart}`);\r\n            if (useTerminateForRestart) {\r\n                this._conference.jvbJingleSession.terminate(\r\n                    () => {\r\n                        logger.info('session-terminate for ice restart - done');\r\n                    },\r\n                    error => {\r\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\r\n                    }, {\r\n                        reason: 'connectivity-error',\r\n                        reasonDescription: 'ICE FAILED',\r\n                        requestRestart: true,\r\n                        sendSessionTerminate: true\r\n                    });\r\n            } else {\r\n                this._conference.jvbJingleSession.sendIceFailedNotification();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the task.\r\n     */\r\n    start() {\r\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\r\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\r\n        // gets reconnected.\r\n        //  This also handles the case about waiting for the internet to come back online, because ping\r\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\r\n        // CONNECTED which is the extra 2 second timeout after ping.\r\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\r\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\r\n        // to 'item-not-found' error returned by the server.\r\n        this._conference.xmpp.ping(65000).then(\r\n            () => {\r\n                if (!this._canceled) {\r\n                    this._iceFailedTimeout = window.setTimeout(() => {\r\n                        this._iceFailedTimeout = undefined;\r\n                        this._actOnIceFailed();\r\n                    }, 2000);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('PING error/timeout - not sending ICE failed', error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    cancel() {\r\n        this._canceled = true;\r\n        window.clearTimeout(this._iceFailedTimeout);\r\n    }\r\n}\r\n","/**\r\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\r\n * versa.\r\n * @event\r\n * @type {boolean} - true when service has changed to active false otherwise.\r\n */\r\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\r\n\r\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\r\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\r\n * it starts receiving audio levels !== 0 after being in a state of no audio.\r\n * @event\r\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\r\n\r\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\r\n * for a period of time, meaning that the device is either broken or hardware/software muted.\r\n * @event\r\n * @type {void}\r\n */\r\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\r\n\r\n/**\r\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\r\n\r\n/**\r\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\r\n * The generated objects are of type Array<Object>, one score for each monitored device.\r\n * @event VAD_REPORT_PUBLISHED\r\n * @type Array<Object> with the following structure:\r\n * @property {Date} timestamp - Timestamp at which the compute took place.\r\n * @property {number} avgVAD - Average VAD score over monitored period of time.\r\n * @property {string} deviceId - Associate local audio device ID.\r\n */\r\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\r\n\r\n/**\r\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\r\n *\r\n * @event\r\n * @type {Object}\r\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\r\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n * @property {string} deviceId - Device id of the associated track.\r\n */\r\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\r\n\r\n/**\r\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\r\n *\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport browser from '../browser';\r\n\r\nimport * as DetectionEvents from './DetectionEvents';\r\n\r\n// We wait a certain time interval for constant silence input from the current device to account for\r\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\r\n// an audio track is added to the tcr.\r\n// Potential improvement - add this as a configurable parameter.\r\nconst SILENCE_PERIOD_MS = 4000;\r\n\r\n/**\r\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\r\n * state must be constant for a configured amount of time in order for the event to be triggered.\r\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n * @fires DetectionEvents.NO_AUDIO_INPUT\r\n */\r\nexport default class NoAudioSignalDetection extends EventEmitter {\r\n    /**\r\n     * Creates new NoAudioSignalDetection.\r\n     *\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conference = conference;\r\n        this._timeoutTrigger = null;\r\n        this._hasAudioInput = null;\r\n\r\n        if (!browser.supportsReceiverStats()) {\r\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\r\n        }\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear the timeout state.\r\n     */\r\n    _clearTriggerTimeout() {\r\n        clearTimeout(this._timeoutTrigger);\r\n        this._timeoutTrigger = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generated event triggered by a change in the current conference audio input state.\r\n     *\r\n     * @param {*} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n     */\r\n    _handleAudioInputStateChange(audioLevel) {\r\n        // Current audio input state of the active local track in the conference, true for audio input false for no\r\n        // audio input.\r\n        const status = audioLevel !== 0;\r\n\r\n        // If this is the first audio event picked up or the current status is different from the previous trigger\r\n        // the event.\r\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\r\n            this._hasAudioInput = status;\r\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate event triggered by a prolonged period of no audio input.\r\n     *\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.NO_AUDIO_INPUT\r\n     */\r\n    _handleNoAudioInputDetection(audioLevel) {\r\n        if (this._eventFired) {\r\n            return;\r\n        }\r\n\r\n        if (audioLevel === 0 && !this._timeoutTrigger) {\r\n            this._timeoutTrigger = setTimeout(() => {\r\n                this._eventFired = true;\r\n\r\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\r\n            }, SILENCE_PERIOD_MS);\r\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\r\n            this._clearTriggerTimeout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\r\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\r\n     * being reported.\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\r\n     */\r\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        // We are interested in the local audio streams\r\n        if (!isLocal || !this._audioTrack) {\r\n            return;\r\n        }\r\n\r\n        // Get currently active local tracks from the TraceablePeerConnection\r\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\r\n\r\n        // Only target the current active track in the tpc. For some reason audio levels for previous\r\n        // devices are also picked up from the PeerConnection so we filter them out.\r\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\r\n            return;\r\n        }\r\n\r\n        // First handle audio input state change. In case the state changed to no input the no audio input event\r\n        // can try to fire again.\r\n        this._handleAudioInputStateChange(audioLevel);\r\n        this._handleNoAudioInputDetection(audioLevel);\r\n    }\r\n\r\n    /**\r\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\r\n     * Only take into account local audio tracks.\r\n     *\r\n     * @param {JitsiTrack} track - The added JitsiTrack.\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Reset state for the new track.\r\n            this._audioTrack = track;\r\n            this._eventFired = false;\r\n            this._clearTriggerTimeout();\r\n\r\n            // Listen for the audio levels on the newly added audio track\r\n            if (browser.supportsReceiverStats()) {\r\n                track.on(\r\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                    }\r\n                );\r\n                track.on(\r\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                        this._handleAudioInputStateChange(audioLevel);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\n\r\n/**\r\n * The value which we use to say, every sound over this threshold\r\n * is talking on the mic.\r\n * @type {number}\r\n */\r\nconst SPEECH_DETECT_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\r\n * currently used.\r\n * Listens for changes in the audio level changes of the local p2p audio track\r\n * or remote p2p one and fires dominant speaker events to be able to use\r\n * features depending on those events (speaker stats), to make them work without\r\n * the video bridge.\r\n */\r\nexport default class P2PDominantSpeakerDetection {\r\n    /**\r\n     * Creates P2PDominantSpeakerDetection\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this._audioLevel.bind(this));\r\n\r\n        this.myUserID = this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all streams in the conference.\r\n     *\r\n     * @param {String} id - The participant id\r\n     * @param {number} audioLevel - The audio level.\r\n     */\r\n    _audioLevel(id, audioLevel) {\r\n\r\n        // we do not process if p2p is not active\r\n        // or audio level is under certain threshold\r\n        // or if the audio level is for local audio track which is muted\r\n        if (!this.conference.isP2PActive()\r\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\r\n            || (id === this.myUserID\r\n                    && this.conference.getLocalAudioTrack().isMuted())) {\r\n            return;\r\n        }\r\n\r\n        this.conference.rtc.eventEmitter.emit(\r\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n            id);\r\n    }\r\n}\r\n","/**\r\n * Adapter that creates AudioContext objects depending on the browser.\r\n *\r\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\r\n */\r\nexport function createAudioContext(options) {\r\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\r\n\r\n    if (!AudioContextImpl) {\r\n        return undefined;\r\n    }\r\n\r\n    return new AudioContextImpl(options);\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport RTC from '../RTC/RTC';\r\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\r\n\r\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\r\n\r\n/**\r\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\r\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\r\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\r\n * score is published to consumers via an EventEmitter.\r\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\r\n *\r\n * @fires VAD_SCORE_PUBLISHED\r\n */\r\nexport default class TrackVADEmitter extends EventEmitter {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\r\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\r\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\r\n     */\r\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\r\n        super();\r\n\r\n        /**\r\n         * Sample rate of the ScriptProcessorNode.\r\n         */\r\n        this._procNodeSampleRate = procNodeSampleRate;\r\n\r\n        /**\r\n         * VAD Processor that allows us to calculate VAD score for PCM samples\r\n         */\r\n        this._vadProcessor = vadProcessor;\r\n\r\n        /**\r\n         * The JitsiLocalTrack instance.\r\n         */\r\n        this._localTrack = jitsiLocalTrack;\r\n\r\n        /**\r\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\r\n         */\r\n        this._bufferResidue = new Float32Array([]);\r\n\r\n        /**\r\n         * The AudioContext instance with the preferred sample frequency.\r\n         */\r\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\r\n\r\n        /**\r\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\r\n         * saves a couple of function calls.\r\n         */\r\n        this._vadSampleSize = vadProcessor.getSampleLength();\r\n\r\n        /**\r\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\r\n         * sample rate.\r\n         */\r\n        this._onAudioProcess = this._onAudioProcess.bind(this);\r\n\r\n        this._initializeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\r\n     *\r\n     * @param {string} micDeviceId - Target microphone device id.\r\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\r\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\r\n     * The processor needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\r\n     */\r\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\r\n        return RTC.obtainAudioAndVideoPermissions({\r\n            devices: [ 'audio' ],\r\n            micDeviceId\r\n        }).then(localTrack => {\r\n            // We only expect one audio track when specifying a device id.\r\n            if (!localTrack[0]) {\r\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\r\n            }\r\n\r\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\r\n\r\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\r\n            // life cycle is handled by whoever created this instance.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up the audio graph in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initializeAudioContext() {\r\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\r\n\r\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\r\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\r\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\r\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\r\n        // with audio worklet when it's mature enough and has more browser support.\r\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\r\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\r\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\r\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\r\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\r\n     *\r\n     *\r\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\r\n     * @returns {void}\r\n     * @fires VAD_SCORE_PUBLISHED\r\n     */\r\n    _onAudioProcess(audioEvent) {\r\n        // Prepend the residue PCM buffer from the previous process callback.\r\n        const inData = audioEvent.inputBuffer.getChannelData(0);\r\n        const completeInData = [ ...this._bufferResidue, ...inData ];\r\n        const sampleTimestamp = Date.now();\r\n\r\n        let i = 0;\r\n\r\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\r\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\r\n\r\n            // The VAD processor might change the values inside the array so we make a copy.\r\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\r\n\r\n            this.emit(VAD_SCORE_PUBLISHED, {\r\n                timestamp: sampleTimestamp,\r\n                score: vadScore,\r\n                pcmData: pcmSample,\r\n                deviceId: this._localTrack.getDeviceId()\r\n            });\r\n        }\r\n\r\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\r\n    }\r\n\r\n    /**\r\n     * Connects the nodes in the AudioContext to start the flow of audio data.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _connectAudioGraph() {\r\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\r\n        this._audioSource.connect(this._audioProcessingNode);\r\n        this._audioProcessingNode.connect(this._audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the nodes in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _disconnectAudioGraph() {\r\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\r\n        // resulting in calls with and uninitialized context.\r\n        // eslint-disable-next-line no-empty-function\r\n        this._audioProcessingNode.onaudioprocess = () => {};\r\n        this._audioProcessingNode.disconnect();\r\n        this._audioSource.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Cleanup potentially acquired resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _cleanupResources() {\r\n        this._disconnectAudioGraph();\r\n        this._localTrack.stopStream();\r\n    }\r\n\r\n    /**\r\n     * Get the associated track device ID.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._localTrack.getDeviceId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the associated track label.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this._localTrack.getDeviceLabel();\r\n    }\r\n\r\n    /**\r\n     * Start the emitter by connecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    start() {\r\n        this._connectAudioGraph();\r\n    }\r\n\r\n    /**\r\n     * Stops the emitter by disconnecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        this._disconnectAudioGraph();\r\n        this._bufferResidue = [];\r\n    }\r\n\r\n    /**\r\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupResources();\r\n        this._destroyed = true;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\nimport TrackVADEmitter from './TrackVADEmitter';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\r\n\r\n/**\r\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\r\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\r\n */\r\nexport default class VADAudioAnalyser extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADAudioAnalyser</tt>\r\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\r\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\r\n     * needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @constructor\r\n     */\r\n    constructor(conference, createVADProcessor) {\r\n        super();\r\n\r\n        /**\r\n         * Member function that instantiates a VAD processor.\r\n         */\r\n        this._createVADProcessor = createVADProcessor;\r\n\r\n        /**\r\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\r\n         * period voice probability scores.\r\n         */\r\n        this._vadEmitter = null;\r\n\r\n        /**\r\n         * Current state of the _vadEmitter\r\n         */\r\n        this._isVADEmitterRunning = false;\r\n\r\n        /**\r\n         * Array of currently attached VAD processing services.\r\n         */\r\n        this._detectionServices = [];\r\n\r\n        /**\r\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\r\n         * coming from the conference.\r\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\r\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\r\n         * i.e. (TRACK_MUTE_CHANGED event callback).\r\n         */\r\n        this._vadInitTracker = Promise.resolve();\r\n\r\n        /**\r\n         * Listens for {@link TrackVADEmitter} events and processes them.\r\n         */\r\n        this._processVADScore = this._processVADScore.bind(this);\r\n\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Attach a VAD detector service to the analyser and handle it's state changes.\r\n     *\r\n     * @param {Object} vadTMDetector\r\n     */\r\n    addVADDetectionService(vadService) {\r\n        this._detectionServices.push(vadService);\r\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\r\n            // When the state of a detector changes check if there are any active detectors attached so that\r\n            // the _vadEmitter doesn't run needlessly.\r\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\r\n\r\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\r\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\r\n            // that needs it.\r\n            if (!activeDetector.length && this._isVADEmitterRunning) {\r\n                this._stopVADEmitter();\r\n            } else if (!this._isVADEmitterRunning) {\r\n                this._startVADEmitter();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the {@link TrackVADEmitter} and attach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _startVADEmitter() {\r\n        if (this._vadEmitter) {\r\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n            this._vadEmitter.start();\r\n            this._isVADEmitterRunning = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _stopVADEmitter() {\r\n        if (this._vadEmitter) {\r\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n            this._vadEmitter.stop();\r\n        }\r\n        this._isVADEmitterRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    _processVADScore(vadScore) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.processVADScore(vadScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the isMuted state of all attached detection services.\r\n     *\r\n     * @param {boolean} isMuted\r\n     */\r\n    _changeDetectorsMuteState(isMuted) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.changeMuteState(isMuted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\r\n     * Only take into account local audio tracks.\r\n     * @param {JitsiTrack} track - The added track.\r\n     * @returns {void}\r\n     * @listens TRACK_ADDED\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\r\n            // destroy/create the processing context in the proper order.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\r\n                .then(vadProcessor =>\r\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\r\n                )\r\n                .then(vadEmitter => {\r\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\r\n\r\n                    this._vadEmitter = vadEmitter;\r\n\r\n                    // Iterate through the detection services and set their appropriate mute state, depending on\r\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\r\n                    this._changeDetectorsMuteState(track.isMuted());\r\n                })\r\n                .catch(error => {\r\n                    logger.warn('Failed to start VADAudioAnalyser', error);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\r\n     * local audio tracks.\r\n     * @param {JitsiTrack} track - The track whose mute state has changed.\r\n     * @returns {void}\r\n     * @listens TRACK_MUTE_CHANGED\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // On a mute toggle reset the state.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                // Set mute status for the attached detection services.\r\n                this._changeDetectorsMuteState(track.isMuted());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\r\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\r\n     *\r\n     * @param {JitsiTrack} track - The removed track.\r\n     * @returns {void}\r\n     * @listens TRACK_REMOVED\r\n     */\r\n    _trackRemoved(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Use the promise to make sure operations are in sequence.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\r\n\r\n                // Track was removed, clean up and set appropriate states.\r\n                if (this._vadEmitter) {\r\n                    this._stopVADEmitter();\r\n                    this._vadEmitter.destroy();\r\n                    this._vadEmitter = null;\r\n                }\r\n\r\n                // Reset state of detectors when active track is removed.\r\n                for (const detector of this._detectionServices) {\r\n                    detector.reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\r\n\r\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n/**\r\n * The average value VAD needs to be under over a period of time to be considered noise.\r\n * @type {number}\r\n */\r\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\r\n\r\n/**\r\n * The average values that audio input need to be over to be considered loud.\r\n * @type {number}\r\n */\r\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst VAD_SCORE_TRIGGER = 0.2;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\r\n\r\n/**\r\n * Detect if provided VAD score and PCM data is considered noise.\r\n */\r\nexport default class VADNoiseDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADNoiseDetection</tt>\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Buffer that keeps audio level samples for a period of time.\r\n         */\r\n        this._audioLvlArray = [];\r\n\r\n        /**\r\n         * Current state of the service, if it's not active no processing will occur.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * If the score is above the set threshold fire the event.\r\n     * @returns {void}\r\n     * @fires VAD_NOISY_DEVICE\r\n     */\r\n    _calculateNoisyScore() {\r\n        const scoreAvg = calculateAverage(this._scoreArray);\r\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\r\n\r\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\r\n            this.emit(VAD_NOISY_DEVICE);\r\n\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Record the vad score and average volume in the appropriate buffers.\r\n     *\r\n     * @param {number} vadScore\r\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\r\n     */\r\n    _recordValues(vadScore, avgAudioLvl) {\r\n        this._scoreArray.push(vadScore);\r\n        this._audioLvlArray.push(avgAudioLvl);\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is not muted.\r\n        this._setActiveState(!isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        this._audioLvlArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            // Filter and calculate sample average so we don't have to process one large array at a time.\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n\r\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\r\n\r\n            return;\r\n        }\r\n\r\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\r\n        // noise\r\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n            const avgAudioLvl = calculateAverage(posAudioLevels);\r\n\r\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\r\n                this._processing = true;\r\n                this._recordValues(vadScore.score, avgAudioLvl);\r\n\r\n                // Once the preset timeout executes the final score will be calculated.\r\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage } from '../util/MathUtil';\r\n\r\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n\r\n/**\r\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\r\n * @type {number}\r\n */\r\nconst VAD_AVG_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\r\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\r\n * @type {number}\r\n */\r\nconst VAD_VOICE_LEVEL = 0.9;\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\r\n\r\n/**\r\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\r\n */\r\nexport default class VADTalkMutedDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADTalkMutedDetection</tt>\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Current mute state of the audio track being monitored.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateVADScore = this._calculateVADScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * @returns {void}\r\n     * @fires VAD_TALK_WHILE_MUTED\r\n     */\r\n    _calculateVADScore() {\r\n        const score = calculateAverage(this._scoreArray);\r\n\r\n        if (score > VAD_AVG_THRESHOLD) {\r\n            this.emit(VAD_TALK_WHILE_MUTED);\r\n\r\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\r\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is muted.\r\n        this._setActiveState(isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            return;\r\n        }\r\n\r\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\r\n        // there is no need to check for rogue events.\r\n        if (vadScore.score > VAD_VOICE_LEVEL) {\r\n            this._processing = true;\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            // Start gathering VAD scores for the configured period of time.\r\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n}\r\n","/**\r\n * Indicates that the end-to-end round-trip-time for a participant has changed.\r\n */\r\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as E2ePingEvents\r\n    from '../../service/e2eping/E2ePingEvents';\r\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping request.\r\n * @type {string}\r\n */\r\nconst E2E_PING_REQUEST = 'e2e-ping-request';\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping response.\r\n * @type {string}\r\n */\r\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\r\n\r\n/**\r\n * Saves e2e ping related state for a single JitsiParticipant.\r\n */\r\nclass ParticipantWrapper {\r\n    /**\r\n     * Creates a ParticipantWrapper\r\n     * @param {JitsiParticipant} participant - The remote participant that this\r\n     * object wraps.\r\n     * @param {E2ePing} e2eping\r\n     */\r\n    constructor(participant, e2eping) {\r\n        // The JitsiParticipant\r\n        this.participant = participant;\r\n\r\n        // The E2ePing\r\n        this.e2eping = e2eping;\r\n\r\n        // Caches the ID\r\n        this.id = participant.getId();\r\n\r\n        // Recently sent requests\r\n        this.requests = {};\r\n\r\n        // The ID of the last sent request. We just increment it for each new\r\n        // request. Start at 1 so we can consider only thruthy values valid.\r\n        this.lastRequestId = 1;\r\n\r\n        this.clearIntervals = this.clearIntervals.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\r\n        this.sendAnalytics = this.sendAnalytics.bind(this);\r\n\r\n        // If the data channel was already open (this is likely a participant\r\n        // joining an existing conference) send a request immediately.\r\n        if (e2eping.isDataChannelOpen) {\r\n            this.sendRequest();\r\n        }\r\n\r\n        this.pingInterval = window.setInterval(\r\n            this.sendRequest, e2eping.pingIntervalMs);\r\n        this.analyticsInterval = window.setTimeout(\r\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * Clears the interval which sends pings.\r\n     * @type {*}\r\n     */\r\n    clearIntervals() {\r\n        if (this.pingInterval) {\r\n            window.clearInterval(this.pingInterval);\r\n        }\r\n        if (this.analyticsInterval) {\r\n            window.clearInterval(this.analyticsInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the next ping request.\r\n     * @type {*}\r\n     */\r\n    sendRequest() {\r\n        const requestId = this.lastRequestId++;\r\n        const requestMessage = {\r\n            type: E2E_PING_REQUEST,\r\n            id: requestId\r\n        };\r\n\r\n        this.e2eping.sendMessage(requestMessage, this.id);\r\n        this.requests[requestId] = {\r\n            id: requestId,\r\n            timeSent: window.performance.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a response from this participant.\r\n     * @type {*}\r\n     */\r\n    handleResponse(response) {\r\n        const request = this.requests[response.id];\r\n\r\n        if (request) {\r\n            request.rtt = window.performance.now() - request.timeSent;\r\n            this.e2eping.eventEmitter.emit(\r\n                E2ePingEvents.E2E_RTT_CHANGED,\r\n                this.participant,\r\n                request.rtt);\r\n        }\r\n\r\n        this.maybeSendAnalytics();\r\n    }\r\n\r\n    /**\r\n     * Goes over the requests, clearing ones which we don't need anymore, and\r\n     * if it finds at least one request with a valid RTT in the last\r\n     * 'analyticsIntervalMs' then sends an analytics event.\r\n     * @type {*}\r\n     */\r\n    maybeSendAnalytics() {\r\n        const now = window.performance.now();\r\n\r\n        // The RTT we'll report is the minimum RTT measured in the last\r\n        // analyticsInterval\r\n        let rtt = Infinity;\r\n        let request, requestId;\r\n\r\n        // It's time to send analytics. Clean up all requests and find the\r\n        for (requestId in this.requests) {\r\n            if (this.requests.hasOwnProperty(requestId)) {\r\n                request = this.requests[requestId];\r\n\r\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\r\n                    // An old request. We don't care about it anymore.\r\n                    delete this.requests[requestId];\r\n                } else if (request.rtt) {\r\n                    rtt = Math.min(rtt, request.rtt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rtt < Infinity) {\r\n            this.sendAnalytics(rtt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an analytics event for this participant with the given RTT.\r\n     * @type {*}\r\n     */\r\n    sendAnalytics(rtt) {\r\n        Statistics.sendAnalytics(createE2eRttEvent(\r\n            this.id,\r\n            this.participant.getProperty('region'),\r\n            rtt));\r\n    }\r\n}\r\n\r\n/**\r\n * Implements end-to-end ping (from one conference participant to another) via\r\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\r\n *\r\n * TODO: use a broadcast message instead of individual pings to each remote\r\n * participant.\r\n *\r\n * This class:\r\n * 1. Sends periodic ping requests to all other participants in the\r\n * conference.\r\n * 2. Responds to ping requests from other participants.\r\n * 3. Fires events with the end-to-end RTT to each participant whenever a\r\n * response is received.\r\n * 4. Fires analytics events with the end-to-end RTT periodically.\r\n */\r\nexport default class E2ePing {\r\n    /**\r\n     * @param {JitsiConference} conference - The conference.\r\n     * @param {Function} sendMessage - The function to use to send a message.\r\n     * @param {Object} options\r\n     */\r\n    constructor(conference, options, sendMessage) {\r\n        this.conference = conference;\r\n        this.eventEmitter = conference.eventEmitter;\r\n        this.sendMessage = sendMessage;\r\n\r\n        // The interval at which pings will be sent (<= 0 disables sending).\r\n        this.pingIntervalMs = 10000;\r\n\r\n        // The interval at which analytics events will be sent.\r\n        this.analyticsIntervalMs = 60000;\r\n\r\n        // Maps a participant ID to its ParticipantWrapper\r\n        this.participants = {};\r\n\r\n        // Whether the WebRTC channel has been opened or not.\r\n        this.isDataChannelOpen = false;\r\n\r\n        if (options && options.e2eping) {\r\n            if (typeof options.e2eping.pingInterval === 'number') {\r\n                this.pingIntervalMs = options.e2eping.pingInterval;\r\n            }\r\n            if (typeof options.e2eping.analyticsInterval === 'number') {\r\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\r\n            }\r\n\r\n            // We want to report at most once a ping interval.\r\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\r\n                < this.pingIntervalMs) {\r\n                this.analyticsIntervalMs = this.pingIntervalMs;\r\n            }\r\n        }\r\n        logger.info(\r\n            `Initializing e2e ping; pingInterval=${\r\n                this.pingIntervalMs}, analyticsInterval=${\r\n                this.analyticsIntervalMs}.`);\r\n\r\n        this.participantJoined = this.participantJoined.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n\r\n        this.participantLeft = this.participantLeft.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n\r\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the communications channel has been opened\r\n     * and it can now send messages via sendMessage.\r\n     */\r\n    dataChannelOpened() {\r\n        this.isDataChannelOpen = true;\r\n\r\n        // We don't want to wait the whole interval before sending the first\r\n        // request, but we can't send it immediately after the participant joins\r\n        // either, because our data channel might not have initialized.\r\n        // So once the data channel initializes, send requests to everyone.\r\n        // Wait an additional 200ms to give a chance to the remote side (if it\r\n        // also just connected as is the case for the first 2 participants in a\r\n        // conference) to open its data channel.\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                const participantWrapper = this.participants[id];\r\n\r\n                window.setTimeout(participantWrapper.sendRequest, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a message that was received.\r\n     *\r\n     * @param participant - The message sender.\r\n     * @param payload - The payload of the message.\r\n     */\r\n    messageReceived(participant, payload) {\r\n        // Listen to E2E PING requests and responses from other participants\r\n        // in the conference.\r\n        if (payload.type === E2E_PING_REQUEST) {\r\n            this.handleRequest(participant.getId(), payload);\r\n        } else if (payload.type === E2E_PING_RESPONSE) {\r\n            this.handleResponse(participant.getId(), payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant joining the conference. Starts to send ping\r\n     * requests to the participant.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     * @param {JitsiParticipant} participant - The participant that joined.\r\n     */\r\n    participantJoined(id, participant) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            logger.info(\r\n                `Participant wrapper already exists for ${id}. Clearing.`);\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n\r\n        this.participants[id] = new ParticipantWrapper(participant, this);\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving the conference. Stops sending requests.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     */\r\n    participantLeft(id) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping request coming from another participant.\r\n     *\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * request.\r\n     * @param {Object} request - The request.\r\n     */\r\n    handleRequest(participantId, request) {\r\n        // If it's a valid request, just send a response.\r\n        if (request && request.id) {\r\n            const response = {\r\n                type: E2E_PING_RESPONSE,\r\n                id: request.id\r\n            };\r\n\r\n            this.sendMessage(response, participantId);\r\n        } else {\r\n            logger.info(\r\n                `Received an invalid e2e ping request from ${participantId}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping response coming from another participant\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * response.\r\n     * @param {Object} response - The response.\r\n     */\r\n    handleResponse(participantId, response) {\r\n        const participantWrapper = this.participants[participantId];\r\n\r\n        if (participantWrapper) {\r\n            participantWrapper.handleResponse(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops this E2ePing (i.e. stop sending requests).\r\n     */\r\n    stop() {\r\n        logger.info('Stopping e2eping');\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                this.participants[id].clearIntervals();\r\n            }\r\n        }\r\n\r\n        this.participants = {};\r\n    }\r\n}\r\n\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\r\n * P2P status and the conference participants count. See the event description\r\n * for more info.\r\n */\r\nexport default class Jvb121EventGenerator {\r\n    /**\r\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\r\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\r\n         * the conference is currently in the P2P mode.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._jvb121 = true;\r\n\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\r\n    }\r\n\r\n    /**\r\n     * Checks whether the JVB121 value should be updated and a new event\r\n     * emitted.\r\n     */\r\n    evaluateStatus() {\r\n        const oldStatus = this._jvb121;\r\n        const newStatus\r\n            = !this._conference.isP2PActive()\r\n                && this._conference.getParticipantCount() <= 2;\r\n\r\n        if (oldStatus !== newStatus) {\r\n            this._jvb121 = newStatus;\r\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\r\n        }\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\nconst MAX_HEIGHT_ONSTAGE = 2160;\r\nconst MAX_HEIGHT_THUMBNAIL = 180;\r\nconst LASTN_UNLIMITED = -1;\r\n\r\n/**\r\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\r\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\r\n */\r\nexport class ReceiverVideoConstraints {\r\n    /**\r\n     * Creates a new instance.\r\n     */\r\n    constructor() {\r\n        // Default constraints used for endpoints that are not explicitly included in constraints.\r\n        // These constraints are used for endpoints that are thumbnails in the stage view.\r\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\r\n\r\n        // The number of videos requested from the bridge.\r\n        this._lastN = LASTN_UNLIMITED;\r\n\r\n        // The number representing the maximum video height the local client should receive from the bridge.\r\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\r\n\r\n        // The endpoint IDs of the participants that are currently selected.\r\n        this._selectedEndpoints = [];\r\n\r\n        this._receiverVideoConstraints = {\r\n            constraints: {},\r\n            defaultConstraints: this.defaultConstraints,\r\n            lastN: this._lastN,\r\n            onStageEndpoints: [],\r\n            selectedEndpoints: this._selectedEndpoints\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\r\n     */\r\n    get constraints() {\r\n        this._receiverVideoConstraints.lastN = this._lastN;\r\n\r\n        if (!this._selectedEndpoints.length) {\r\n            return this._receiverVideoConstraints;\r\n        }\r\n\r\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\r\n        // assumed to be in StageView.\r\n        this._receiverVideoConstraints.constraints = {};\r\n        if (this._selectedEndpoints.length > 1) {\r\n            /**\r\n             * Tile view.\r\n             * Only the default constraints are specified here along with lastN (if it is set).\r\n             * {\r\n             *  'colibriClass': 'ReceiverVideoConstraints',\r\n             *  'defaultConstraints': { 'maxHeight': 360 }\r\n             * }\r\n             */\r\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\r\n            this._receiverVideoConstraints.onStageEndpoints = [];\r\n            this._receiverVideoConstraints.selectedEndpoints = [];\r\n        } else {\r\n            /**\r\n             * Stage view.\r\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\r\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\r\n             * {\r\n             *  'colibriClass': 'ReceiverVideoConstraints',\r\n             *  'onStageEndpoints': ['A'],\r\n             *  'defaultConstraints': { 'maxHeight':  180 },\r\n             *  'constraints': {\r\n             *      'A': { 'maxHeight': 720 }\r\n             *   }\r\n             * }\r\n             */\r\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\r\n                'maxHeight': this._maxFrameHeight\r\n            };\r\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\r\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\r\n            this._receiverVideoConstraints.selectedEndpoints = [];\r\n        }\r\n\r\n        return this._receiverVideoConstraints;\r\n    }\r\n\r\n    /**\r\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\r\n     *\r\n     * @param {number} value\r\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\r\n     */\r\n    updateLastN(value) {\r\n        const changed = this._lastN !== value;\r\n\r\n        if (changed) {\r\n            this._lastN = value;\r\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\r\n     * sent to the bridge.\r\n     *\r\n     * @param {number} maxFrameHeight\r\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\r\n     */\r\n    updateReceiveResolution(maxFrameHeight) {\r\n        const changed = this._maxFrameHeight !== maxFrameHeight;\r\n\r\n        if (changed) {\r\n            this._maxFrameHeight = maxFrameHeight;\r\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Updates the receiver constraints sent to the bridge.\r\n     *\r\n     * @param {Object} videoConstraints\r\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\r\n     */\r\n    updateReceiverVideoConstraints(videoConstraints) {\r\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\r\n\r\n        if (changed) {\r\n            this._receiverVideoConstraints = videoConstraints;\r\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Updates the list of selected endpoints.\r\n     *\r\n     * @param {Array<string>} ids\r\n     * @returns {void}\r\n     */\r\n    updateSelectedEndpoints(ids) {\r\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\r\n        this._selectedEndpoints = ids;\r\n    }\r\n}\r\n\r\n/**\r\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\r\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\r\n * for communicating these constraints to the bridge over the bridge channel.\r\n */\r\nexport class ReceiveVideoController {\r\n    /**\r\n     * Creates a new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\r\n     * the receive video quality constraints.\r\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\r\n     */\r\n    constructor(conference, rtc) {\r\n        this._conference = conference;\r\n        this._rtc = rtc;\r\n\r\n        const { config } = conference.options;\r\n\r\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\r\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\r\n\r\n        // The number representing the maximum video height the local client should receive from the bridge.\r\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\r\n\r\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\r\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\r\n\r\n        if (useNewReceiverConstraints) {\r\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\r\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\r\n\r\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\r\n        } else {\r\n            this._rtc.setLastN(this._lastN);\r\n        }\r\n\r\n        // The endpoint IDs of the participants that are currently selected.\r\n        this._selectedEndpoints = [];\r\n\r\n        this._conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStarted(session));\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\r\n     * session. The preferred receive frameHeight is applied on the media session.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession - the started media session.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(mediaSession) {\r\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\r\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\r\n        } else {\r\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\r\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the lastN value for the conference.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getLastN() {\r\n        return this._lastN;\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\r\n     * for this participant (even when last n is enabled).\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._receiverVideoConstraints) {\r\n            // Filter out the local endpointId from the list of selected endpoints.\r\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\r\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\r\n\r\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\r\n            const newConstraints = this._receiverVideoConstraints.constraints;\r\n\r\n            // Send bridge message only when the constraints change.\r\n            if (!isEqual(newConstraints, oldConstraints)) {\r\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\r\n            }\r\n\r\n            return;\r\n        }\r\n        this._rtc.selectEndpoints(ids);\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\r\n     * in effect. Set to -1 for unlimited or all available videos.\r\n     *\r\n     * @param {number} value the new value for lastN.\r\n     * @returns {void}\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n\r\n            if (this._receiverVideoConstraints) {\r\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\r\n\r\n                // Send out the message on the bridge channel if lastN was updated.\r\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\r\n\r\n                return;\r\n            }\r\n            this._rtc.setLastN(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video resolution the local participant should receive from remote participants.\r\n     *\r\n     * @param {number|undefined} maxFrameHeight - the new value.\r\n     * @returns {void}\r\n     */\r\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        for (const session of this._conference._getMediaSessions()) {\r\n            if (session.isP2P || !this._receiverVideoConstraints) {\r\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\r\n            } else {\r\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\r\n\r\n                resolutionUpdated\r\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the receiver constraints for the conference.\r\n     *\r\n     * @param {Object} constraints The video constraints.\r\n     */\r\n    setReceiverConstraints(constraints) {\r\n        if (!this._receiverVideoConstraints) {\r\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\r\n        }\r\n\r\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\r\n\r\n        if (constraintsChanged) {\r\n            this._lastN = constraints.lastN ?? this._lastN;\r\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\r\n            this._rtc.setNewReceiverVideoConstraints(constraints);\r\n\r\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\r\n\r\n            if (p2pSession) {\r\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\r\n\r\n                if (!maxFrameHeight) {\r\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\r\n                }\r\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\r\n\r\n/**\r\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\r\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\r\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\r\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\r\n * different.\r\n */\r\nexport class SendVideoController {\r\n    /**\r\n     * Creates new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\r\n     * the send video quality constraints.\r\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\r\n     */\r\n    constructor(conference, rtc) {\r\n        this.conference = conference;\r\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\r\n        this.rtc = rtc;\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStarted(session));\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n            () => this._propagateSendMaxFrameHeight());\r\n        this.rtc.on(\r\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\r\n            videoConstraints => {\r\n                // Propagate the sender constraint only if it has changed.\r\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\r\n                    this._senderVideoConstraints = videoConstraints;\r\n                    this._propagateSendMaxFrameHeight();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\r\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\r\n     * the conference has entered the p2p mode already.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession - the started media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(mediaSession) {\r\n        mediaSession.addListener(\r\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\r\n            session => {\r\n                if (session === this.conference._getActiveMediaSession()) {\r\n                    this._propagateSendMaxFrameHeight();\r\n                }\r\n            });\r\n\r\n        // Set the degradation preference on the local video track.\r\n        mediaSession.setSenderVideoDegradationPreference();\r\n\r\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\r\n        mediaSession.setSenderMaxBitrates();\r\n    }\r\n\r\n    /**\r\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\r\n     * sessions for the reasons mentioned in this class description.\r\n     *\r\n     * @returns {Promise<void[]>}\r\n     * @private\r\n     */\r\n    _propagateSendMaxFrameHeight() {\r\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\r\n        const promises = [];\r\n\r\n        if (sendMaxFrameHeight >= 0) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\r\n     * the active media session's receive preference set by the remote party.\r\n     *\r\n     * @returns {number|undefined}\r\n     */\r\n    selectSendMaxFrameHeight() {\r\n        const activeMediaSession = this.conference._getActiveMediaSession();\r\n        const remoteRecvMaxFrameHeight = activeMediaSession\r\n            ? activeMediaSession.isP2P\r\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\r\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\r\n            : undefined;\r\n\r\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\r\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\r\n        } else if (remoteRecvMaxFrameHeight >= 0) {\r\n            return remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.preferredSendMaxFrameHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max send video frame height.\r\n     *\r\n     * @param {number} maxFrameHeight - the new value to set.\r\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\r\n     */\r\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\r\n\r\n        return this._propagateSendMaxFrameHeight();\r\n    }\r\n}\r\n","/**\r\n * A collection of utility functions for taking in XML and parsing it to return\r\n * certain values.\r\n */\r\nexport default {\r\n    /**\r\n     * Parses the presence update of the focus and returns an object with the\r\n     * statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getFocusRecordingUpdate(presence) {\r\n        const jibriStatus = presence\r\n            && presence.getElementsByTagName('jibri-recording-status')[0];\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            error: jibriStatus.getAttribute('failure_reason'),\r\n            initiator: jibriStatus.getAttribute('initiator'),\r\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\r\n            sessionID: jibriStatus.getAttribute('session_id'),\r\n            status: jibriStatus.getAttribute('status')\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Parses the presence update from a hidden domain participant and returns\r\n     * an object with the statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getHiddenDomainUpdate(presence) {\r\n        const liveStreamViewURLContainer\r\n            = presence.getElementsByTagName('live-stream-view-url')[0];\r\n        const liveStreamViewURL = liveStreamViewURLContainer\r\n            && liveStreamViewURLContainer.textContent;\r\n        const modeContainer\r\n            = presence.getElementsByTagName('mode')[0];\r\n        const mode = modeContainer\r\n            && modeContainer.textContent\r\n            && modeContainer.textContent.toLowerCase();\r\n        const sessionIDContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionID\r\n            = sessionIDContainer && sessionIDContainer.textContent;\r\n\r\n        return {\r\n            liveStreamViewURL,\r\n            mode,\r\n            sessionID\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a successful IQ.\r\n     *\r\n     * @param {Node} response - The response from the IQ.\r\n     * @returns {string} The session ID of the recording session.\r\n     */\r\n    getSessionIdFromIq(response) {\r\n        const jibri = response && response.getElementsByTagName('jibri')[0];\r\n\r\n        return jibri && jibri.getAttribute('session_id');\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a presence, if it exists.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {string|undefined} The session ID of the recording session.\r\n     */\r\n    getSessionId(presence) {\r\n        const sessionIdContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\r\n\r\n        return sessionId;\r\n    },\r\n\r\n    /**\r\n     * Returns whether or not a presence is from the focus.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {boolean} True if the presence is from the focus.\r\n     */\r\n    isFromFocus(presence) {\r\n        return presence.getAttribute('from').includes('focus');\r\n    }\r\n};\r\n","import { $iq } from 'strophe.js';\r\n\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\n/**\r\n * Represents a recording session.\r\n */\r\nexport default class JibriSession {\r\n    /**\r\n     * Initializes a new JibriSession instance.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this._connection = options.connection;\r\n        this._mode = options.mode;\r\n\r\n        this._setSessionID(options.sessionID);\r\n        this.setStatus(options.status);\r\n    }\r\n\r\n    /**\r\n     * Returns the error related to the session instance, if any.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getError() {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns the session ID of the session instance.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getID() {\r\n        return this._sessionID;\r\n    }\r\n\r\n    /**\r\n     * Returns the initiator of the session instance.\r\n     *\r\n     * @returns {JitsiParticipant|string} The participant that started the session.\r\n     */\r\n    getInitiator() {\r\n        return this._initiator;\r\n    }\r\n\r\n    /**\r\n     * Returns the streaming URL of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getLiveStreamViewURL() {\r\n        return this._liveStreamViewURL;\r\n    }\r\n\r\n    /**\r\n     * Returns the current status of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant that stopped the session.\r\n     *\r\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\r\n     */\r\n    getTerminator() {\r\n        return this._terminator;\r\n    }\r\n\r\n    /**\r\n     * Returns the current recording mode of the session, such as \"file\".\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known error message related to the session.\r\n     *\r\n     * @param {string} error - The error string explaining why the session\r\n     * entered an error state.\r\n     * @returns {void}\r\n     */\r\n    setError(error) {\r\n        this._error = error;\r\n    }\r\n\r\n    /**\r\n     * Sets the last live stream URL for the session instance. Usually this is\r\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\r\n     *\r\n     * @param {string} url - The live stream URL associated with the session.\r\n     * @returns {void}\r\n     */\r\n    setLiveStreamViewURL(url) {\r\n        this._liveStreamViewURL = url;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known status for this recording session.\r\n     *\r\n     * @param {string} status - The new status to set.\r\n     * @returns {void}\r\n     */\r\n    setStatus(status) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Sets the participant that started the session.\r\n     * @param {JitsiParticipant | string} participant - The participant or resource id\r\n     * if local participant.\r\n     */\r\n    setInitiator(participant) {\r\n        this._initiator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sets the participant that stopped the session.\r\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\r\n     * if local participant.\r\n     */\r\n    setTerminator(participant) {\r\n        this._terminator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sends a message to start the actual recording.\r\n     *\r\n     * @param {Object} options - Additional arguments for starting the\r\n     * recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Promise\r\n     */\r\n    start({ appData, broadcastId, focusMucJid, streamId }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'start',\r\n                    appData,\r\n                    focusMucJid,\r\n                    broadcastId,\r\n                    streamId\r\n                }),\r\n                result => {\r\n                    // All users will eventually receive the 'pending' status\r\n                    // from the backend, but for the user initiating the session\r\n                    // it's better to give some instant feedback that recording\r\n                    // is starting so fire 'pending' here manually.\r\n                    this.setStatus('pending');\r\n                    this._setSessionID(\r\n                        recordingXMLUtils.getSessionIdFromIq(result));\r\n\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    this._setErrorFromIq(error);\r\n\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to actually stop the recording session.\r\n     *\r\n     * @param {Object} options - Additional arguments for stopping the\r\n     * recording.\r\n     * @param {Object} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @returns Promise\r\n     */\r\n    stop({ focusMucJid }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'stop',\r\n                    focusMucJid\r\n                }),\r\n                resolve,\r\n                reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the message to change the status of the recording session.\r\n     *\r\n     * @param {string} status - The new status to which the recording session\r\n     * should transition.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Object - The XMPP IQ message.\r\n     */\r\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\r\n        return $iq({\r\n            to: focusMucJid,\r\n            type: 'set'\r\n        })\r\n        .c('jibri', {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            'app_data': appData,\r\n            'recording_mode': this._mode,\r\n            'streamid': streamId,\r\n            'you_tube_broadcast_id': broadcastId\r\n        })\r\n        .up();\r\n    }\r\n\r\n    /**\r\n     * Handles the error from an iq and stores the error.\r\n     *\r\n     * @param {Node} errorIq - The error response from an Iq.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setErrorFromIq(errorIq) {\r\n        const error = errorIq.getElementsByTagName('error')[0];\r\n\r\n        this.setError(error.children[0].tagName);\r\n    }\r\n\r\n    /**\r\n     * Sets the known session ID for this recording session.\r\n     *\r\n     * @param {string} sessionID\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setSessionID(sessionID) {\r\n        this._sessionID = sessionID;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JibriSession from './JibriSession';\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A class responsible for starting and stopping recording sessions and emitting\r\n * state updates for them.\r\n */\r\nclass RecordingManager {\r\n    /**\r\n     * Initialize {@code RecordingManager} with other objects that are necessary\r\n     * for starting a recording.\r\n     *\r\n     * @param {ChatRoom} chatRoom - The chat room to handle.\r\n     * @returns {void}\r\n     */\r\n    constructor(chatRoom) {\r\n        /**\r\n         * All known recording sessions from the current conference.\r\n         */\r\n        this._sessions = {};\r\n\r\n        this._chatRoom = chatRoom;\r\n\r\n        this.onPresence = this.onPresence.bind(this);\r\n\r\n        this._chatRoom.eventEmitter.addListener(\r\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\r\n    }\r\n\r\n    /**\r\n     * Finds an existing recording session by session ID.\r\n     *\r\n     * @param {string} sessionID - The session ID associated with the recording.\r\n     * @returns {JibriSession|undefined}\r\n     */\r\n    getSession(sessionID) {\r\n        return this._sessions[sessionID];\r\n    }\r\n\r\n    /**\r\n     * Callback to invoke to parse through a presence update to find recording\r\n     * related updates (from Jibri participant doing the recording and the\r\n     * focus which controls recording).\r\n     *\r\n     * @param {Object} event - The presence data from the pubsub event.\r\n     * @param {Node} event.presence - An XMPP presence update.\r\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\r\n     * from a participant that is trusted but not visible, as would be the case\r\n     * with the Jibri recorder participant.\r\n     * @returns {void}\r\n     */\r\n    onPresence({ fromHiddenDomain, presence }) {\r\n        if (recordingXMLUtils.isFromFocus(presence)) {\r\n            this._handleFocusPresence(presence);\r\n        } else if (fromHiddenDomain) {\r\n            this._handleJibriPresence(presence);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start a recording session.\r\n     *\r\n     * @param {Object} options - Configuration for the recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [optional] options.broadcastId - The channel on which a\r\n     * live stream will occur.\r\n     * @param {string} options.mode - The mode in which recording should be\r\n     * started. Recognized values are \"file\" and \"stream\".\r\n     * @param {string} [optional] options.streamId - The stream key to be used\r\n     * for live stream broadcasting. Required for live streaming.\r\n     * @returns {Promise} A promise for starting a recording, which will pass\r\n     * back the session on success. The promise resolves after receiving an\r\n     * acknowledgment of the start request success or fail.\r\n     */\r\n    startRecording(options) {\r\n        const session = new JibriSession({\r\n            ...options,\r\n            connection: this._chatRoom.connection\r\n        });\r\n\r\n        return session.start({\r\n            appData: options.appData,\r\n            broadcastId: options.broadcastId,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            streamId: options.streamId\r\n        })\r\n            .then(() => {\r\n                // Only store the session and emit if the session has not been\r\n                // added already. This is a workaround for the session getting\r\n                // created due to a presence update to announce a \"pending\"\r\n                // recording being received before JibriSession#start finishes.\r\n                if (!this.getSession(session.getID())) {\r\n                    this._addSession(session);\r\n                    this._emitSessionUpdate(session);\r\n                }\r\n\r\n                return session;\r\n            })\r\n            .catch(error => {\r\n                this._emitSessionUpdate(session);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Stop a recording session.\r\n     *\r\n     * @param {string} sessionID - The ID associated with the recording session\r\n     * to be stopped.\r\n     * @returns {Promise} The promise resolves after receiving an\r\n     * acknowledgment of the stop request success or fail.\r\n     */\r\n    stopRecording(sessionID) {\r\n        const session = this.getSession(sessionID);\r\n\r\n        if (session) {\r\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\r\n        }\r\n\r\n        return Promise.reject(new Error('Could not find session'));\r\n    }\r\n\r\n    /**\r\n     * Stores a reference to the passed in JibriSession.\r\n     *\r\n     * @param {string} session - The JibriSession instance to store.\r\n     * @returns {void}\r\n     */\r\n    _addSession(session) {\r\n        this._sessions[session.getID()] = session;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a recording session and stores a reference to\r\n     * it.\r\n     *\r\n     * @param {string} sessionID - The session ID of the recording in progress.\r\n     * @param {string} status - The current status of the recording session.\r\n     * @param {string} mode - The recording mode of the session.\r\n     * @returns {JibriSession}\r\n     */\r\n    _createSession(sessionID, status, mode) {\r\n        const session = new JibriSession({\r\n            connection: this._chatRoom.connection,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            mode,\r\n            sessionID,\r\n            status\r\n        });\r\n\r\n        this._addSession(session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners of an update to a recording session.\r\n     *\r\n     * @param {JibriSession} session - The session that has been updated.\r\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\r\n     */\r\n    _emitSessionUpdate(session, initiator) {\r\n        this._chatRoom.eventEmitter.emit(\r\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Parses presence to update an existing JibriSession or to create a new\r\n     * JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleFocusPresence(presence) {\r\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\r\n\r\n        // We'll look for an existing session or create one (in case we're a\r\n        // participant joining a call with an existing recording going on).\r\n        let session = this.getSession(sessionID);\r\n\r\n        // Handle the case where a status update is received in presence but\r\n        // the local participant has joined while the JibriSession has already\r\n        // ended.\r\n        if (!session && status === 'off') {\r\n            logger.warn(\r\n                'Ignoring recording presence update',\r\n                'Received a new session with status off.');\r\n\r\n            return;\r\n        }\r\n\r\n        // Jicofo sends updates via presence, and any extension in presence\r\n        // is sent until it is explicitly removed.  It's difficult for\r\n        // Jicofo to know when a presence has been sent once, so it won't\r\n        // remove jibri status extension.  This means we may receive the same\r\n        // status update more than once, so check for that here\r\n        if (session\r\n            && session.getStatus() === status\r\n            && session.getError() === error) {\r\n            logger.warn('Ignoring duplicate presence update: ',\r\n                JSON.stringify(jibriStatus));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, status, recordingMode);\r\n        }\r\n\r\n        session.setStatus(status);\r\n\r\n        if (error) {\r\n            session.setError(error);\r\n        }\r\n\r\n        this._emitSessionUpdate(session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\r\n     * needs to be updated in a JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleJibriPresence(presence) {\r\n        const { liveStreamViewURL, mode, sessionID }\r\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\r\n\r\n        if (!sessionID) {\r\n            logger.warn(\r\n                'Ignoring potential jibri presence due to no session id.');\r\n\r\n            return;\r\n        }\r\n\r\n        let session = this.getSession(sessionID);\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, '', mode);\r\n        }\r\n\r\n        session.setLiveStreamViewURL(liveStreamViewURL);\r\n\r\n        this._emitSessionUpdate(session);\r\n    }\r\n}\r\n\r\nexport default RecordingManager;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\r\n\r\nimport Statistics from './statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Number of local samples that will be used for comparison before and after the remote sample is received.\r\n */\r\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\r\n\r\n/**\r\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\r\n * participant and compares them to detect potential audio problem for a participant.\r\n */\r\nexport default class AudioOutputProblemDetector {\r\n\r\n    /**\r\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\r\n     *\r\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n        this._localAudioLevelCache = {};\r\n        this._reportedParticipants = [];\r\n        this._audioProblemCandidates = {};\r\n        this._numberOfRemoteAudioLevelsReceived = {};\r\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\r\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\r\n        this._clearUserData = this._clearUserData.bind(this);\r\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data received by a remote participant.\r\n     *\r\n     * @param {string} userID - The user id of the participant that sent the data.\r\n     * @param {number} audioLevel - The average audio level value.\r\n     * @returns {void}\r\n     */\r\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\r\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\r\n\r\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\r\n\r\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\r\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\r\n            return;\r\n        }\r\n\r\n        const participant = this._conference.getParticipantById(userID);\r\n\r\n        if (participant) {\r\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\r\n\r\n            if (tracks.length > 0 && participant.isAudioMuted()) {\r\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\r\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\r\n                // zero values for muted track.\r\n                return;\r\n            }\r\n        }\r\n\r\n        const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\r\n            this._audioProblemCandidates[userID] = {\r\n                remoteAudioLevels: avgAudioLevels,\r\n                localAudioLevels: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data retrieved by the local stats.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\r\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\r\n     * @returns {void}\r\n     */\r\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(avgAudioLevels).forEach(userID => {\r\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\r\n                return;\r\n            }\r\n\r\n            const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n            if (!Array.isArray(localAudioLevels)) {\r\n                this._localAudioLevelCache[userID] = [ ];\r\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\r\n                localAudioLevels.shift();\r\n            }\r\n\r\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\r\n        });\r\n\r\n\r\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\r\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\r\n\r\n            localAudioLevels.push(avgAudioLevels[userID]);\r\n\r\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\r\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\r\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\r\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\r\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\r\n                        remoteAudioLevels}`);\r\n                    this._reportedParticipants.push(userID);\r\n                    this._clearUserData(userID);\r\n                }\r\n\r\n                delete this._audioProblemCandidates[userID];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the data stored for a participant.\r\n     *\r\n     * @param {string} userID - The id of the participant.\r\n     * @returns {void}\r\n     */\r\n    _clearUserData(userID) {\r\n        delete this._localAudioLevelCache[userID];\r\n    }\r\n\r\n    /**\r\n     * Disposes the allocated resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._localAudioLevelCache = undefined;\r\n        this._audioProblemCandidates = undefined;\r\n        this._reportedParticipants = undefined;\r\n        this._numberOfRemoteAudioLevelsReceived = undefined;\r\n        this._conference = undefined;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport * as ConnectionQualityEvents\r\n    from '../../service/connectivity/ConnectionQualityEvents';\r\nimport {\r\n    createRtpStatsEvent,\r\n    createTransportStatsEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nimport Statistics from './statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This will calculate an average for one, named stat and submit it to\r\n * the analytics module when requested. It automatically counts the samples.\r\n */\r\nclass AverageStatReport {\r\n    /**\r\n     * Creates new <tt>AverageStatReport</tt> for given name.\r\n     * @param {string} name that's the name of the event that will be reported\r\n     * to the analytics module.\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.sum = 0;\r\n        this.samples = [];\r\n    }\r\n\r\n    /**\r\n     * Adds the next value that will be included in the average when\r\n     * {@link calculate} is called.\r\n     * @param {number} nextValue\r\n     */\r\n    addNext(nextValue) {\r\n        if (typeof nextValue !== 'number') {\r\n            logger.error(\r\n                `${this.name} - invalid value for idx: ${this.count}`,\r\n                nextValue);\r\n        } else if (!isNaN(nextValue)) {\r\n            this.sum += nextValue;\r\n            this.samples.push(nextValue);\r\n            this.count += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates an average for the samples collected using {@link addNext}.\r\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\r\n     * if no samples were collected.\r\n     */\r\n    calculate() {\r\n        return this.sum / this.count;\r\n    }\r\n\r\n    /**\r\n     * Appends the report to the analytics \"data\" object. The object will be\r\n     * set under <tt>prefix</tt> + {@link this.name} key.\r\n     * @param {Object} report the analytics \"data\" object\r\n     */\r\n    appendReport(report) {\r\n        report[`${this.name}_avg`] = this.calculate();\r\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\r\n    }\r\n\r\n    /**\r\n     * Clears all memory of any samples collected, so that new average can be\r\n     * calculated using this instance.\r\n     */\r\n    reset() {\r\n        this.samples = [];\r\n        this.sum = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Class gathers the stats that are calculated and reported for a\r\n * {@link TraceablePeerConnection} even if it's not currently active. For\r\n * example we want to monitor RTT for the JVB connection while in P2P mode.\r\n */\r\nclass ConnectionAvgStats {\r\n    /**\r\n     * Creates new <tt>ConnectionAvgStats</tt>\r\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\r\n     * @param {boolean} isP2P\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(avgRtpStatsReporter, isP2P, n) {\r\n        /**\r\n         * Is this instance for JVB or P2P connection ?\r\n         * @type {boolean}\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * How many samples are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * Average round trip time reported by the ICE candidate pair.\r\n         * @type {AverageStatReport}\r\n         */\r\n        this._avgRTT = new AverageStatReport('rtt');\r\n\r\n        /**\r\n         * Map stores average RTT to the JVB reported by remote participants.\r\n         * Mapped per participant id {@link JitsiParticipant.getId}.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {Map<string,AverageStatReport>}\r\n         * @private\r\n         */\r\n        this._avgRemoteRTTMap = new Map();\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\r\n\r\n        /**\r\n         * The latest average E2E RTT for the JVB connection only.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._avgEnd2EndRTT = undefined;\r\n\r\n        this._onConnectionStats = (tpc, stats) => {\r\n            if (this.isP2P === tpc.isP2P) {\r\n                this._calculateAvgStats(stats);\r\n            }\r\n        };\r\n\r\n        const conference = avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._onConnectionStats);\r\n\r\n        if (!this.isP2P) {\r\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\r\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n            this._onRemoteStatsUpdated\r\n                = (id, data) => this._processRemoteStats(id, data);\r\n            conference.on(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        if (browser.supportsRTTStatistics()) {\r\n            if (data.transport && data.transport.length) {\r\n                this._avgRTT.addNext(data.transport[0].rtt);\r\n            }\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n            if (browser.supportsRTTStatistics()) {\r\n                const conference = this._avgRtpStatsReporter._conference;\r\n\r\n                const batchReport = {\r\n                    p2p: this.isP2P,\r\n                    'conference_size': conference.getParticipantCount()\r\n                };\r\n\r\n                if (data.transport && data.transport.length) {\r\n                    Object.assign(batchReport, {\r\n                        'local_candidate_type':\r\n                            data.transport[0].localCandidateType,\r\n                        'remote_candidate_type':\r\n                            data.transport[0].remoteCandidateType,\r\n                        'transport_type': data.transport[0].type\r\n                    });\r\n                }\r\n\r\n                this._avgRTT.appendReport(batchReport);\r\n\r\n                if (this.isP2P) {\r\n                    // Report RTT diff only for P2P.\r\n                    const jvbEnd2EndRTT = this\r\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\r\n\r\n                    if (!isNaN(jvbEnd2EndRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['rtt_diff']\r\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\r\n                    }\r\n                } else {\r\n                    // Report end to end RTT only for JVB.\r\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\r\n                    const avgLocalRTT = this._avgRTT.calculate();\r\n\r\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\r\n\r\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\r\n                    }\r\n                }\r\n\r\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n            }\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\r\n     * participants.\r\n     * @return {number|NaN} NaN if not available (not enough data)\r\n     * @private\r\n     */\r\n    _calculateAvgRemoteRTT() {\r\n        let count = 0, sum = 0;\r\n\r\n        // FIXME should we ignore RTT for participant\r\n        // who \"is having connectivity issues\" ?\r\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\r\n            const avg = remoteAvg.calculate();\r\n\r\n            if (!isNaN(avg)) {\r\n                sum += avg;\r\n                count += 1;\r\n                remoteAvg.reset();\r\n            }\r\n        }\r\n\r\n        return sum / count;\r\n    }\r\n\r\n    /**\r\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\r\n     * RTT towards the JVB reported by each participant.\r\n     * @param {string} id {@link JitsiParticipant.getId}\r\n     * @param {go figure in ConnectionQuality.js} data\r\n     * @private\r\n     */\r\n    _processRemoteStats(id, data) {\r\n        const validData = typeof data.jvbRTT === 'number';\r\n        let rttAvg = this._avgRemoteRTTMap.get(id);\r\n\r\n        if (!rttAvg && validData) {\r\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\r\n            this._avgRemoteRTTMap.set(id, rttAvg);\r\n        }\r\n\r\n        if (validData) {\r\n            rttAvg.addNext(data.jvbRTT);\r\n        } else if (rttAvg) {\r\n            this._avgRemoteRTTMap.delete(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgRTT.reset();\r\n        if (this._avgRemoteRTTMap) {\r\n            this._avgRemoteRTTMap.clear();\r\n        }\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dispose() {\r\n\r\n        const conference = this._avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.removeConnectionStatsListener(\r\n            this._onConnectionStats);\r\n        if (!this.isP2P) {\r\n            conference.off(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n            conference.off(\r\n                ConferenceEvents.USER_LEFT,\r\n                this._onUserLeft);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reports average RTP statistics values (arithmetic mean) to the analytics\r\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\r\n * of the P2P vs JVB conference modes and submits the values under different\r\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\r\n * P2P mode resets the data collected so far and averages are calculated from\r\n * scratch.\r\n */\r\nexport default class AvgRTPStatsReporter {\r\n    /**\r\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\r\n     * @param {JitsiConference} conference\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(conference, n) {\r\n        /**\r\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\r\n         * are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        if (n > 0) {\r\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\r\n        } else {\r\n            logger.info('Avg RTP stats reports are disabled.');\r\n\r\n            // Do not initialize\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Average audio upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateUp\r\n            = new AverageStatReport('bitrate_audio_upload');\r\n\r\n        /**\r\n         * Average audio download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateDown\r\n            = new AverageStatReport('bitrate_audio_download');\r\n\r\n        /**\r\n         * Average video upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateUp\r\n            = new AverageStatReport('bitrate_video_upload');\r\n\r\n        /**\r\n         * Average video download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateDown\r\n            = new AverageStatReport('bitrate_video_download');\r\n\r\n        /**\r\n         * Average upload bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthUp\r\n            = new AverageStatReport('bandwidth_upload');\r\n\r\n        /**\r\n         * Average download bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthDown\r\n            = new AverageStatReport('bandwidth_download');\r\n\r\n        /**\r\n         * Average total packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossTotal\r\n            = new AverageStatReport('packet_loss_total');\r\n\r\n        /**\r\n         * Average upload packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossUp\r\n            = new AverageStatReport('packet_loss_upload');\r\n\r\n        /**\r\n         * Average download packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossDown\r\n            = new AverageStatReport('packet_loss_download');\r\n\r\n        /**\r\n         * Average FPS for remote videos\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\r\n\r\n        /**\r\n         * Average FPS for remote screen streaming videos (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenFPS\r\n            = new AverageStatReport('framerate_screen_remote');\r\n\r\n        /**\r\n         * Average FPS for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\r\n\r\n        /**\r\n         * Average FPS for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenFPS\r\n            = new AverageStatReport('framerate_screen_local');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteCameraPixels\r\n            = new AverageStatReport('pixels_remote');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenPixels\r\n            = new AverageStatReport('pixels_screen_remote');\r\n\r\n        /**\r\n         * Average pixels for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalCameraPixels\r\n            = new AverageStatReport('pixels_local');\r\n\r\n        /**\r\n         * Average pixels for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenPixels\r\n            = new AverageStatReport('pixels_screen_local');\r\n\r\n        /**\r\n         * Average connection quality as defined by\r\n         * the {@link ConnectionQuality} module.\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgCQ = new AverageStatReport('connection_quality');\r\n\r\n        this._cachedTransportStats = undefined;\r\n\r\n        this._onLocalStatsUpdated = data => {\r\n            this._calculateAvgStats(data);\r\n            this._maybeSendTransportAnalyticsEvent(data);\r\n        };\r\n        conference.on(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n\r\n        this._onP2PStatusChanged = () => {\r\n            logger.debug('Resetting average stats calculation');\r\n            this._resetAvgStats();\r\n            this.jvbStatsMonitor._resetAvgStats();\r\n            this.p2pStatsMonitor._resetAvgStats();\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n\r\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\r\n            // We want to reset only on the transition from false => true,\r\n            // because otherwise those stats are resetted on JVB <=> P2P\r\n            // transition.\r\n            if (newStatus === true) {\r\n                logger.info('Resetting JVB avg RTP stats');\r\n                this._resetAvgJvbStats();\r\n            }\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n\r\n        this.jvbStatsMonitor\r\n            = new ConnectionAvgStats(this, false /* JVB */, n);\r\n\r\n        this.p2pStatsMonitor\r\n            = new ConnectionAvgStats(this, true /* P2P */, n);\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats reported on\r\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        const isP2P = this._conference.isP2PActive();\r\n        const confSize = this._conference.getParticipantCount();\r\n\r\n        if (!isP2P && confSize < 2) {\r\n\r\n            // There's no point in collecting stats for a JVB conference of 1.\r\n            // That happens for short period of time after everyone leaves\r\n            // the room, until Jicofo terminates the session.\r\n            return;\r\n        }\r\n\r\n        /* Uncomment to figure out stats structure\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                logger.info(`local stat ${key}: `, data[key]);\r\n            }\r\n        } */\r\n\r\n        const bitrate = data.bitrate;\r\n        const bandwidth = data.bandwidth;\r\n        const packetLoss = data.packetLoss;\r\n        const frameRate = data.framerate;\r\n        const resolution = data.resolution;\r\n\r\n        if (!bitrate) {\r\n            logger.error('No \"bitrate\"');\r\n\r\n            return;\r\n        } else if (!bandwidth) {\r\n            logger.error('No \"bandwidth\"');\r\n\r\n            return;\r\n        } else if (!packetLoss) {\r\n            logger.error('No \"packetloss\"');\r\n\r\n            return;\r\n        } else if (!frameRate) {\r\n            logger.error('No \"framerate\"');\r\n\r\n            return;\r\n        } else if (!resolution) {\r\n            logger.error('No resolution');\r\n\r\n            return;\r\n        }\r\n\r\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\r\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\r\n\r\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\r\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\r\n\r\n        if (browser.supportsBandwidthStatistics()) {\r\n            this._avgBandwidthUp.addNext(bandwidth.upload);\r\n            this._avgBandwidthDown.addNext(bandwidth.download);\r\n        }\r\n\r\n        this._avgPacketLossUp.addNext(packetLoss.upload);\r\n        this._avgPacketLossDown.addNext(packetLoss.download);\r\n        this._avgPacketLossTotal.addNext(packetLoss.total);\r\n\r\n        this._avgCQ.addNext(data.connectionQuality);\r\n\r\n        if (frameRate) {\r\n            this._avgRemoteFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.CAMERA));\r\n            this._avgRemoteScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.CAMERA));\r\n            this._avgLocalScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        if (resolution) {\r\n            this._avgRemoteCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.CAMERA));\r\n\r\n            this._avgRemoteScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.CAMERA));\r\n\r\n            this._avgLocalScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n\r\n            const batchReport = {\r\n                p2p: isP2P,\r\n                'conference_size': confSize\r\n            };\r\n\r\n            if (data.transport && data.transport.length) {\r\n                Object.assign(batchReport, {\r\n                    'local_candidate_type':\r\n                        data.transport[0].localCandidateType,\r\n                    'remote_candidate_type':\r\n                        data.transport[0].remoteCandidateType,\r\n                    'transport_type': data.transport[0].type\r\n                });\r\n            }\r\n\r\n            this._avgAudioBitrateUp.appendReport(batchReport);\r\n            this._avgAudioBitrateDown.appendReport(batchReport);\r\n\r\n            this._avgVideoBitrateUp.appendReport(batchReport);\r\n            this._avgVideoBitrateDown.appendReport(batchReport);\r\n\r\n            if (browser.supportsBandwidthStatistics()) {\r\n                this._avgBandwidthUp.appendReport(batchReport);\r\n                this._avgBandwidthDown.appendReport(batchReport);\r\n            }\r\n            this._avgPacketLossUp.appendReport(batchReport);\r\n            this._avgPacketLossDown.appendReport(batchReport);\r\n            this._avgPacketLossTotal.appendReport(batchReport);\r\n\r\n            this._avgRemoteFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\r\n                this._avgRemoteScreenFPS.appendReport(batchReport);\r\n            }\r\n            this._avgLocalFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\r\n                this._avgLocalScreenFPS.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgRemoteCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\r\n                this._avgRemoteScreenPixels.appendReport(batchReport);\r\n            }\r\n            this._avgLocalCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\r\n                this._avgLocalScreenPixels.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgCQ.appendReport(batchReport);\r\n\r\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates average number of pixels for the report\r\n     *\r\n     * @param {map} peerResolutions a map of peer resolutions\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\r\n     * are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\r\n        let peerPixelsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(peerResolutions)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null\r\n                        : this._conference.getParticipantById(peerID);\r\n                const videosResolution = peerResolutions[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosResolution) {\r\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\r\n                        videosResolution, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgPixels)) {\r\n                        peerPixelsSum += peerAvgPixels;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average pixels for either remote or local participant\r\n     * @param {object} videos maps resolution per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local video pixels calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average video pixels of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track =>\r\n                                !track.isMuted()\r\n                                    && track.getSSRC() === ssrc\r\n                                    && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track =>\r\n                            !track.isMuted()\r\n                                && tpc.getLocalSSRC(track) === ssrc\r\n                                && track.videoType === videoType));\r\n        }\r\n\r\n        let peerPixelsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcPixels\r\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\r\n                peerPixelsSum += peerSsrcPixels;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerSsrcCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates average FPS for the report\r\n     * @param {go figure} frameRate\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\r\n        let peerFpsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(frameRate)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null : this._conference.getParticipantById(peerID);\r\n                const videosFps = frameRate[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosFps) {\r\n                    const peerAvgFPS\r\n                        = this._calculatePeerAvgVideoFps(\r\n                            videosFps, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgFPS)) {\r\n                        peerFpsSum += peerAvgFPS;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average FPS for either remote or local participant\r\n     * @param {object} videos maps FPS per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local FPS calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average FPS of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track => !track.isMuted()\r\n                                && track.getSSRC() === ssrc\r\n                                && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track => !track.isMuted()\r\n                            && tpc.getLocalSSRC(track) === ssrc\r\n                            && track.videoType === videoType));\r\n        }\r\n\r\n        let peerFpsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcFps = Number(videos[ssrc]);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\r\n                peerFpsSum += peerSsrcFps;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerSsrcCount;\r\n    }\r\n\r\n    /**\r\n     * Sends the 'transport.stats' analytics event whenever we detect that\r\n     * there is a change in the local or remote candidate type on the transport\r\n     * that is currently selected.\r\n     * @param {*} data\r\n     * @private\r\n     */\r\n    _maybeSendTransportAnalyticsEvent(data) {\r\n        if (!data || !data.transport || !data.transport.length) {\r\n            return;\r\n        }\r\n        const transportStats = {\r\n            p2p: data.transport[0].p2p,\r\n            'local_candidate_type': data.transport[0].localCandidateType,\r\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\r\n            'transport_type': data.transport[0].type\r\n        };\r\n\r\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\r\n            this._cachedTransportStats = transportStats;\r\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the stats related to JVB connection. Must not be called when in\r\n     * P2P mode, because then the {@link AverageStatReport} instances are\r\n     * tracking P2P stats. Note that this should never happen unless something\r\n     * is wrong with the P2P and JVB121 events.\r\n     * @private\r\n     */\r\n    _resetAvgJvbStats() {\r\n        this._resetAvgStats();\r\n        this.jvbStatsMonitor._resetAvgStats();\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgAudioBitrateUp.reset();\r\n        this._avgAudioBitrateDown.reset();\r\n\r\n        this._avgVideoBitrateUp.reset();\r\n        this._avgVideoBitrateDown.reset();\r\n\r\n        this._avgBandwidthUp.reset();\r\n        this._avgBandwidthDown.reset();\r\n\r\n        this._avgPacketLossUp.reset();\r\n        this._avgPacketLossDown.reset();\r\n        this._avgPacketLossTotal.reset();\r\n\r\n        this._avgRemoteFPS.reset();\r\n        this._avgRemoteScreenFPS.reset();\r\n        this._avgLocalFPS.reset();\r\n        this._avgLocalScreenFPS.reset();\r\n\r\n        this._avgRemoteCameraPixels.reset();\r\n        this._avgRemoteScreenPixels.reset();\r\n        this._avgLocalCameraPixels.reset();\r\n        this._avgLocalScreenPixels.reset();\r\n\r\n        this._avgCQ.reset();\r\n\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event listeners and stops working.\r\n     */\r\n    dispose() {\r\n        this._conference.off(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n        this._conference.off(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n        this._conference.off(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n        this.jvbStatsMonitor.dispose();\r\n        this.p2pStatsMonitor.dispose();\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport SpeakerStats from './SpeakerStats';\r\n\r\n/**\r\n * A collection for tracking speaker stats. Attaches listeners\r\n * to the conference to automatically update on tracked events.\r\n */\r\nexport default class SpeakerStatsCollector {\r\n    /**\r\n     * Initializes a new SpeakerStatsCollector instance.\r\n     *\r\n     * @constructor\r\n     * @param {JitsiConference} conference - The conference to track.\r\n     * @returns {void}\r\n     */\r\n    constructor(conference) {\r\n        this.stats = {\r\n            users: {\r\n\r\n                // userId: SpeakerStats\r\n            },\r\n            dominantSpeakerId: null\r\n        };\r\n\r\n        const userId = conference.myUserId();\r\n\r\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\r\n            this._onDominantSpeaker.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onUserJoin.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onUserLeave.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n            this._onDisplayNameChange.bind(this));\r\n        if (conference.xmpp) {\r\n            conference.xmpp.addListener(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\r\n                this._updateStats.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to dominant speaker change events by changing its speaker stats\r\n     * models to reflect the current dominant speaker.\r\n     *\r\n     * @param {string} dominantSpeakerId - The user id of the new\r\n     * dominant speaker.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDominantSpeaker(dominantSpeakerId) {\r\n        const oldDominantSpeaker\r\n            = this.stats.users[this.stats.dominantSpeakerId];\r\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\r\n\r\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\r\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\r\n        this.stats.dominantSpeakerId = dominantSpeakerId;\r\n    }\r\n\r\n    /**\r\n     * Reacts to user join events by creating a new SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the new user.\r\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserJoin(userId, participant) {\r\n        if (participant.isHidden()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.stats.users[userId]) {\r\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user leave events by updating the associated user's\r\n     * SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserLeave(userId) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.markAsHasLeft();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user name change events by updating the last known name\r\n     * tracked in the associated SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDisplayNameChange(userId, newName) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.setDisplayName(newName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a copy of the tracked SpeakerStats models.\r\n     *\r\n     * @returns {Object} The keys are the user ids and the values are the\r\n     * associated user's SpeakerStats model.\r\n     * @private\r\n     */\r\n    getStats() {\r\n        return this.stats.users;\r\n    }\r\n\r\n    /**\r\n     * Updates of the current stats is requested, passing the new values.\r\n     *\r\n     * @param {Object} newStats - The new values used to update current one.\r\n     * @private\r\n     */\r\n    _updateStats(newStats) {\r\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\r\n            let speakerStatsToUpdate;\r\n            const newParticipant = this.conference.getParticipantById(userId);\r\n\r\n            // we want to ignore hidden participants\r\n            if (!newParticipant || !newParticipant.isHidden()) {\r\n                if (this.stats.users[userId]) {\r\n                    speakerStatsToUpdate = this.stats.users[userId];\r\n\r\n                    if (!speakerStatsToUpdate.getDisplayName()) {\r\n                        speakerStatsToUpdate\r\n                            .setDisplayName(newStats[userId].displayName);\r\n                    }\r\n                } else {\r\n                    speakerStatsToUpdate = new SpeakerStats(\r\n                        userId, newStats[userId].displayName);\r\n                    this.stats.users[userId] = speakerStatsToUpdate;\r\n                    speakerStatsToUpdate.markAsHasLeft();\r\n                }\r\n            }\r\n\r\n            speakerStatsToUpdate.totalDominantSpeakerTime\r\n                = newStats[userId].totalDominantSpeakerTime;\r\n        }\r\n    }\r\n}\r\n","import Statistics from '../statistics/statistics';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\r\n * the versions of conferencing system components in given\r\n * <tt>JitsiConference</tt>.\r\n * @param conference <tt>JitsiConference</tt> instance which will be used to\r\n *        listen for focus presence updates.\r\n * @constructor\r\n */\r\nexport default function ComponentsVersions(conference) {\r\n\r\n    this.versions = {};\r\n\r\n    this.conference = conference;\r\n    this.conference.addCommandListener(\r\n        'versions', this.processVersions.bind(this));\r\n}\r\n\r\nComponentsVersions.prototype.processVersions\r\n    = function(versions, mucResource, mucJid) {\r\n        if (!this.conference.isFocus(mucJid)) {\r\n            logger.warn(\r\n                `Received versions not from the focus user: ${versions}`,\r\n                mucJid);\r\n\r\n            return;\r\n        }\r\n\r\n        const log = [];\r\n\r\n        versions.children.forEach(component => {\r\n\r\n            const name = component.attributes.name;\r\n            const version = component.value;\r\n\r\n            if (this.versions[name] !== version) {\r\n                this.versions[name] = version;\r\n                logger.info(`Got ${name} version: ${version}`);\r\n\r\n                log.push({\r\n                    id: 'component_version',\r\n                    component: name,\r\n                    version\r\n                });\r\n            }\r\n        });\r\n\r\n        // logs versions to stats\r\n        if (log.length > 0) {\r\n            Statistics.sendLog(JSON.stringify(log));\r\n        }\r\n    };\r\n\r\n/**\r\n * Obtains the version of conferencing system component.\r\n * @param componentName the name of the component for which we want to obtain\r\n *        the version.\r\n * @returns {String} which describes the version of the component identified by\r\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\r\n */\r\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\r\n    return this.versions[componentName];\r\n};\r\n","/**\r\n * Status that video SIP GW service is available.\r\n * @type {string}\r\n */\r\nexport const STATUS_AVAILABLE = 'available';\r\n\r\n/**\r\n * Status that video SIP GW service is not available.\r\n * @type {string}\r\n */\r\nexport const STATUS_UNDEFINED = 'undefined';\r\n\r\n/**\r\n * Status that video SIP GW service is available but there are no free nodes\r\n * at the moment to serve new requests.\r\n * @type {string}\r\n */\r\nexport const STATUS_BUSY = 'busy';\r\n\r\n/**\r\n * Video SIP GW session state, currently running.\r\n * @type {string}\r\n */\r\nexport const STATE_ON = 'on';\r\n\r\n/**\r\n * Video SIP GW session state, currently stopped and not running.\r\n * @type {string}\r\n */\r\nexport const STATE_OFF = 'off';\r\n\r\n/**\r\n * Video SIP GW session state, currently is starting.\r\n * @type {string}\r\n */\r\nexport const STATE_PENDING = 'pending';\r\n\r\n/**\r\n * Video SIP GW session state, has observed some issues and is retrying at the\r\n * moment.\r\n * @type {string}\r\n */\r\nexport const STATE_RETRYING = 'retrying';\r\n\r\n/**\r\n * Video SIP GW session state, tried to start but it failed.\r\n * @type {string}\r\n */\r\nexport const STATE_FAILED = 'failed';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session in conference where\r\n * there is no room connection (hasn't joined or has left the room).\r\n * @type {string}\r\n */\r\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session with address for which\r\n * there is an already created session.\r\n * @type {string}\r\n */\r\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The event name for current sip video session state changed.\r\n * @type {string} event name for sip video session state changed.\r\n */\r\nconst STATE_CHANGED = 'STATE_CHANGED';\r\n\r\n/**\r\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\r\n * When session is in OFF or FAILED stated it cannot be used anymore.\r\n */\r\nexport default class JitsiVideoSIPGWSession extends Listenable {\r\n\r\n    /**\r\n     * Creates new session with the desired sip address and display name.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use when\r\n     * starting the session.\r\n     * @param {string} displayName - The display name to use for\r\n     * that participant.\r\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\r\n     */\r\n    constructor(sipAddress, displayName, chatRoom) {\r\n        super();\r\n\r\n        this.sipAddress = sipAddress;\r\n        this.displayName = displayName;\r\n        this.chatRoom = chatRoom;\r\n\r\n        /*\r\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\r\n         * the session enters this state when it was in STATE_ON and was stopped\r\n         * and such session cannot be used anymore.\r\n         *\r\n         * @type {VideoSIPGWConstants|undefined}\r\n         */\r\n        this.state = undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the current session.\r\n     */\r\n    stop() {\r\n        if (this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\r\n            logger.warn('Video SIP GW session already stopped or failed!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('stop');\r\n    }\r\n\r\n    /**\r\n     * Starts a new session. Sends an iq to the focus.\r\n     */\r\n    start() {\r\n        // if state is off, this session was active for some reason\r\n        // and we should create new one, rather than reusing it\r\n        if (this.state === VideoSIPGWConstants.STATE_ON\r\n            || this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_PENDING\r\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\r\n            logger.warn('Video SIP GW session already started!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('start');\r\n    }\r\n\r\n    /**\r\n     * Changes the state of this session.\r\n     *\r\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\r\n     * @param {string} [optional] failureReason - The reason why a failure state\r\n     * was entered.\r\n     * @returns {void}\r\n     */\r\n    setState(newState, failureReason) {\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        const oldState = this.state;\r\n\r\n        this.state = newState;\r\n        this.eventEmitter.emit(STATE_CHANGED,\r\n            {\r\n                address: this.sipAddress,\r\n                failureReason,\r\n                oldState,\r\n                newState: this.state,\r\n                displayName: this.displayName\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subscribes the passed listener to the event for state change of this\r\n     * session.\r\n     *\r\n     * @param {Function} listener - The function that will receive the event.\r\n     */\r\n    addStateListener(listener) {\r\n        this.addListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the passed handler.\r\n     *\r\n     * @param {Function} listener - The function to be removed.\r\n     */\r\n    removeStateListener(listener) {\r\n        this.removeListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Sends a jibri command using an iq.\r\n     *\r\n     * @private\r\n     * @param {string} action - The action to send ('start' or 'stop').\r\n     */\r\n    _sendJibriIQ(action) {\r\n        const attributes = {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            sipaddress: this.sipAddress\r\n        };\r\n\r\n        attributes.displayname = this.displayName;\r\n\r\n        const iq = $iq({\r\n            to: this.chatRoom.focusMucJid,\r\n            type: 'set' })\r\n            .c('jibri', attributes)\r\n            .up();\r\n\r\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\r\n        this.chatRoom.connection.sendIQ(\r\n            iq,\r\n            () => {}, // eslint-disable-line no-empty-function\r\n            error => {\r\n                logger.error(\r\n                    `Failed to ${action} video SIP GW session, error: `, error);\r\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\r\n            });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\r\nimport * as Constants from './VideoSIPGWConstants';\r\n\r\n/**\r\n * Main video SIP GW handler. Stores references of all created sessions.\r\n */\r\nexport default class VideoSIPGW {\r\n\r\n    /**\r\n     * Creates new handler.\r\n     *\r\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\r\n     */\r\n    constructor(chatRoom) {\r\n        this.chatRoom = chatRoom;\r\n        this.eventEmitter = chatRoom.eventEmitter;\r\n        logger.debug('creating VideoSIPGW');\r\n        this.sessions = {};\r\n\r\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\r\n\r\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\r\n        // more than one VideoSIPGW can be created per JitsiConference,\r\n        // so we don't bother to cleanup\r\n        chatRoom.addPresenceListener('jibri-sip-call-state',\r\n            this.handleJibriSIPState.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles presence nodes with name: jibri-sip-call-state.\r\n     *\r\n     * @param {Object} node the presence node Object to handle.\r\n     * Object representing part of the presence received over xmpp.\r\n     */\r\n    handleJibriSIPState(node) {\r\n        const attributes = node.attributes;\r\n\r\n        if (!attributes) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Handle video sip gw state : ', attributes);\r\n\r\n        const newState = attributes.state;\r\n\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        switch (newState) {\r\n        case Constants.STATE_ON:\r\n        case Constants.STATE_OFF:\r\n        case Constants.STATE_PENDING:\r\n        case Constants.STATE_RETRYING:\r\n        case Constants.STATE_FAILED: {\r\n            const address = attributes.sipaddress;\r\n\r\n            if (!address) {\r\n                return;\r\n            }\r\n\r\n            // find the corresponding session and set its state\r\n            const session = this.sessions[address];\r\n\r\n            if (session) {\r\n                session.setState(newState, attributes.failure_reason);\r\n            } else {\r\n                logger.warn('Video SIP GW session not found:', address);\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new session and stores its reference if it does not exist or\r\n     * returns an error otherwise.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use.\r\n     * @param {string} displayName - The display name to use.\r\n     * @returns {JitsiVideoSIPGWSession|Error}\r\n     */\r\n    createVideoSIPGWSession(sipAddress, displayName) {\r\n        if (this.sessions[sipAddress]) {\r\n            logger.warn('There was already a Video SIP GW session for address',\r\n                sipAddress);\r\n\r\n            return new Error(Constants.ERROR_SESSION_EXISTS);\r\n        }\r\n\r\n        const session = new JitsiVideoSIPGWSession(\r\n            sipAddress, displayName, this.chatRoom);\r\n\r\n        session.addStateListener(this.sessionStateChangeListener);\r\n\r\n        this.sessions[sipAddress] = session;\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Listener for session state changed. When a session goes to off or failed\r\n     * we delete its reference.\r\n     *\r\n     * @param {options} event - { address, oldState, newState, displayName }\r\n     */\r\n    sessionStateChanged(event) {\r\n        const address = event.address;\r\n\r\n        if (event.newState === Constants.STATE_OFF\r\n            || event.newState === Constants.STATE_FAILED) {\r\n            const session = this.sessions[address];\r\n\r\n            if (!session) {\r\n                logger.error('Missing Video SIP GW session with address:',\r\n                    address);\r\n\r\n                return;\r\n            }\r\n\r\n            session.removeStateListener(this.sessionStateChangeListener);\r\n            delete this.sessions[address];\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n            event);\r\n    }\r\n}\r\n","/* global __filename, $, Promise */\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiParticipant from './JitsiParticipant';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\r\nimport { CodecSelection } from './modules/RTC/CodecSelection';\r\nimport RTC from './modules/RTC/RTC';\r\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\r\nimport browser from './modules/browser';\r\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\r\nimport IceFailedHandling\r\n    from './modules/connectivity/IceFailedHandling';\r\nimport ParticipantConnectionStatusHandler\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\r\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\r\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\r\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\r\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\r\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\r\nimport E2ePing from './modules/e2eping/e2eping';\r\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\r\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\r\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\r\nimport RecordingManager from './modules/recording/RecordingManager';\r\nimport Settings from './modules/settings/Settings';\r\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\r\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\r\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport Transcriber from './modules/transcription/transcriber';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport RandomUtil from './modules/util/RandomUtil';\r\nimport ComponentsVersions from './modules/version/ComponentsVersions';\r\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport {\r\n    FEATURE_E2EE,\r\n    FEATURE_JIGASI,\r\n    JITSI_MEET_MUC_TYPE\r\n} from './modules/xmpp/xmpp';\r\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\r\nimport CodecMimeType from './service/RTC/CodecMimeType';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport {\r\n    ACTION_JINGLE_RESTART,\r\n    ACTION_JINGLE_SI_RECEIVED,\r\n    ACTION_JINGLE_SI_TIMEOUT,\r\n    ACTION_JINGLE_TERMINATE,\r\n    ACTION_P2P_DECLINED,\r\n    ACTION_P2P_ESTABLISHED,\r\n    ACTION_P2P_FAILED,\r\n    ACTION_P2P_SWITCH_TO_JVB,\r\n    ICE_ESTABLISHMENT_DURATION_DIFF,\r\n    createConferenceEvent,\r\n    createJingleEvent,\r\n    createP2PEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * How long since Jicofo is supposed to send a session-initiate, before\r\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\r\n * @type {number}\r\n */\r\nconst JINGLE_SI_TIMEOUT = 5000;\r\n\r\n/**\r\n * Creates a JitsiConference object with the given name and properties.\r\n * Note: this constructor is not a part of the public API (objects should be\r\n * created using JitsiConnection.createConference).\r\n * @param options.config properties / settings related to the conference that\r\n * will be created.\r\n * @param options.name the name of the conference\r\n * @param options.connection the JitsiConnection object for this\r\n * JitsiConference.\r\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\r\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\r\n * calculated and submitted to the analytics module.\r\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\r\n * restart logic.\r\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\r\n * the peer to peer mode will be enabled. It means that when there are only 2\r\n * participants in the conference an attempt to make direct connection will be\r\n * made. If the connection succeeds the conference will stop sending data\r\n * through the JVB connection and will use the direct one instead.\r\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\r\n * seconds, before the conference switches back to P2P, after the 3rd\r\n * participant has left the room.\r\n * @param {number} [options.config.channelLastN=-1] The requested amount of\r\n * videos are going to be delivered after the value is in effect. Set to -1 for\r\n * unlimited or all available videos.\r\n * @param {number} [options.config.forceJVB121Ratio]\r\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\r\n * conference should be moved to the JVB instead of P2P. The decision is made on\r\n * the responder side, after ICE succeeds on the P2P connection.\r\n * @constructor\r\n *\r\n * FIXME Make all methods which are called from lib-internal classes\r\n *       to non-public (use _). To name a few:\r\n *       {@link JitsiConference.onLocalRoleChanged}\r\n *       {@link JitsiConference.onUserRoleChanged}\r\n *       {@link JitsiConference.onMemberLeft}\r\n *       and so on...\r\n */\r\nexport default function JitsiConference(options) {\r\n    if (!options.name || options.name.toLowerCase() !== options.name) {\r\n        const errmsg\r\n            = 'Invalid conference name (no conference name passed or it '\r\n                + 'contains invalid characters like capital letters)!';\r\n\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.connection = options.connection;\r\n    this.xmpp = this.connection?.xmpp;\r\n\r\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\r\n        const errmsg = 'A coference with the same name has already been created!';\r\n\r\n        delete this.connection;\r\n        delete this.xmpp;\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.eventEmitter = new EventEmitter();\r\n    this.options = options;\r\n    this.eventManager = new JitsiConferenceEventManager(this);\r\n    this.participants = {};\r\n    this._init(options);\r\n    this.componentsVersions = new ComponentsVersions(this);\r\n\r\n    /**\r\n     * Jingle session instance for the JVB connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.jvbJingleSession = null;\r\n    this.lastDominantSpeaker = null;\r\n    this.dtmfManager = null;\r\n    this.somebodySupportsDTMF = false;\r\n    this.authEnabled = false;\r\n    this.startAudioMuted = false;\r\n    this.startVideoMuted = false;\r\n    this.startMutedPolicy = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n    this.isMutedByFocus = false;\r\n\r\n    // when muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedByFocusActor = null;\r\n\r\n    this.isVideoMutedByFocus = false;\r\n\r\n    // when video muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedVideoByFocusActor = null;\r\n\r\n    // Flag indicates if the 'onCallEnded' method was ever called on this\r\n    // instance. Used to log extra analytics event for debugging purpose.\r\n    // We need to know if the potential issue happened before or after\r\n    // the restart.\r\n    this.wasStopped = false;\r\n\r\n    // Conference properties, maintained by jicofo.\r\n    this.properties = {};\r\n\r\n    /**\r\n     * The object which monitors local and remote connection statistics (e.g.\r\n     * sending bitrate) and calculates a number which represents the connection\r\n     * quality.\r\n     */\r\n    this.connectionQuality\r\n        = new ConnectionQuality(this, this.eventEmitter, options);\r\n\r\n    /**\r\n     * Reports average RTP statistics to the analytics module.\r\n     * @type {AvgRTPStatsReporter}\r\n     */\r\n    this.avgRtpStatsReporter\r\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\r\n\r\n    /**\r\n     * Detects issues with the audio of remote participants.\r\n     * @type {AudioOutputProblemDetector}\r\n     */\r\n    if (!options.config.disableAudioLevels) {\r\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the connection is interrupted or not.\r\n     */\r\n    this.isJvbConnectionInterrupted = false;\r\n\r\n    /**\r\n     * The object which tracks active speaker times\r\n     */\r\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\r\n\r\n    /* P2P related fields below: */\r\n\r\n    /**\r\n     * Stores reference to deferred start P2P task. It's created when 3rd\r\n     * participant leaves the room in order to avoid ping pong effect (it\r\n     * could be just a page reload).\r\n     * @type {number|null}\r\n     */\r\n    this.deferredStartP2PTask = null;\r\n\r\n    const delay\r\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\r\n\r\n    /**\r\n     * A delay given in seconds, before the conference switches back to P2P\r\n     * after the 3rd participant has left.\r\n     * @type {number}\r\n     */\r\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\r\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\r\n\r\n    /**\r\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\r\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\r\n     * and running.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    /**\r\n     * Flag set to <tt>true</tt> when P2P session has been established\r\n     * (ICE has been connected) and this conference is currently in the peer to\r\n     * peer mode (P2P connection is the active one).\r\n     * @type {boolean}\r\n     */\r\n    this.p2p = false;\r\n\r\n    /**\r\n     * A JingleSession for the direct peer to peer connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.p2pJingleSession = null;\r\n\r\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\r\n    this.recordingManager = new RecordingManager(this.room);\r\n\r\n    /**\r\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\r\n     *\r\n     * @type {undefined|number}\r\n     * @private\r\n     */\r\n    this._conferenceJoinAnalyticsEventSent = undefined;\r\n\r\n    /**\r\n     * End-to-End Encryption. Make it available if supported.\r\n     */\r\n    if (this.isE2EESupported()) {\r\n        logger.info('End-to-End Encryption is supported');\r\n\r\n        this._e2eEncryption = new E2EEncryption(this);\r\n    }\r\n}\r\n\r\n// FIXME convert JitsiConference to ES6 - ASAP !\r\nJitsiConference.prototype.constructor = JitsiConference;\r\n\r\n/**\r\n * Create a resource for the a jid. We use the room nickname (the resource part\r\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\r\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\r\n * into a 32bit field.\r\n *\r\n * @param {string} jid - The id set onto the XMPP connection.\r\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\r\n * to the XMPP service with a password.\r\n * @returns {string}\r\n * @static\r\n */\r\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\r\n    let mucNickname;\r\n\r\n    if (isAuthenticatedUser) {\r\n        // For authenticated users generate a random ID.\r\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n    } else {\r\n        // We try to use the first part of the node (which for anonymous users\r\n        // on prosody is a UUID) to match the previous behavior (and maybe make\r\n        // debugging easier).\r\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\r\n            .toLowerCase();\r\n\r\n        // But if this doesn't have the required format we just generate a new\r\n        // random nickname.\r\n        const re = /[0-9a-f]{8}/g;\r\n\r\n        if (!re.test(mucNickname)) {\r\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n        }\r\n    }\r\n\r\n    return mucNickname;\r\n};\r\n\r\n/**\r\n * Initializes the conference object properties\r\n * @param options {object}\r\n * @param options.connection {JitsiConnection} overrides this.connection\r\n */\r\nJitsiConference.prototype._init = function(options = {}) {\r\n    this.eventManager.setupXMPPListeners();\r\n\r\n    const { config } = this.options;\r\n\r\n    // Get the codec preference settings from config.js.\r\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\r\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\r\n    const codecSettings = {\r\n        disabledCodec: config.videoQuality\r\n            ? config.videoQuality.disabledCodec\r\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\r\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\r\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\r\n            || (config.preferH264 && CodecMimeType.H264),\r\n        p2pCodec: config.p2p\r\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\r\n            : CodecMimeType.VP8\r\n    };\r\n\r\n    this.codecSelection = new CodecSelection(this, codecSettings);\r\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\r\n    this.room = this.xmpp.createRoom(\r\n        this.options.name, {\r\n            ...config,\r\n            statsId: this._statsCurrentId\r\n        },\r\n        JitsiConference.resourceCreator\r\n    );\r\n\r\n    // Connection interrupted/restored listeners\r\n    this._onIceConnectionInterrupted\r\n        = this._onIceConnectionInterrupted.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\r\n\r\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\r\n\r\n    this._onIceConnectionEstablished\r\n        = this._onIceConnectionEstablished.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\r\n\r\n    this._updateProperties = this._updateProperties.bind(this);\r\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n        this._updateProperties);\r\n\r\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\r\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n    this.e2eping = new E2ePing(\r\n        this,\r\n        config,\r\n        (message, to) => {\r\n            try {\r\n                this.sendMessage(\r\n                    message, to, true /* sendThroughVideobridge */);\r\n            } catch (error) {\r\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\r\n            }\r\n        });\r\n\r\n    if (!this.rtc) {\r\n        this.rtc = new RTC(this, options);\r\n        this.eventManager.setupRTCListeners();\r\n    }\r\n\r\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\r\n    this.sendVideoController = new SendVideoController(this, this.rtc);\r\n\r\n    this.participantConnectionStatus\r\n        = new ParticipantConnectionStatusHandler(\r\n            this.rtc,\r\n            this,\r\n            {\r\n                // Both these options are not public API, leaving it here only\r\n                // as an entry point through config for tuning up purposes.\r\n                // Default values should be adjusted as soon as optimal values\r\n                // are discovered.\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n    this.participantConnectionStatus.init();\r\n\r\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\r\n    let enableCallStats = true;\r\n\r\n    if (config.testing && config.testing.callStatsThreshold) {\r\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\r\n    }\r\n\r\n    if (!this.statistics) {\r\n        this.statistics = new Statistics(this.xmpp, {\r\n            aliasName: this._statsCurrentId,\r\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\r\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\r\n            siteID: config.siteID,\r\n            customScriptUrl: config.callStatsCustomScriptUrl,\r\n            callStatsID: config.callStatsID,\r\n            callStatsSecret: config.callStatsSecret,\r\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\r\n            enableCallStats,\r\n            roomName: this.options.name,\r\n            applicationName: config.applicationName,\r\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\r\n            configParams: config.callStatsConfigParams\r\n        });\r\n        Statistics.analytics.addPermanentProperties({\r\n            'callstats_name': this._statsCurrentId\r\n        });\r\n\r\n        // Start performance observer for monitoring long tasks\r\n        if (config.longTasksStatsInterval) {\r\n            this.statistics.attachLongTasksStats(this);\r\n        }\r\n    }\r\n\r\n    this.eventManager.setupChatRoomListeners();\r\n\r\n    // Always add listeners because on reload we are executing leave and the\r\n    // listeners are removed from statistics module.\r\n    this.eventManager.setupStatisticsListeners();\r\n\r\n    // Disable VAD processing on Safari since it causes audio input to\r\n    // fail on some of the mobile devices.\r\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\r\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\r\n        // based detection.\r\n        if (config.createVADProcessor) {\r\n            logger.info('Using VAD detection for generating talk while muted events');\r\n\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\r\n\r\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Disable noisy mic detection on safari since it causes the audio input to\r\n    // fail on Safari on iPadOS.\r\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\r\n        if (config.createVADProcessor) {\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadNoiseDetection = new VADNoiseDetection();\r\n\r\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Generates events based on no audio input detector.\r\n    if (config.enableNoAudioDetection) {\r\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\r\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\r\n        });\r\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\r\n        });\r\n    }\r\n\r\n\r\n    if ('channelLastN' in config) {\r\n        this.setLastN(config.channelLastN);\r\n    }\r\n\r\n    /**\r\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\r\n     * @type {Jvb121EventGenerator}\r\n     */\r\n    this.jvb121Status = new Jvb121EventGenerator(this);\r\n\r\n    // creates dominant speaker detection that works only in p2p mode\r\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\r\n\r\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\r\n        this.setLocalParticipantProperty(\r\n            'region', config.deploymentInfo.userRegion);\r\n    }\r\n\r\n    // Publish the codec type to presence.\r\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\r\n\r\n    // Set transcription language presence extension.\r\n    // In case the language config is undefined or has the default value that the transcriber uses\r\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\r\n    // needlessly polluting the presence stanza.\r\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\r\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the conference.\r\n * @param password {string} the password\r\n * @param replaceParticipant {boolean} whether the current join replaces\r\n * an existing participant with same jwt from the meeting.\r\n */\r\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\r\n    if (this.room) {\r\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\r\n    }\r\n};\r\n\r\n/**\r\n * Authenticates and upgrades the role of the local participant/user.\r\n *\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the local participant/user finishes\r\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process.\r\n */\r\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\r\n    return authenticateAndUpgradeRole.call(this, {\r\n        ...options,\r\n        onCreateResource: JitsiConference.resourceCreator\r\n    });\r\n};\r\n\r\n/**\r\n * Check if joined to the conference.\r\n */\r\nJitsiConference.prototype.isJoined = function() {\r\n    return this.room && this.room.joined;\r\n};\r\n\r\n/**\r\n * Tells whether or not the P2P mode is enabled in the configuration.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PEnabled = function() {\r\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\r\n\r\n        // FIXME: remove once we have a default config template. -saghul\r\n        || typeof this.options.config.p2p === 'undefined';\r\n};\r\n\r\n/**\r\n * When in P2P test mode, the conference will not automatically switch to P2P\r\n * when there 2 participants.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\r\n    return Boolean(this.options.config.testing\r\n        && this.options.config.testing.p2pTestMode);\r\n};\r\n\r\n/**\r\n * Leaves the conference.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.leave = function() {\r\n    if (this.participantConnectionStatus) {\r\n        this.participantConnectionStatus.dispose();\r\n        this.participantConnectionStatus = null;\r\n    }\r\n    if (this.avgRtpStatsReporter) {\r\n        this.avgRtpStatsReporter.dispose();\r\n        this.avgRtpStatsReporter = null;\r\n    }\r\n\r\n    if (this._audioOutputProblemDetector) {\r\n        this._audioOutputProblemDetector.dispose();\r\n        this._audioOutputProblemDetector = null;\r\n    }\r\n\r\n    if (this.e2eping) {\r\n        this.e2eping.stop();\r\n        this.e2eping = null;\r\n    }\r\n\r\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\r\n\r\n    this.rtc.closeBridgeChannel();\r\n\r\n    this._sendConferenceLeftAnalyticsEvent();\r\n\r\n    if (this.statistics) {\r\n        this.statistics.dispose();\r\n    }\r\n\r\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n\r\n    this._maybeClearSITimeout();\r\n\r\n    // Close both JVb and P2P JingleSessions\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.close();\r\n        this.jvbJingleSession = null;\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        this.p2pJingleSession.close();\r\n        this.p2pJingleSession = null;\r\n    }\r\n\r\n    // leave the conference\r\n    if (this.room) {\r\n        const room = this.room;\r\n\r\n        // Unregister connection state listeners\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_INTERRUPTED,\r\n            this._onIceConnectionInterrupted);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_RESTORED,\r\n            this._onIceConnectionRestored);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_ESTABLISHED,\r\n            this._onIceConnectionEstablished);\r\n\r\n        room.removeListener(\r\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n            this._updateProperties);\r\n\r\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n        this.eventManager.removeXMPPListeners();\r\n\r\n        this.room = null;\r\n\r\n        return room.leave()\r\n            .then(() => {\r\n                if (this.rtc) {\r\n                    this.rtc.destroy();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // remove all participants because currently the conference\r\n                // won't be usable anyway. This is done on success automatically\r\n                // by the ChatRoom instance.\r\n                this.getParticipants().forEach(\r\n                    participant => this.onMemberLeft(participant.getJid()));\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // If this.room == null we are calling second time leave().\r\n    return Promise.reject(\r\n        new Error('The conference is has been already left'));\r\n};\r\n\r\n/**\r\n * Returns the currently active media session if any.\r\n *\r\n * @returns {JingleSessionPC|undefined}\r\n * @private\r\n */\r\nJitsiConference.prototype._getActiveMediaSession = function() {\r\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n};\r\n\r\n/**\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n * @private\r\n */\r\nJitsiConference.prototype._getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\r\n * decisions based on the video type of the local source.\r\n *\r\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\r\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\r\n\r\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\r\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\r\n    }\r\n\r\n    this.rtc.setVideoType(videoType);\r\n};\r\n\r\n/**\r\n * Returns name of this conference.\r\n */\r\nJitsiConference.prototype.getName = function() {\r\n    return this.options.name;\r\n};\r\n\r\n/**\r\n * Returns the {@link JitsiConnection} used by this this conference.\r\n */\r\nJitsiConference.prototype.getConnection = function() {\r\n    return this.connection;\r\n};\r\n\r\n/**\r\n * Check if authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isAuthEnabled = function() {\r\n    return this.authEnabled;\r\n};\r\n\r\n/**\r\n * Check if user is logged in.\r\n */\r\nJitsiConference.prototype.isLoggedIn = function() {\r\n    return Boolean(this.authIdentity);\r\n};\r\n\r\n/**\r\n * Get authorized login.\r\n */\r\nJitsiConference.prototype.getAuthLogin = function() {\r\n    return this.authIdentity;\r\n};\r\n\r\n/**\r\n * Check if external authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isExternalAuthEnabled = function() {\r\n    return this.room && this.room.moderator.isExternalAuthEnabled();\r\n};\r\n\r\n/**\r\n * Get url for external authentication.\r\n * @param {boolean} [urlForPopup] if true then return url for login popup,\r\n *                                else url of login page.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!this.isExternalAuthEnabled()) {\r\n            reject();\r\n\r\n            return;\r\n        }\r\n        if (urlForPopup) {\r\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\r\n        } else {\r\n            this.room.moderator.getLoginUrl(resolve, reject);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the local tracks of the given media type, or all local tracks if no\r\n * specific type is given.\r\n * @param {MediaType} [mediaType] Optional media type (audio or video).\r\n */\r\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = [];\r\n\r\n    if (this.rtc) {\r\n        tracks = this.rtc.getLocalTracks(mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Obtains local audio track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalAudioTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains local video track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalVideoTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains the performance statistics.\r\n * @returns {Object|null}\r\n */\r\nJitsiConference.prototype.getPerformanceStats = function() {\r\n    return {\r\n        longTasksStats: this.statistics.getLongTasksStats()\r\n    };\r\n};\r\n\r\n/**\r\n * Attaches a handler for events(For example - \"participant joined\".) in the\r\n * conference. All possible event are defined in JitsiConferenceEvents.\r\n * @param eventId the event ID.\r\n * @param handler handler for the event.\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.on = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.on(eventId, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes event listener\r\n * @param eventId the event ID.\r\n * @param [handler] optional, the specific handler to unbind\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.off = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.removeListener(eventId, handler);\r\n    }\r\n};\r\n\r\n// Common aliases for event emitter\r\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\r\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\r\n\r\n/**\r\n * Receives notifications from other participants about commands / custom events\r\n * (sent by sendCommand or sendCommandOnce methods).\r\n * @param command {String} the name of the command\r\n * @param handler {Function} handler for the command\r\n */\r\nJitsiConference.prototype.addCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.addPresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n  * Removes command  listener\r\n  * @param command {String} the name of the command\r\n  * @param handler {Function} handler to remove for the command\r\n  */\r\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.removePresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends text message to the other participants in the conference\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendTextMessage = function(\r\n        message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendMessage(message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send private text message to another participant of the conference\r\n * @param id the id of the participant to send a private message.\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendPrivateTextMessage = function(\r\n        id, message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendPrivateMessage(id, message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send presence command.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommand = function(name, values) {\r\n    if (this.room) {\r\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\r\n    } else {\r\n        logger.warn('Not sending a command, room not initialized.');\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Send presence command one time.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\r\n    this.sendCommand(name, values);\r\n    this.removeCommand(name);\r\n};\r\n\r\n/**\r\n * Removes presence command.\r\n * @param name {String} the name of the command.\r\n **/\r\nJitsiConference.prototype.removeCommand = function(name) {\r\n    if (this.room) {\r\n        this.room.removeFromPresence(name);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the display name for this conference.\r\n * @param name the display name to set\r\n */\r\nJitsiConference.prototype.setDisplayName = function(name) {\r\n    if (this.room) {\r\n        const nickKey = 'nick';\r\n\r\n        // if there is no display name already set, avoid setting an empty one\r\n        if (!name && !this.room.getFromPresence(nickKey)) {\r\n            return;\r\n        }\r\n\r\n        this.room.addOrReplaceInPresence(nickKey, {\r\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n            value: name\r\n        }) && this.room.sendPresence();\r\n    }\r\n};\r\n\r\n/**\r\n * Set new subject for this conference. (available only for moderator)\r\n * @param {string} subject new subject\r\n */\r\nJitsiConference.prototype.setSubject = function(subject) {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.setSubject(subject);\r\n    } else {\r\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Get a transcriber object for all current participants in this conference\r\n * @return {Transcriber} the transcriber object\r\n */\r\nJitsiConference.prototype.getTranscriber = function() {\r\n    if (this.transcriber === undefined) {\r\n        this.transcriber = new Transcriber();\r\n\r\n        // add all existing local audio tracks to the transcriber\r\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n        for (const localAudio of localAudioTracks) {\r\n            this.transcriber.addTrack(localAudio);\r\n        }\r\n\r\n        // and all remote audio tracks\r\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const remoteTrack of remoteAudioTracks) {\r\n            this.transcriber.addTrack(remoteTrack);\r\n        }\r\n    }\r\n\r\n    return this.transcriber;\r\n};\r\n\r\n/**\r\n * Returns the transcription status.\r\n *\r\n * @returns {String} \"on\" or \"off\".\r\n */\r\nJitsiConference.prototype.getTranscriptionStatus = function() {\r\n    return this.room.transcriptionStatus;\r\n};\r\n\r\n/**\r\n * Adds JitsiLocalTrack object to the conference.\r\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\r\n * @returns {Promise<JitsiLocalTrack>}\r\n * @throws {Error} if the specified track is a video track and there is already\r\n * another video track in the conference.\r\n */\r\nJitsiConference.prototype.addTrack = function(track) {\r\n    const mediaType = track.getType();\r\n    const localTracks = this.rtc.getLocalTracks(mediaType);\r\n\r\n    // Ensure there's exactly 1 local track of each media type in the conference.\r\n    if (localTracks.length > 0) {\r\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\r\n        if (track === localTracks[0]) {\r\n            return Promise.resolve(track);\r\n        }\r\n\r\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\r\n    }\r\n\r\n    return this.replaceTrack(null, track);\r\n};\r\n\r\n/**\r\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\r\n * @param {number} audioLevel the audio level\r\n * @param {TraceablePeerConnection} [tpc]\r\n */\r\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\r\n        audioLevel,\r\n        tpc) {\r\n    const activeTpc = this.getActivePeerConnection();\r\n\r\n    // There will be no TraceablePeerConnection if audio levels do not come from\r\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\r\n    // Audio Analyser API and emits local audio levels events through\r\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\r\n    // optional.\r\n    if (!tpc || activeTpc === tpc) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this.myUserId(), audioLevel);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_MUTE_CHANGED change conference event.\r\n * @param track the JitsiTrack object related to the event.\r\n */\r\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\r\n    // check if track was muted by focus and now is unmuted by user\r\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\r\n        this.isMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\r\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\r\n        this.isVideoMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\r\n    }\r\n\r\n    let actorParticipant;\r\n\r\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    }\r\n\r\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\r\n    // the mute/unmute operation. This currently happens only on Firefox.\r\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\r\n        this._sendBridgeVideoTypeMessage(track);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\r\n};\r\n\r\n/**\r\n * Returns the list of local tracks that need to be added to the peerconnection on join.\r\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\r\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\r\n * added when the user unmutes for the first time.\r\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\r\n */\r\nJitsiConference.prototype._getInitialLocalTracks = function() {\r\n    // Always add the audio track on certain platforms:\r\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\r\n    //    if the user joins audio and video muted.\r\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\r\n    return this.getLocalTracks()\r\n        .filter(track => {\r\n            const trackType = track.getType();\r\n\r\n            if (trackType === MediaType.AUDIO\r\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\r\n                return true;\r\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n};\r\n\r\n/**\r\n * Clear JitsiLocalTrack properties and listeners.\r\n * @param track the JitsiLocalTrack object.\r\n */\r\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\r\n    track._setConference(null);\r\n    this.rtc.removeLocalTrack(track);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        track.muteHandler);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        track.audioLevelHandler);\r\n\r\n    // send event for stopping screen sharing\r\n    // FIXME: we assume we have only one screen sharing track\r\n    // if we change this we need to fix this check\r\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n        this.statistics.sendScreenSharingEvent(false);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n};\r\n\r\n/**\r\n * Removes JitsiLocalTrack from the conference and performs\r\n * a new offer/answer cycle.\r\n * @param {JitsiLocalTrack} track\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.removeTrack = function(track) {\r\n    return this.replaceTrack(track, null);\r\n};\r\n\r\n/**\r\n * Replaces oldTrack with newTrack and performs a single offer/answer\r\n *  cycle after both operations are done.  Either oldTrack or newTrack\r\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\r\n *  effectively just removes 'oldTrack'\r\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\r\n * @param {JitsiLocalTrack} newTrack the new stream to use\r\n * @returns {Promise} resolves when the replacement is finished\r\n */\r\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\r\n\r\n    // First do the removal of the oldTrack at the JitsiConference level\r\n    if (oldTrackBelongsToConference) {\r\n        if (oldTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n    if (newTrack) {\r\n        if (newTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n\r\n    if (oldTrack && !oldTrackBelongsToConference) {\r\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\r\n    }\r\n\r\n    // Now replace the stream at the lower levels\r\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\r\n        .then(() => {\r\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\r\n            newTrack && this._setupNewTrack(newTrack);\r\n\r\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\r\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\r\n                this._sendBridgeVideoTypeMessage(newTrack);\r\n            }\r\n\r\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\r\n                this._fireMuteChangeEvent(newTrack);\r\n            }\r\n\r\n            return Promise.resolve();\r\n        })\r\n        .catch(error => {\r\n            logger.error(`replaceTrack failed: ${error?.stack}`);\r\n\r\n            return Promise.reject(error);\r\n        });\r\n};\r\n\r\n/**\r\n * Replaces the tracks at the lower level by going through the Jingle session\r\n * and WebRTC peer connection. The method will resolve immediately if there is\r\n * currently no JingleSession started.\r\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\r\n * the process or <tt>null</t> if the method should act as \"add track\"\r\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\r\n * <tt>null</tt> if the method should act as \"remove track\"\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n * @private\r\n */\r\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\r\n    const replaceTrackPromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no JVB JingleSession');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no P2P JingleSession');\r\n    }\r\n\r\n    return Promise.all(replaceTrackPromises);\r\n};\r\n\r\n/**\r\n * Operations related to creating a new track\r\n * @param {JitsiLocalTrack} newTrack the new track being created\r\n */\r\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\r\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\r\n            && newTrack.videoType !== VideoType.DESKTOP)) {\r\n        // Report active device to statistics\r\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\r\n        const device\r\n            = devices.find(\r\n                d =>\r\n                    d.kind === `${newTrack.getTrack().kind}input`\r\n                        && d.label === newTrack.getTrack().label);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n    if (newTrack.isVideoTrack()) {\r\n        const videoTypeTagName = 'videoType';\r\n\r\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\r\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\r\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\r\n        }\r\n    }\r\n    this.rtc.addLocalTrack(newTrack);\r\n\r\n    // ensure that we're sharing proper \"is muted\" state\r\n    if (newTrack.isAudioTrack()) {\r\n        this.room.setAudioMute(newTrack.isMuted());\r\n    } else {\r\n        this.room.setVideoMute(newTrack.isMuted());\r\n    }\r\n\r\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\r\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\r\n    newTrack.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        newTrack.muteHandler);\r\n    newTrack.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        newTrack.audioLevelHandler);\r\n\r\n    newTrack._setConference(this);\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\r\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\r\n * removed on video mute).\r\n * @param {JitsiLocalTrack} track the local track that will be added as part of\r\n * the unmute operation.\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n */\r\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\r\n    const addAsUnmutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\r\n    }\r\n\r\n    return Promise.allSettled(addAsUnmutePromises)\r\n        .then(() => {\r\n            // Signal the video type to the bridge.\r\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\r\n        });\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\r\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\r\n * that is to stop sending any data and turn off the HW camera device.\r\n * @param {JitsiLocalTrack} track the local track that will be removed.\r\n * @return {Promise}\r\n */\r\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\r\n    const removeAsMutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\r\n    }\r\n\r\n    return Promise.allSettled(removeAsMutePromises)\r\n        .then(() => {\r\n            // Signal the video type to the bridge.\r\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\r\n        });\r\n};\r\n\r\n/**\r\n * Get role of the local user.\r\n * @returns {string} user role: 'moderator' or 'none'\r\n */\r\nJitsiConference.prototype.getRole = function() {\r\n    return this.room.role;\r\n};\r\n\r\n/**\r\n * Returns whether or not the current conference has been joined as a hidden\r\n * user.\r\n *\r\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\r\n * no connection is active.\r\n */\r\nJitsiConference.prototype.isHidden = function() {\r\n    if (!this.connection) {\r\n        return null;\r\n    }\r\n\r\n    return Strophe.getDomainFromJid(this.connection.getJid())\r\n        === this.options.config.hiddenDomain;\r\n};\r\n\r\n/**\r\n * Check if local user is moderator.\r\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\r\n * we're no longer in the conference room then <tt>null</tt> is returned.\r\n */\r\nJitsiConference.prototype.isModerator = function() {\r\n    return this.room ? this.room.isModerator() : null;\r\n};\r\n\r\n/**\r\n * Set password for the room.\r\n * @param {string} password new password for the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.lock = function(password) {\r\n    if (!this.isModerator()) {\r\n        return Promise.reject(new Error('You are not moderator.'));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.room.lockRoom(\r\n            password || '',\r\n            () => resolve(),\r\n            err => reject(err),\r\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\r\n    });\r\n};\r\n\r\n/**\r\n * Remove password from the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.unlock = function() {\r\n    return this.lock();\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the selected participant in\r\n * order to receive higher video quality (if simulcast is enabled).\r\n * Or cache it if channel is not created and send it once channel is available.\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipant = function(participantId) {\r\n    this.selectParticipants([ participantId ]);\r\n};\r\n\r\n/*\r\n * Elects participants with given ids to be the selected participants in order\r\n * to receive higher video quality (if simulcast is enabled). The argument\r\n * should be an array of participant id strings or an empty array; an error will\r\n * be thrown if a non-array is passed in. The error is thrown as a layer of\r\n * protection against passing an invalid argument, as the error will happen in\r\n * the bridge and may not be visible in the client.\r\n *\r\n * @param {Array<strings>} participantIds - An array of identifiers for\r\n * participants.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipants = function(participantIds) {\r\n    if (!Array.isArray(participantIds)) {\r\n        throw new Error('Invalid argument; participantIds must be an array.');\r\n    }\r\n\r\n    this.receiveVideoController.selectEndpoints(participantIds);\r\n};\r\n\r\n/**\r\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\r\n * @returns {number}\r\n */\r\nJitsiConference.prototype.getLastN = function() {\r\n    return this.receiveVideoController.getLastN();\r\n};\r\n\r\n/**\r\n * Selects a new value for \"lastN\". The requested amount of videos are going\r\n * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n * all available videos.\r\n * @param lastN the new number of videos the user would like to receive.\r\n * @throws Error or RangeError if the given value is not a number or is smaller\r\n * than -1.\r\n */\r\nJitsiConference.prototype.setLastN = function(lastN) {\r\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\r\n        throw new Error(`Invalid value for lastN: ${lastN}`);\r\n    }\r\n    const n = Number(lastN);\r\n\r\n    if (n < -1) {\r\n        throw new RangeError('lastN cannot be smaller than -1');\r\n    }\r\n    this.receiveVideoController.setLastN(n);\r\n\r\n    // If the P2P session is not fully established yet, we wait until it gets\r\n    // established.\r\n    if (this.p2pJingleSession) {\r\n        const isVideoActive = n !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    `Failed to adjust video transfer status (${isVideoActive})`,\r\n                    error);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the participant given by participantId is currently included in\r\n * the last N.\r\n * @param {string} participantId the identifier of the participant we would\r\n * like to check.\r\n * @return {boolean} true if the participant with id is in the last N set or\r\n * if there's no last N set, false otherwise.\r\n * @deprecated this method should never be used to figure out the UI, but\r\n * {@link ParticipantConnectionStatus} should be used instead.\r\n */\r\nJitsiConference.prototype.isInLastN = function(participantId) {\r\n    return this.rtc.isInLastN(participantId);\r\n};\r\n\r\n/**\r\n * @return Array<JitsiParticipant> an array of all participants in this\r\n * conference.\r\n */\r\nJitsiConference.prototype.getParticipants = function() {\r\n    return Object.values(this.participants);\r\n};\r\n\r\n/**\r\n * Returns the number of participants in the conference, including the local\r\n * participant.\r\n * @param countHidden {boolean} Whether or not to include hidden participants\r\n * in the count. Default: false.\r\n **/\r\nJitsiConference.prototype.getParticipantCount\r\n    = function(countHidden = false) {\r\n\r\n        let participants = this.getParticipants();\r\n\r\n        if (!countHidden) {\r\n            participants = participants.filter(p => !p.isHidden());\r\n        }\r\n\r\n        // Add one for the local participant.\r\n        return participants.length + 1;\r\n    };\r\n\r\n/**\r\n * @returns {JitsiParticipant} the participant in this conference with the\r\n * specified id (or undefined if there isn't one).\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.getParticipantById = function(id) {\r\n    return this.participants[id];\r\n};\r\n\r\n/**\r\n * Grant owner rights to the participant.\r\n * @param {string} id id of the participant to grant owner rights to.\r\n */\r\nJitsiConference.prototype.grantOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.setAffiliation(participant.getJid(), 'owner');\r\n};\r\n\r\n/**\r\n * Revoke owner rights to the participant or local Participant as\r\n * the user might want to refuse to be a moderator.\r\n * @param {string} id id of the participant to revoke owner rights to.\r\n */\r\nJitsiConference.prototype.revokeOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n    const isMyself = this.myUserId() === id;\r\n    const role = this.isMembersOnly() ? 'member' : 'none';\r\n\r\n    if (isMyself) {\r\n        this.room.setAffiliation(this.room.myroomjid, role);\r\n    } else if (participant) {\r\n        this.room.setAffiliation(participant.getJid(), role);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Kick participant from this conference.\r\n * @param {string} id id of the participant to kick\r\n * @param {string} reason reason of the participant to kick\r\n */\r\nJitsiConference.prototype.kickParticipant = function(id, reason) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.kick(participant.getJid(), reason);\r\n};\r\n\r\n/**\r\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\r\n * analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearSITimeout = function() {\r\n    if (this._sessionInitiateTimeout\r\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\r\n        window.clearTimeout(this._sessionInitiateTimeout);\r\n        this._sessionInitiateTimeout = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\r\n * event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeSetSITimeout = function() {\r\n    // Jicofo is supposed to invite if there are at least 2 participants\r\n    if (!this.jvbJingleSession\r\n            && this.getParticipantCount() >= 2\r\n            && !this._sessionInitiateTimeout) {\r\n        this._sessionInitiateTimeout = window.setTimeout(() => {\r\n            this._sessionInitiateTimeout = null;\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_SI_TIMEOUT,\r\n                {\r\n                    p2p: false,\r\n                    value: JINGLE_SI_TIMEOUT\r\n                }));\r\n        }, JINGLE_SI_TIMEOUT);\r\n    }\r\n};\r\n\r\n/**\r\n * Mutes a participant.\r\n * @param {string} id The id of the participant to mute.\r\n */\r\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\r\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\r\n\r\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\r\n        logger.error(`Unsupported media type: ${muteMediaType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Notifies this JitsiConference that a new member has joined its chat room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @param jid the jid of the participant in the MUC\r\n * @param nick the display name of the participant\r\n * @param role the role of the participant in the MUC\r\n * @param isHidden indicates if this is a hidden participant (system\r\n * participant for example a recorder).\r\n * @param statsID the participant statsID (optional)\r\n * @param status the initial status if any\r\n * @param identity the member identity, if any\r\n * @param botType the member botType, if any\r\n * @param fullJid the member full jid, if any\r\n * @param features the member botType, if any\r\n * @param isReplaceParticipant whether this join replaces a participant with\r\n * the same jwt.\r\n */\r\nJitsiConference.prototype.onMemberJoined = function(\r\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant\r\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\r\n\r\n    participant.setRole(role);\r\n    participant.setBotType(botType);\r\n    participant.setFeatures(features);\r\n    participant.setIsReplacing(isReplaceParticipant);\r\n\r\n    this.participants[id] = participant;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_JOINED,\r\n        id,\r\n        participant);\r\n\r\n    this._updateFeatures(participant);\r\n\r\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\r\n    if (this.isJoined()) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n\r\n    this._maybeSetSITimeout();\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Get notified when we joined the room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @private\r\n */\r\nJitsiConference.prototype._onMucJoined = function() {\r\n    this._maybeStartOrStopP2P();\r\n};\r\n\r\n/**\r\n * Updates features for a participant.\r\n * @param {JitsiParticipant} participant - The participant to query for features.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._updateFeatures = function(participant) {\r\n    participant.getFeatures()\r\n        .then(features => {\r\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\r\n            this.updateDTMFSupport();\r\n\r\n            if (features.has(FEATURE_JIGASI)) {\r\n                participant.setProperty('features_jigasi', true);\r\n            }\r\n\r\n            if (features.has(FEATURE_E2EE)) {\r\n                participant.setProperty('features_e2ee', true);\r\n            }\r\n        })\r\n        .catch(() => false);\r\n};\r\n\r\n/**\r\n * Get notified when member bot type had changed.\r\n * @param jid the member jid\r\n * @param botType the new botType value\r\n * @private\r\n */\r\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\r\n\r\n    // find the participant and mark it as non bot, as the real one will join\r\n    // in a moment\r\n    const peers = this.getParticipants();\r\n    const botParticipant = peers.find(p => p.getJid() === jid);\r\n\r\n    if (botParticipant) {\r\n        botParticipant.setBotType(botType);\r\n        const id = Strophe.getResourceFromJid(jid);\r\n\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\r\n            id,\r\n            botType);\r\n    }\r\n\r\n    // if botType changed to undefined, botType was removed, in case of\r\n    // poltergeist mode this is the moment when the poltergeist had exited and\r\n    // the real participant had already replaced it.\r\n    // In this case we can check and try p2p\r\n    if (!botParticipant.getBotType()) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.onMemberLeft = function(jid) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant = this.participants[id];\r\n\r\n    delete this.participants[id];\r\n\r\n    // Remove the ssrcs from the remote description.\r\n    const mediaSessions = this._getMediaSessions();\r\n    const removePromises = [];\r\n\r\n    for (const session of mediaSessions) {\r\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\r\n    }\r\n\r\n    Promise.allSettled(removePromises)\r\n        .then(results => {\r\n            let removedTracks = [];\r\n\r\n            results.map(result => result.value).forEach(value => {\r\n                if (value) {\r\n                    removedTracks = removedTracks.concat(value);\r\n                }\r\n            });\r\n\r\n            removedTracks.forEach(track => {\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n            });\r\n\r\n            // There can be no participant in case the member that left is focus.\r\n            if (participant) {\r\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\r\n            }\r\n\r\n            if (this.room !== null) { // Skip if we have left the room already.\r\n                this._maybeStartOrStopP2P(true /* triggered by user left event */);\r\n                this._maybeClearSITimeout();\r\n            }\r\n        });\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Designates an event indicating that we were kicked from the XMPP MUC.\r\n * @param {boolean} isSelfPresence - whether it is for local participant\r\n * or another participant.\r\n * @param {string} actorId - the id of the participant who was initiator\r\n * of the kick.\r\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\r\n * this is the id of the participant which was kicked.\r\n * @param {string} reason - reason of the participant to kick\r\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\r\n * to replace it with a participant with same jwt.\r\n */\r\nJitsiConference.prototype.onMemberKicked = function(\r\n        isSelfPresence,\r\n        actorId,\r\n        kickedParticipantId,\r\n        reason,\r\n        isReplaceParticipant) {\r\n    // This check which be true when we kick someone else. With the introduction of lobby\r\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\r\n    // avoid emitting an event where `undefined` kicked someone.\r\n    if (actorId === this.myUserId()) {\r\n        return;\r\n    }\r\n\r\n    const actorParticipant = this.participants[actorId];\r\n\r\n    if (isSelfPresence) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\r\n\r\n        this.leave();\r\n\r\n        return;\r\n    }\r\n\r\n    const kickedParticipant = this.participants[kickedParticipantId];\r\n\r\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\r\n};\r\n\r\n/**\r\n * Method called on local MUC role change.\r\n * @param {string} role the name of new user's role as defined by XMPP MUC.\r\n */\r\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\r\n    // Emit role changed for local  JID\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\r\n};\r\n\r\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    participant.setRole(role);\r\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\r\n};\r\n\r\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n\r\n    if (participant._displayName === displayName) {\r\n        return;\r\n    }\r\n\r\n    participant._displayName = displayName;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n        id,\r\n        displayName);\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\r\n * JitsiConference\r\n */\r\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\r\n    if (track.isP2P && !this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\r\n\r\n        return;\r\n    } else if (!track.isP2P && this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote JVB track, when in P2P - IGNORED');\r\n\r\n        return;\r\n    }\r\n\r\n    const id = track.getParticipantId();\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        logger.error(`No participant found for id: ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Add track to JitsiParticipant.\r\n    participant._tracks.push(track);\r\n\r\n    if (this.transcriber) {\r\n        this.transcriber.addTrack(track);\r\n    }\r\n\r\n    const emitter = this.eventEmitter;\r\n\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        (audioLevel, tpc) => {\r\n            const activeTPC = this.getActivePeerConnection();\r\n\r\n            if (activeTPC === tpc) {\r\n                emitter.emit(\r\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    id,\r\n                    audioLevel);\r\n            }\r\n        }\r\n    );\r\n\r\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'session-answer' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which an answer was\r\n * received.\r\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P setAnswer');\r\n\r\n        this.p2pJingleSession.setAnswer(answer);\r\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'transport-info' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\r\n * received\r\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\r\n * element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P addIceCandidates');\r\n        this.p2pJingleSession.addIceCandidates(transportInfo);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} removedTrack\r\n */\r\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\r\n    this.getParticipants().forEach(participant => {\r\n        const tracks = participant.getTracks();\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i] === removedTrack) {\r\n                // Since the tracks have been compared and are\r\n                // considered equal the result of splice can be ignored.\r\n                participant._tracks.splice(i, 1);\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\r\n\r\n                if (this.transcriber) {\r\n                    this.transcriber.removeTrack(removedTrack);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Handles an incoming call event for the P2P jingle session.\r\n */\r\nJitsiConference.prototype._onIncomingCallP2P = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n\r\n    let rejectReason;\r\n\r\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P disabled',\r\n            errorMsg: 'P2P mode disabled in the configuration'\r\n        };\r\n    } else if (this.p2pJingleSession) {\r\n        // Reject incoming P2P call (already in progress)\r\n        rejectReason = {\r\n            reason: 'busy',\r\n            reasonDescription: 'P2P already in progress',\r\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\r\n        };\r\n    } else if (!this._shouldBeInP2PMode()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P requirements not met',\r\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\r\n        };\r\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\r\n    }\r\n\r\n    if (rejectReason) {\r\n        this._rejectIncomingCall(jingleSession, rejectReason);\r\n    } else {\r\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles an incoming call event.\r\n */\r\nJitsiConference.prototype.onIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n    // Handle incoming P2P call\r\n    if (jingleSession.isP2P) {\r\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\r\n    } else {\r\n        if (!this.isFocus(jingleSession.remoteJid)) {\r\n            const description = 'Rejecting session-initiate from non-focus.';\r\n\r\n            this._rejectIncomingCall(\r\n                jingleSession, {\r\n                    reason: 'security-error',\r\n                    reasonDescription: description,\r\n                    errorMsg: description\r\n                });\r\n\r\n            return;\r\n        }\r\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\r\n    }\r\n};\r\n\r\n/**\r\n * Accepts an incoming call event for the JVB jingle session.\r\n */\r\nJitsiConference.prototype._acceptJvbIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n\r\n    // Accept incoming call\r\n    this.jvbJingleSession = jingleSession;\r\n    this.room.connectionTimes['session.initiate'] = now;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    if (this.wasStopped) {\r\n        Statistics.sendAnalyticsAndLog(\r\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\r\n    }\r\n\r\n    const serverRegion\r\n        = $(jingleOffer)\r\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\r\n            .attr('region');\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\r\n        serverRegion);\r\n\r\n    this._maybeClearSITimeout();\r\n    Statistics.sendAnalytics(createJingleEvent(\r\n        ACTION_JINGLE_SI_RECEIVED,\r\n        {\r\n            p2p: false,\r\n            value: now\r\n        }));\r\n\r\n    try {\r\n        jingleSession.initialize(this.room, this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this.isE2EEEnabled()\r\n        });\r\n    } catch (error) {\r\n        GlobalOnErrorHandler.callErrorHandler(error);\r\n        logger.error(error);\r\n\r\n        return;\r\n    }\r\n\r\n    // Open a channel with the videobridge.\r\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\r\n\r\n    const localTracks = this._getInitialLocalTracks();\r\n\r\n    try {\r\n        jingleSession.acceptOffer(\r\n            jingleOffer,\r\n            () => {\r\n                // If for any reason invite for the JVB session arrived after\r\n                // the P2P has been established already the media transfer needs\r\n                // to be turned off here.\r\n                if (this.isP2PActive() && this.jvbJingleSession) {\r\n                    this._suspendMediaTransferForJvbConnection();\r\n                }\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                    jingleSession);\r\n                if (!this.isP2PActive()) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n                        jingleSession);\r\n                }\r\n            },\r\n            error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to accept incoming Jingle session', error);\r\n            },\r\n            localTracks\r\n        );\r\n\r\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\r\n        this._desktopSharingFrameRate\r\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\r\n\r\n        // Start callstats as soon as peerconnection is initialized,\r\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\r\n        // happen in case if user doesn't have or denied permission to\r\n        // both camera and microphone.\r\n        logger.info('Starting CallStats for JVB connection...');\r\n        this.statistics.startCallStats(\r\n            this.jvbJingleSession.peerconnection,\r\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\r\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\r\n    } catch (e) {\r\n        GlobalOnErrorHandler.callErrorHandler(e);\r\n        logger.error(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the BridgeChannel.\r\n *\r\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\r\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\r\n * BridgeChannel mode.\r\n * @param {TraceablePeerConnection} pc the peer connection which will be used\r\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\r\n */\r\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\r\n    let wsUrl = null;\r\n    const webSocket\r\n        = $(offerIq)\r\n            .find('>content>transport>web-socket')\r\n            .first();\r\n\r\n    if (webSocket.length === 1) {\r\n        wsUrl = webSocket[0].getAttribute('url');\r\n    }\r\n\r\n    if (wsUrl) {\r\n        // If the offer contains a websocket use it.\r\n        this.rtc.initializeBridgeChannel(null, wsUrl);\r\n    } else {\r\n        // Otherwise, fall back to an attempt to use SCTP.\r\n        this.rtc.initializeBridgeChannel(pc, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Rejects incoming Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\r\n * @param {object} [options]\r\n * @param {string} options.reason the name of the reason element as defined\r\n * by Jingle\r\n * @param {string} options.reasonDescription the reason description which will\r\n * be included in Jingle 'session-terminate' message.\r\n * @param {string} options.errorMsg an error message to be logged on global\r\n * error handler\r\n * @private\r\n */\r\nJitsiConference.prototype._rejectIncomingCall = function(\r\n        jingleSession,\r\n        options) {\r\n    if (options && options.errorMsg) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\r\n    }\r\n\r\n    // Terminate the jingle session with a reason\r\n    jingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(\r\n                'An error occurred while trying to terminate'\r\n                    + ' invalid Jingle session', error);\r\n        }, {\r\n            reason: options && options.reason,\r\n            reasonDescription: options && options.reasonDescription,\r\n            sendSessionTerminate: true\r\n        });\r\n};\r\n\r\n/**\r\n * Handles the call ended event.\r\n * XXX is this due to the remote side terminating the Jingle session?\r\n *\r\n * @param {JingleSessionPC} jingleSession the jingle session which has been\r\n * terminated.\r\n * @param {String} reasonCondition the Jingle reason condition.\r\n * @param {String|null} reasonText human readable reason text which may provide\r\n * more details about why the call has been terminated.\r\n */\r\nJitsiConference.prototype.onCallEnded = function(\r\n        jingleSession,\r\n        reasonCondition,\r\n        reasonText) {\r\n    logger.info(\r\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\r\n            jingleSession.isP2P}`);\r\n    if (jingleSession === this.jvbJingleSession) {\r\n        this.wasStopped = true;\r\n\r\n        Statistics.sendAnalytics(\r\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\r\n\r\n        // Stop the stats\r\n        if (this.statistics) {\r\n            this.statistics.stopRemoteStats(\r\n                this.jvbJingleSession.peerconnection);\r\n            logger.info('Stopping JVB CallStats');\r\n            this.statistics.stopCallStats(\r\n                this.jvbJingleSession.peerconnection);\r\n        }\r\n\r\n        // Current JVB JingleSession is no longer valid, so set it to null\r\n        this.jvbJingleSession = null;\r\n\r\n        // Let the RTC service do any cleanups\r\n        this.rtc.onCallEnded();\r\n    } else if (jingleSession === this.p2pJingleSession) {\r\n        // It's the responder who decides to enforce JVB mode, so that both\r\n        // initiator and responder are aware if it was intentional.\r\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\r\n            logger.info('In forced JVB 121 mode...');\r\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        } else if (reasonCondition === 'connectivity-error'\r\n            && reasonText === 'ICE FAILED') {\r\n            // It can happen that the other peer detects ICE failed and\r\n            // terminates the session, before we get the event on our side.\r\n            // But we are able to parse the reason and mark it here.\r\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n        }\r\n        this._stopP2PSession();\r\n    } else {\r\n        logger.error(\r\n            'Received onCallEnded for invalid session',\r\n            jingleSession.sid,\r\n            jingleSession.remoteJid,\r\n            reasonCondition,\r\n            reasonText);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles the suspend detected event. Leaves the room and fires suspended.\r\n * @param {JingleSessionPC} jingleSession\r\n */\r\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\r\n    if (!jingleSession.isP2P) {\r\n        this.leave();\r\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.updateDTMFSupport = function() {\r\n    let somebodySupportsDTMF = false;\r\n    const participants = this.getParticipants();\r\n\r\n    // check if at least 1 participant supports DTMF\r\n    for (let i = 0; i < participants.length; i += 1) {\r\n        if (participants[i].supportsDTMF()) {\r\n            somebodySupportsDTMF = true;\r\n            break;\r\n        }\r\n    }\r\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\r\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\r\n            somebodySupportsDTMF);\r\n    }\r\n};\r\n\r\n/**\r\n * Allows to check if there is at least one user in the conference\r\n * that supports DTMF.\r\n * @returns {boolean} true if somebody supports DTMF, false otherwise\r\n */\r\nJitsiConference.prototype.isDTMFSupported = function() {\r\n    return this.somebodySupportsDTMF;\r\n};\r\n\r\n/**\r\n * Returns the local user's ID\r\n * @return {string} local user's ID\r\n */\r\nJitsiConference.prototype.myUserId = function() {\r\n    return (\r\n        this.room && this.room.myroomjid\r\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\r\n            : null);\r\n};\r\n\r\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    if (peerConnection) {\r\n        peerConnection.sendTones(tones, duration, pause);\r\n    } else {\r\n        logger.warn('cannot sendTones: no peer connection');\r\n    }\r\n};\r\n\r\n/**\r\n * Starts recording the current conference.\r\n *\r\n * @param {Object} options - Configuration for the recording. See\r\n * {@link Chatroom#startRecording} for more info.\r\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\r\n */\r\nJitsiConference.prototype.startRecording = function(options) {\r\n    if (this.room) {\r\n        return this.recordingManager.startRecording(options);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Stop a recording session.\r\n *\r\n * @param {string} sessionID - The ID of the recording session that\r\n * should be stopped.\r\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\r\n */\r\nJitsiConference.prototype.stopRecording = function(sessionID) {\r\n    if (this.room) {\r\n        return this.recordingManager.stopRecording(sessionID);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Returns true if the SIP calls are supported and false otherwise\r\n */\r\nJitsiConference.prototype.isSIPCallingSupported = function() {\r\n    if (this.room) {\r\n        return this.room.isSIPCallingSupported();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Dials a number.\r\n * @param number the number\r\n */\r\nJitsiConference.prototype.dial = function(number) {\r\n    if (this.room) {\r\n        return this.room.dial(number);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Hangup an existing call\r\n */\r\nJitsiConference.prototype.hangup = function() {\r\n    if (this.room) {\r\n        return this.room.hangup();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the transcription service.\r\n */\r\nJitsiConference.prototype.startTranscriber = function() {\r\n    return this.dial('jitsi_meet_transcribe');\r\n};\r\n\r\n\r\n/**\r\n * Stops the transcription service.\r\n */\r\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\r\n\r\n/**\r\n * Returns the phone number for joining the conference.\r\n */\r\nJitsiConference.prototype.getPhoneNumber = function() {\r\n    if (this.room) {\r\n        return this.room.getPhoneNumber();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the pin for joining the conference with phone.\r\n */\r\nJitsiConference.prototype.getPhonePin = function() {\r\n    if (this.room) {\r\n        return this.room.getPhonePin();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the meeting unique ID if any.\r\n *\r\n * @returns {string|undefined}\r\n */\r\nJitsiConference.prototype.getMeetingUniqueId = function() {\r\n    if (this.room) {\r\n        return this.room.getMeetingId();\r\n    }\r\n};\r\n\r\n/**\r\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\r\n * which connection is currently active.\r\n *\r\n * @return {TraceablePeerConnection|null} null if there isn't any active\r\n * <tt>TraceablePeerConnection</tt> currently available.\r\n * @public (FIXME how to make package local ?)\r\n */\r\nJitsiConference.prototype.getActivePeerConnection = function() {\r\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n\r\n    return session ? session.peerconnection : null;\r\n};\r\n\r\n/**\r\n * Returns the connection state for the current room. Its ice connection state\r\n * for its session.\r\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\r\n * be converted to \"connected\".\r\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\r\n * peer connection at this time.\r\n */\r\nJitsiConference.prototype.getConnectionState = function() {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    return peerConnection ? peerConnection.getConnectionState() : null;\r\n};\r\n\r\n/**\r\n * Make all new participants mute their audio/video on join.\r\n * @param policy {Object} object with 2 boolean properties for video and audio:\r\n * @param {boolean} audio if audio should be muted.\r\n * @param {boolean} video if video should be muted.\r\n */\r\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\r\n    if (!this.isModerator()) {\r\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\r\n\r\n        return;\r\n    }\r\n    this.startMutedPolicy = policy;\r\n    this.room.addOrReplaceInPresence('startmuted', {\r\n        attributes: {\r\n            audio: policy.audio,\r\n            video: policy.video,\r\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\r\n        }\r\n    }) && this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Returns current start muted policy\r\n * @returns {Object} with 2 properties - audio and video.\r\n */\r\nJitsiConference.prototype.getStartMutedPolicy = function() {\r\n    return this.startMutedPolicy;\r\n};\r\n\r\n/**\r\n * Check if audio is muted on join.\r\n */\r\nJitsiConference.prototype.isStartAudioMuted = function() {\r\n    return this.startAudioMuted;\r\n};\r\n\r\n/**\r\n * Check if video is muted on join.\r\n */\r\nJitsiConference.prototype.isStartVideoMuted = function() {\r\n    return this.startVideoMuted;\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConference.prototype.getConnectionTimes = function() {\r\n    return this.room.connectionTimes;\r\n};\r\n\r\n/**\r\n * Sets a property for the local participant.\r\n */\r\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\r\n    this.sendCommand(`jitsi_participant_${name}`, { value });\r\n};\r\n\r\n/**\r\n *  Removes a property for the local participant and sends the updated presence.\r\n */\r\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\r\n    this.removeCommand(`jitsi_participant_${name}`);\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Gets a local participant property.\r\n *\r\n * @return value of the local participant property if the tagName exists in the\r\n * list of properties, otherwise returns undefined.\r\n */\r\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\r\n    const property = this.room.presMap.nodes.find(prop =>\r\n        prop.tagName === `jitsi_participant_${name}`\r\n    );\r\n\r\n    return property ? property.value : undefined;\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats if enabled.\r\n *\r\n * @param overallFeedback an integer between 1 and 5 indicating the\r\n * user feedback\r\n * @param detailedFeedback detailed feedback from the user. Not yet used\r\n * @returns {Promise} Resolves if feedback is submitted successfully.\r\n */\r\nJitsiConference.prototype.sendFeedback = function(\r\n        overallFeedback,\r\n        detailedFeedback) {\r\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nJitsiConference.prototype.isCallstatsEnabled = function() {\r\n    return this.statistics.isCallstatsEnabled();\r\n};\r\n\r\n/**\r\n * Finds the SSRC of a given track\r\n *\r\n * @param track\r\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\r\n */\r\nJitsiConference.prototype.getSsrcByTrack = function(track) {\r\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\r\n};\r\n\r\n/**\r\n * Handles track attached to container (Calls associateStreamWithVideoTag method\r\n * from statistics module)\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\r\n * @param container the container\r\n */\r\nJitsiConference.prototype._onTrackAttach = function(track, container) {\r\n    const isLocal = track.isLocal();\r\n    let ssrc = null;\r\n    const isP2P = track.isP2P;\r\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\r\n    const peerConnection\r\n        = isP2P\r\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\r\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\r\n\r\n    if (isLocal) {\r\n        // Local tracks have SSRC stored on per peer connection basis.\r\n        if (peerConnection) {\r\n            ssrc = peerConnection.getLocalSSRC(track);\r\n        }\r\n    } else {\r\n        ssrc = track.getSSRC();\r\n    }\r\n    if (!container.id || !ssrc || !peerConnection) {\r\n        return;\r\n    }\r\n\r\n    this.statistics.associateStreamWithVideoTag(\r\n        peerConnection,\r\n        ssrc,\r\n        isLocal,\r\n        remoteUserId,\r\n        track.getUsageLabel(),\r\n        container.id);\r\n};\r\n\r\n/**\r\n * Logs an \"application log\" message.\r\n * @param message {string} The message to log. Note that while this can be a\r\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\r\n * log valid JSON strings, with an \"id\" field used for distinguishing between\r\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\r\n */\r\nJitsiConference.prototype.sendApplicationLog = function(message) {\r\n    Statistics.sendLog(message);\r\n};\r\n\r\n/**\r\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\r\n * @param mucJid the full MUC address of the user to be checked.\r\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\r\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\r\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\r\n */\r\nJitsiConference.prototype.isFocus = function(mucJid) {\r\n    return this.room ? this.room.isFocus(mucJid) : null;\r\n};\r\n\r\n/**\r\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\r\n */\r\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\r\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\r\n};\r\n\r\n/**\r\n * Sends a message via the data channel.\r\n * @param to {string} the id of the endpoint that should receive the message.\r\n * If \"\" the message will be sent to all participants.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\r\n    this.rtc.sendChannelMessage(to, payload);\r\n};\r\n\r\n/**\r\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\r\n * @param {Object} payload The payload of the message.\r\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\r\n */\r\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\r\n    this.rtc.sendEndpointStatsMessage(payload);\r\n};\r\n\r\n/**\r\n * Sends a broadcast message via the data channel.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\r\n    this.sendEndpointMessage('', payload);\r\n};\r\n\r\n/**\r\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\r\n * broadcasts it to all endpoints in the conference.\r\n * @param {string} to The ID of the endpoint/participant which is to receive\r\n * the message, or '' to broadcast the message to all endpoints in the\r\n * conference.\r\n * @param {string|object} message the message to send. If this is of type\r\n * 'string' it will be sent as a chat message. If it is of type 'object', it\r\n * will be encapsulated in a format recognized by jitsi-meet and converted to\r\n * JSON before being sent.\r\n * @param {boolean} sendThroughVideobridge Whether to send the message through\r\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\r\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\r\n */\r\nJitsiConference.prototype.sendMessage = function(\r\n        message,\r\n        to = '',\r\n        sendThroughVideobridge = false) {\r\n    const messageType = typeof message;\r\n\r\n    // Through videobridge we support only objects. Through XMPP we support\r\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\r\n    // regular chat messages).\r\n    if (messageType !== 'object'\r\n            && (sendThroughVideobridge || messageType !== 'string')) {\r\n        logger.error(`Can not send a message of type ${messageType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (sendThroughVideobridge) {\r\n        this.sendEndpointMessage(to, message);\r\n    } else {\r\n        let messageToSend = message;\r\n\r\n        // Name of packet extension of message stanza to send the required\r\n        // message in.\r\n        let elementName = 'body';\r\n\r\n        if (messageType === 'object') {\r\n            elementName = 'json-message';\r\n\r\n            // Mark as valid JSON message if not already\r\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\r\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\r\n            }\r\n\r\n            try {\r\n                messageToSend = JSON.stringify(messageToSend);\r\n            } catch (e) {\r\n                logger.error('Can not send a message, stringify failed: ', e);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (to) {\r\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\r\n        } else {\r\n            // Broadcast\r\n            this.sendTextMessage(messageToSend, elementName);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nJitsiConference.prototype.isConnectionInterrupted = function() {\r\n    return this.isP2PActive()\r\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\r\n * and Jicofo moves conferences away to a different bridge.\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onConferenceRestarted = function(session) {\r\n    if (!session.isP2P && this.options.config.enableForcedReload) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = true;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = true;\r\n    }\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\r\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\r\n    // eventually come up with the new offer (at least for the time being).\r\n    if (session.isP2P) {\r\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\r\n        // and \"bad\" connection\r\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n\r\n        if (this.p2pJingleSession) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(\r\n                    ACTION_P2P_FAILED,\r\n                    {\r\n                        initiator: this.p2pJingleSession.isInitiator\r\n                    }));\r\n\r\n        }\r\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\r\n    } else if (session && this.jvbJingleSession === session) {\r\n        this._delayedIceFailed = new IceFailedHandling(this);\r\n        this._delayedIceFailed.start(session);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = false;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = false;\r\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n    }\r\n\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\r\n    }\r\n};\r\n\r\n/**\r\n * Accept incoming P2P Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance\r\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\r\n * @private\r\n */\r\nJitsiConference.prototype._acceptP2PIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    // Accept the offer\r\n    this.p2pJingleSession = jingleSession;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this.isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.acceptOffer(\r\n        jingleOffer,\r\n        () => {\r\n            logger.debug('Got RESULT for P2P \"session-accept\"');\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                this.p2pJingleSession);\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to accept incoming P2P Jingle session', error);\r\n        },\r\n        localTracks);\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the JVB session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteJVBTracks = function() {\r\n    this._addRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the P2P session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteP2PTracks = function() {\r\n    this._addRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track added\" events for given Jingle session.\r\n * @param {string} logName the session's nickname which will appear in log\r\n * messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Adding remote ${logName} track: ${track}`);\r\n        this.onRemoteTrackAdded(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\r\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\r\n * the P2P connection if the event comes from the P2P session.\r\n * @param {JingleSessionPC} jingleSession the session instance.\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionEstablished = function(\r\n        jingleSession) {\r\n    if (this.p2pJingleSession !== null) {\r\n        // store the establishment time of the p2p session as a field of the\r\n        // JitsiConference because the p2pJingleSession might get disposed (thus\r\n        // the value is lost).\r\n        this.p2pEstablishmentDuration\r\n            = this.p2pJingleSession.establishmentDuration;\r\n    }\r\n\r\n    if (this.jvbJingleSession !== null) {\r\n        this.jvbEstablishmentDuration\r\n            = this.jvbJingleSession.establishmentDuration;\r\n    }\r\n\r\n    let done = false;\r\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\r\n\r\n    // We don't care about the JVB case, there's nothing to be done\r\n    if (!jingleSession.isP2P) {\r\n        done = true;\r\n    } else if (this.p2pJingleSession !== jingleSession) {\r\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\r\n\r\n        done = true;\r\n    } else if (!jingleSession.isInitiator\r\n        && typeof forceJVB121Ratio === 'number'\r\n        && Math.random() < forceJVB121Ratio) {\r\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\r\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        this._stopP2PSession('decline', 'force JVB121');\r\n\r\n        done = true;\r\n    }\r\n\r\n    if (!isNaN(this.p2pEstablishmentDuration)\r\n        && !isNaN(this.jvbEstablishmentDuration)) {\r\n        const establishmentDurationDiff\r\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\r\n\r\n        Statistics.sendAnalytics(\r\n            ICE_ESTABLISHMENT_DURATION_DIFF,\r\n            { value: establishmentDurationDiff });\r\n    }\r\n\r\n    if (jingleSession.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\r\n    }\r\n\r\n    if (done) {\r\n\r\n        return;\r\n    }\r\n\r\n    // Update P2P status and emit events\r\n    this._setP2PStatus(true);\r\n\r\n    // Remove remote tracks\r\n    if (this.jvbJingleSession) {\r\n        this._removeRemoteJVBTracks();\r\n    } else {\r\n        logger.info('Not removing remote JVB tracks - no session yet');\r\n    }\r\n\r\n    this._addRemoteP2PTracks();\r\n\r\n    // Stop media transfer over the JVB connection\r\n    if (this.jvbJingleSession) {\r\n        this._suspendMediaTransferForJvbConnection();\r\n    }\r\n\r\n    logger.info('Starting remote stats with p2p connection');\r\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\r\n\r\n    Statistics.sendAnalyticsAndLog(\r\n        createP2PEvent(\r\n            ACTION_P2P_ESTABLISHED,\r\n            {\r\n                initiator: this.p2pJingleSession.isInitiator\r\n            }));\r\n\r\n};\r\n\r\n/**\r\n * Called when the chat room reads a new list of properties from jicofo's\r\n * presence. The properties may have changed, but they don't have to.\r\n *\r\n * @param {Object} properties - The properties keyed by the property name\r\n * ('key').\r\n * @private\r\n */\r\nJitsiConference.prototype._updateProperties = function(properties = {}) {\r\n    const changed = !isEqual(properties, this.properties);\r\n\r\n    this.properties = properties;\r\n    if (changed) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\r\n            this.properties);\r\n\r\n        // Some of the properties need to be added to analytics events.\r\n        const analyticsKeys = [\r\n\r\n            // The number of jitsi-videobridge instances currently used for the\r\n            // conference.\r\n            'bridge-count',\r\n\r\n            // The conference creation time (set by jicofo).\r\n            'created-ms'\r\n        ];\r\n\r\n        analyticsKeys.forEach(key => {\r\n            if (properties[key] !== undefined) {\r\n                Statistics.analytics.addPermanentProperties({\r\n                    [key.replace('-', '_')]: properties[key]\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a conference property with a given key.\r\n *\r\n * @param {string} key - The key.\r\n * @returns {*} The value\r\n */\r\nJitsiConference.prototype.getProperty = function(key) {\r\n    return this.properties[key];\r\n};\r\n\r\n/**\r\n * Clears the deferred start P2P task if it has been scheduled.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\r\n    if (this.deferredStartP2PTask) {\r\n        logger.info('Cleared deferred start P2P task');\r\n        clearTimeout(this.deferredStartP2PTask);\r\n        this.deferredStartP2PTask = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the JVB\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the P2P\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track removed\" events for given Jingle session.\r\n * @param {string} sessionNickname the session's nickname which will appear in\r\n * log messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteTracks = function(\r\n        sessionNickname,\r\n        remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\r\n        this.onRemoteTrackRemoved(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Resumes media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\r\n    logger.info('Resuming media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\r\n        () => {\r\n            logger.info('Resumed media transfer over the JVB connection!');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to resume media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Sets new P2P status and updates some events/states hijacked from\r\n * the <tt>JitsiConference</tt>.\r\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\r\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\r\n * @private\r\n */\r\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\r\n    if (this.p2p === newStatus) {\r\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\r\n\r\n        return;\r\n    }\r\n    this.p2p = newStatus;\r\n    if (newStatus) {\r\n        logger.info('Peer to peer connection established!');\r\n\r\n        // When we end up in a valid P2P session need to reset the properties\r\n        // in case they have persisted, after session with another peer.\r\n        Statistics.analytics.addPermanentProperties({\r\n            p2pFailed: false,\r\n            forceJvb121: false\r\n        });\r\n\r\n        // Sync up video transfer active in case p2pJingleSession not existed\r\n        // when the lastN value was being adjusted.\r\n        const isVideoActive = this.getLastN() !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    'Failed to sync up P2P video transfer status'\r\n                        + `(${isVideoActive})`, error);\r\n            });\r\n    } else {\r\n        logger.info('Peer to peer connection closed!');\r\n    }\r\n\r\n    // Put the JVB connection on hold/resume\r\n    if (this.jvbJingleSession) {\r\n        this.statistics.sendConnectionResumeOrHoldEvent(\r\n            this.jvbJingleSession.peerconnection, !newStatus);\r\n    }\r\n\r\n    // Clear dtmfManager, so that it can be recreated with new connection\r\n    this.dtmfManager = null;\r\n\r\n    // Update P2P status\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.P2P_STATUS,\r\n        this,\r\n        this.p2p);\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n        this._getActiveMediaSession());\r\n\r\n    // Refresh connection interrupted/restored\r\n    this.eventEmitter.emit(\r\n        this.isConnectionInterrupted()\r\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\r\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\r\n};\r\n\r\n/**\r\n * Starts new P2P session.\r\n * @param {string} remoteJid the JID of the remote participant\r\n * @private\r\n */\r\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\r\n    this._maybeClearDeferredStartP2P();\r\n    if (this.p2pJingleSession) {\r\n        logger.error('P2P session already started!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.isP2PConnectionInterrupted = false;\r\n    this.p2pJingleSession\r\n        = this.xmpp.connection.jingle.newP2PJingleSession(\r\n            this.room.myroomjid,\r\n            remoteJid);\r\n    logger.info(\r\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this.isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.invite(localTracks);\r\n};\r\n\r\n/**\r\n * Suspends media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\r\n    logger.info('Suspending media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\r\n        () => {\r\n            logger.info('Suspended media transfer over the JVB connection !');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to suspend media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Method when called will decide whether it's the time to start or stop\r\n * the P2P session.\r\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\r\n * originates from the user left event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\r\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\r\n        logger.info('Auto P2P disabled');\r\n\r\n        return;\r\n    }\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n\r\n    // FIXME 1 peer and it must *support* P2P switching\r\n    const shouldBeInP2P = this._shouldBeInP2PMode();\r\n\r\n    // Clear deferred \"start P2P\" task\r\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\r\n        this._maybeClearDeferredStartP2P();\r\n    }\r\n\r\n    // Start peer to peer session\r\n    if (!this.p2pJingleSession && shouldBeInP2P) {\r\n        const peer = peerCount && peers[0];\r\n\r\n\r\n        const myId = this.myUserId();\r\n        const peersId = peer.getId();\r\n\r\n        if (myId > peersId) {\r\n            logger.debug(\r\n                'I\\'m the bigger peersId - '\r\n                + 'the other peer should start P2P', myId, peersId);\r\n\r\n            return;\r\n        } else if (myId === peersId) {\r\n            logger.error('The same IDs ? ', myId, peersId);\r\n\r\n            return;\r\n        }\r\n\r\n        const jid = peer.getJid();\r\n\r\n        if (userLeftEvent) {\r\n            if (this.deferredStartP2PTask) {\r\n                logger.error('Deferred start P2P task\\'s been set already!');\r\n\r\n                return;\r\n            }\r\n            logger.info(\r\n                `Will start P2P with: ${jid} after ${\r\n                    this.backToP2PDelay} seconds...`);\r\n            this.deferredStartP2PTask = setTimeout(\r\n                this._startP2PSession.bind(this, jid),\r\n                this.backToP2PDelay * 1000);\r\n        } else {\r\n            logger.info(`Will start P2P with: ${jid}`);\r\n            this._startP2PSession(jid);\r\n        }\r\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\r\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\r\n\r\n        // Log that there will be a switch back to the JVB connection\r\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\r\n        }\r\n        this._stopP2PSession();\r\n    }\r\n};\r\n\r\n/**\r\n * Tells whether or not this conference should be currently in the P2P mode.\r\n *\r\n * @private\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._shouldBeInP2PMode = function() {\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\r\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\r\n\r\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\r\n\r\n    return shouldBeInP2P;\r\n};\r\n\r\n/**\r\n * Stops the current P2P session.\r\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\r\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\r\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\r\n * description that will be included in the session terminate message\r\n * @private\r\n */\r\nJitsiConference.prototype._stopP2PSession = function(\r\n        reason,\r\n        reasonDescription) {\r\n    if (!this.p2pJingleSession) {\r\n        logger.error('No P2P session to be stopped!');\r\n\r\n        return;\r\n    }\r\n\r\n    const wasP2PEstablished = this.isP2PActive();\r\n\r\n    // Swap remote tracks, but only if the P2P has been fully established\r\n    if (wasP2PEstablished) {\r\n        if (this.jvbJingleSession) {\r\n            this._resumeMediaTransferForJvbConnection();\r\n        }\r\n\r\n        // Remove remote P2P tracks\r\n        this._removeRemoteP2PTracks();\r\n    }\r\n\r\n    // Stop P2P stats\r\n    logger.info('Stopping remote stats for P2P connection');\r\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\r\n    logger.info('Stopping CallStats for P2P connection');\r\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\r\n\r\n    this.p2pJingleSession.terminate(\r\n        () => {\r\n            logger.info('P2P session terminate RESULT');\r\n        },\r\n        error => {\r\n            // Because both initiator and responder are simultaneously\r\n            // terminating their JingleSessions in case of the 'to JVB switch'\r\n            // when 3rd participant joins, both will dispose their sessions and\r\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\r\n            // want to log this as an error since it's expected behaviour.\r\n            //\r\n            // We want them both to terminate, because in case of initiator's\r\n            // crash the responder would stay in P2P mode until ICE fails which\r\n            // could take up to 20 seconds.\r\n            //\r\n            // NOTE lack of 'reason' is considered as graceful session terminate\r\n            // where both initiator and responder terminate their sessions\r\n            // simultaneously.\r\n            if (reason) {\r\n                logger.error(\r\n                    'An error occurred while trying to terminate'\r\n                        + ' P2P Jingle session', error);\r\n            }\r\n        }, {\r\n            reason: reason ? reason : 'success',\r\n            reasonDescription: reasonDescription\r\n                ? reasonDescription : 'Turing off P2P session',\r\n            sendSessionTerminate: this.room\r\n                && this.getParticipantById(\r\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\r\n        });\r\n\r\n    this.p2pJingleSession = null;\r\n\r\n    // Update P2P status and other affected events/states\r\n    this._setP2PStatus(false);\r\n\r\n    if (wasP2PEstablished) {\r\n        // Add back remote JVB tracks\r\n        if (this.jvbJingleSession) {\r\n            this._addRemoteJVBTracks();\r\n        } else {\r\n            logger.info('Not adding remote JVB tracks - no session yet');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Checks whether or not the conference is currently in the peer to peer mode.\r\n * Being in peer to peer mode means that the direct connection has been\r\n * established and the P2P connection is being used for media transmission.\r\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\r\n */\r\nJitsiConference.prototype.isP2PActive = function() {\r\n    return this.p2p;\r\n};\r\n\r\n/**\r\n * Returns the current ICE state of the P2P connection.\r\n * NOTE: method is used by the jitsi-meet-torture tests.\r\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\r\n * no P2P connection.\r\n */\r\nJitsiConference.prototype.getP2PConnectionState = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection.getConnectionState();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\r\n *\r\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\r\n * @returns {boolean} true if the operation is successful, false otherwise.\r\n */\r\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\r\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\r\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\r\n\r\n        return false;\r\n    }\r\n\r\n    this._desktopSharingFrameRate = maxFps;\r\n\r\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\r\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\r\n\r\n    // Set the capture rate for desktop sharing.\r\n    this.rtc.setDesktopSharingFrameRate(maxFps);\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * Manually starts new P2P session (should be used only in the tests).\r\n */\r\nJitsiConference.prototype.startP2PSession = function() {\r\n    const peers = this.getParticipants();\r\n\r\n    // Start peer to peer session\r\n    if (peers.length === 1) {\r\n        const peerJid = peers[0].getJid();\r\n\r\n        this._startP2PSession(peerJid);\r\n    } else {\r\n        throw new Error(\r\n            'There must be exactly 1 participant to start the P2P session !');\r\n    }\r\n};\r\n\r\n/**\r\n * Manually stops the current P2P session (should be used only in the tests)\r\n */\r\nJitsiConference.prototype.stopP2PSession = function() {\r\n    this._stopP2PSession();\r\n};\r\n\r\n/**\r\n * Get a summary of how long current participants have been the dominant speaker\r\n * @returns {object}\r\n */\r\nJitsiConference.prototype.getSpeakerStats = function() {\r\n    return this.speakerStatsCollector.getStats();\r\n};\r\n\r\n/**\r\n * Sets the constraints for the video that is requested from the bridge.\r\n *\r\n * @param {Object} videoConstraints The constraints which are specified in the\r\n * following format. The message updates the fields that are present and leaves the\r\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\r\n * should be cleared by passing an empty object or list (whatever is applicable).\r\n * {\r\n *      'lastN': 20,\r\n *      'selectedEndpoints': ['A', 'B', 'C'],\r\n *      'onStageEndpoints': ['A'],\r\n *      'defaultConstraints': { 'maxHeight': 180 },\r\n *      'constraints': {\r\n *          'A': { 'maxHeight': 720 }\r\n *      }\r\n * }\r\n */\r\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\r\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should receive from remote\r\n * participants.\r\n *\r\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\r\n * this receiver is willing to receive.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\r\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should send to remote\r\n * participants.\r\n * @param {number} maxFrameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\r\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Creates a video SIP GW session and returns it if service is enabled. Before\r\n * creating a session one need to check whether video SIP GW service is\r\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\r\n * if there are available nodes to serve this request, after creating the\r\n * session those nodes can be taken and the request about using the\r\n * created session can fail.\r\n *\r\n * @param {string} sipAddress - The sip address to be used.\r\n * @param {string} displayName - The display name to be used for this session.\r\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\r\n * initialised and there is no room.\r\n */\r\nJitsiConference.prototype.createVideoSIPGWSession\r\n    = function(sipAddress, displayName) {\r\n        if (!this.room) {\r\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\r\n        }\r\n\r\n        return this.videoSIPGWHandler\r\n            .createVideoSIPGWSession(sipAddress, displayName);\r\n    };\r\n\r\n/**\r\n * Sends a conference.join analytics event.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`\r\n    }));\r\n    this._conferenceJoinAnalyticsEventSent = Date.now();\r\n};\r\n\r\n/**\r\n * Sends conference.left analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\r\n\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('left', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`,\r\n        stats: {\r\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\r\n            perf: this.getPerformanceStats()\r\n        }\r\n    }));\r\n};\r\n\r\n/**\r\n * Restarts all active media sessions.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._restartMediaSessions = function() {\r\n    if (this.p2pJingleSession) {\r\n        this.stopP2PSession();\r\n    }\r\n\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.terminate(\r\n            null /* success callback => we don't care */,\r\n            error => {\r\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\r\n            }, {\r\n                reason: 'success',\r\n                reasonDescription: 'restart required',\r\n                requestRestart: true,\r\n                sendSessionTerminate: true\r\n            });\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(false);\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is enabled.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EEEnabled = function() {\r\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is supported. Note that not all participants\r\n * in the conference may support it.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EESupported = function() {\r\n    return E2EEncryption.isSupported(this.options.config);\r\n};\r\n\r\n/**\r\n * Enables / disables End-to-End encryption.\r\n *\r\n * @param {boolean} enabled whether to enable E2EE or not.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.toggleE2EE = function(enabled) {\r\n    if (!this.isE2EESupported()) {\r\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\r\n\r\n        return;\r\n    }\r\n\r\n    this._e2eEncryption.setEnabled(enabled);\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether lobby is supported in the backend.\r\n */\r\nJitsiConference.prototype.isLobbySupported = function() {\r\n    return Boolean(this.room && this.room.getLobby().isSupported());\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if the room has members only enabled.\r\n *\r\n * @returns {boolean} whether conference room is members only.\r\n */\r\nJitsiConference.prototype.isMembersOnly = function() {\r\n    return Boolean(this.room && this.room.membersOnlyEnabled);\r\n};\r\n\r\n/**\r\n * Enables lobby by moderators\r\n *\r\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\r\n */\r\nJitsiConference.prototype.enableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        return this.room.getLobby().enable();\r\n    }\r\n\r\n    return Promise.reject(\r\n        new Error('The conference not started or user is not moderator'));\r\n};\r\n\r\n/**\r\n * Disabled lobby by moderators\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.disableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.getLobby().disable();\r\n    } else {\r\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\r\n *\r\n * @param {string} displayName Display name should be set to show it to moderators.\r\n * @param {string} email Optional email is used to present avatar to the moderator.\r\n * @returns {Promise<never>}\r\n */\r\nJitsiConference.prototype.joinLobby = function(displayName, email) {\r\n    if (this.room) {\r\n        return this.room.getLobby().join(displayName, email);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference not started'));\r\n};\r\n\r\n/**\r\n * Denies an occupant in the lobby room access to the conference.\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().denyAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Approves the request to join the conference to a participant waiting in the lobby.\r\n *\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().approveAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether AV Moderation is supported in the backend.\r\n */\r\nJitsiConference.prototype.isAVModerationSupported = function() {\r\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\r\n};\r\n\r\n/**\r\n * Enables AV Moderation.\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n */\r\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\r\n    if (this.room && this.isModerator()\r\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\r\n        this.room.getAVModeration().enable(true, mediaType);\r\n    } else {\r\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\r\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Disables AV Moderation.\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n */\r\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\r\n    if (this.room && this.isModerator()\r\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\r\n        this.room.getAVModeration().enable(false, mediaType);\r\n    } else {\r\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\r\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Approve participant access to certain media, allows unmuting audio or video.\r\n *\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\r\n    if (this.room && this.isModerator()\r\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\r\n\r\n        const participant = this.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\r\n    } else {\r\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\r\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Reject participant access to certain media, blocks unmuting audio or video.\r\n *\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\r\n    if (this.room && this.isModerator()\r\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\r\n\r\n        const participant = this.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\r\n    } else {\r\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\r\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\r\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\r\n    }\r\n};\r\n","import JitsiConference from './JitsiConference';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport XMPP from './modules/xmpp/xmpp';\r\nimport {\r\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\r\n    createConnectionFailedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\n\r\n/**\r\n * Creates a new connection object for the Jitsi Meet server side video\r\n * conferencing service. Provides access to the JitsiConference interface.\r\n * @param appID identification for the provider of Jitsi Meet video conferencing\r\n * services.\r\n * @param token the JWT token used to authenticate with the server(optional)\r\n * @param options Object with properties / settings related to connection with\r\n * the server.\r\n * @constructor\r\n */\r\nexport default function JitsiConnection(appID, token, options) {\r\n    this.appID = appID;\r\n    this.token = token;\r\n    this.options = options;\r\n    this.xmpp = new XMPP(options, token);\r\n\r\n    /* eslint-disable max-params */\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\r\n        (errType, msg, credentials, details) => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createConnectionFailedEvent(errType, msg, details));\r\n        });\r\n    /* eslint-enable max-params */\r\n\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\r\n        msg => {\r\n            // we can see disconnects from normal tab closing of the browser\r\n            // and then there are no msgs, but we want to log only disconnects\r\n            // when there is real error\r\n            // XXX Do we need the difference in handling between the log and\r\n            // analytics event here?\r\n            if (msg) {\r\n                Statistics.sendAnalytics(\r\n                    ANALYTICS_CONNECTION_DISCONNECTED,\r\n                    { message: msg });\r\n            }\r\n            Statistics.sendLog(\r\n                JSON.stringify(\r\n                    {\r\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\r\n                        msg\r\n                    }));\r\n        });\r\n}\r\n\r\n/**\r\n * Connect the client with the server.\r\n * @param options {object} connecting options\r\n * (for example authentications parameters).\r\n */\r\nJitsiConnection.prototype.connect = function(options = {}) {\r\n    this.xmpp.connect(options.id, options.password);\r\n};\r\n\r\n/**\r\n * Attach to existing connection. Can be used for optimizations. For example:\r\n * if the connection is created on the server we can attach to it and start\r\n * using it.\r\n *\r\n * @param options {object} connecting options - rid, sid and jid.\r\n */\r\nJitsiConnection.prototype.attach = function(options) {\r\n    this.xmpp.attach(options);\r\n};\r\n\r\n/**\r\n * Disconnect the client from the server.\r\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n */\r\nJitsiConnection.prototype.disconnect = function(...args) {\r\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\r\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\r\n    // may optionally pass the event which triggered the disconnect in order to\r\n    // provide the implementation with finer-grained context.\r\n    return this.xmpp.disconnect(...args);\r\n};\r\n\r\n/**\r\n * Returns the jid of the participant associated with the XMPP connection.\r\n *\r\n * @returns {string} The jid of the participant.\r\n */\r\nJitsiConnection.prototype.getJid = function() {\r\n    return this.xmpp.getJid();\r\n};\r\n\r\n/**\r\n * This method allows renewal of the tokens if they are expiring.\r\n * @param token the new token.\r\n */\r\nJitsiConnection.prototype.setToken = function(token) {\r\n    this.token = token;\r\n};\r\n\r\n/**\r\n * Creates and joins new conference.\r\n * @param name the name of the conference; if null - a generated name will be\r\n * provided from the api\r\n * @param options Object with properties / settings related to the conference\r\n * that will be created.\r\n * @returns {JitsiConference} returns the new conference object.\r\n */\r\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\r\n    return new JitsiConference({\r\n        name,\r\n        config: options,\r\n        connection: this\r\n    });\r\n};\r\n\r\n/**\r\n * Subscribes the passed listener to the event.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.addEventListener = function(event, listener) {\r\n    this.xmpp.addListener(event, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribes the passed handler.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\r\n    this.xmpp.removeListener(event, listener);\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConnection.prototype.getConnectionTimes = function() {\r\n    return this.xmpp.connectionTimes;\r\n};\r\n\r\n/**\r\n * Adds new feature to the list of supported features for the local\r\n * participant.\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\r\n    this.xmpp.caps.addFeature(feature, submit, true);\r\n};\r\n\r\n/**\r\n * Removes a feature from the list of supported features for the local\r\n * participant\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\r\n    this.xmpp.caps.removeFeature(feature, submit, true);\r\n};\r\n\r\n/**\r\n * Get object with internal logs.\r\n */\r\nJitsiConnection.prototype.getLogs = function() {\r\n    const data = this.xmpp.getJingleLog();\r\n\r\n    const metadata = {};\r\n\r\n    metadata.time = new Date();\r\n    metadata.url = window.location.href;\r\n    metadata.ua = navigator.userAgent;\r\n\r\n    const log = this.xmpp.getXmppLog();\r\n\r\n    if (log) {\r\n        metadata.xmpp = log;\r\n    }\r\n\r\n    data.metadata = metadata;\r\n\r\n    return data;\r\n};\r\n","/**\r\n * The events for the media devices.\r\n */\r\n\r\n/**\r\n * Indicates that the list of available media devices has been changed. The\r\n * event provides the following parameters to its listeners:\r\n *\r\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\r\n *  MediaDeviceInfo-like objects that are currently connected.\r\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\r\n */\r\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\r\n\r\n/**\r\n * Event emitted when the user granted/blocked a permission for the camera / mic.\r\n * Used to keep track of the granted permissions on browsers which don't\r\n * support the Permissions API.\r\n */\r\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\r\n\r\n/**\r\n * Indicates that the environment is currently showing permission prompt to\r\n * access camera and/or microphone. The event provides the following\r\n * parameters to its listeners:\r\n *\r\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\r\n *  |'react-native'|'android'} environmentType - type of browser or\r\n *  other execution environment.\r\n */\r\nexport const PERMISSION_PROMPT_IS_SHOWN\r\n    = 'mediaDevices.permissionPromptIsShown';\r\n\r\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\n\r\nconst AUDIO_PERMISSION_NAME = 'microphone';\r\nconst PERMISSION_GRANTED_STATUS = 'granted';\r\nconst VIDEO_PERMISSION_NAME = 'camera';\r\n\r\n/**\r\n * Media devices utilities for Jitsi.\r\n */\r\nclass JitsiMediaDevices {\r\n    /**\r\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\r\n     * instance of this class.\r\n     */\r\n    constructor() {\r\n        this._eventEmitter = new EventEmitter();\r\n        this._permissions = {};\r\n\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            devices =>\r\n                this._eventEmitter.emit(\r\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_AVAILABLE,\r\n            devices =>\r\n                this._logOutputDevice(\r\n                    this.getAudioOutputDevice(),\r\n                    devices));\r\n\r\n        // We would still want to update the permissions cache in case the permissions API is not supported.\r\n        RTC.addListener(\r\n            RTCEvents.PERMISSIONS_CHANGED,\r\n            permissions => this._handlePermissionsChange(permissions));\r\n\r\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\r\n        // implemented. If supported add onchange listeners.\r\n        this._permissionsApiSupported = new Promise(resolve => {\r\n            if (!navigator.permissions) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n\r\n            const self = this;\r\n\r\n            const promises = [];\r\n\r\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\r\n                .then(status => {\r\n                    this._handlePermissionsChange({\r\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\r\n                    });\r\n                    status.onchange = function() {\r\n                        try {\r\n                            self._handlePermissionsChange({\r\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\r\n                            });\r\n                        } catch (error) {\r\n                            // Nothing to do.\r\n                        }\r\n                    };\r\n\r\n                    return true;\r\n                })\r\n                .catch(() => false));\r\n\r\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\r\n                .then(status => {\r\n                    this._handlePermissionsChange({\r\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\r\n                    });\r\n                    status.onchange = function() {\r\n                        try {\r\n                            self._handlePermissionsChange({\r\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\r\n                            });\r\n                        } catch (error) {\r\n                            // Nothing to do.\r\n                        }\r\n                    };\r\n\r\n                    return true;\r\n                })\r\n                .catch(() => false));\r\n\r\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\r\n\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Parses a PermissionState object and returns true for granted and false otherwise.\r\n     *\r\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\r\n     * @returns {boolean} - True for granted and false for denied.\r\n     * @throws {TypeError}\r\n     */\r\n    _parsePermissionState(permissionStatus = {}) {\r\n        // The status attribute is deprecated, and state\r\n        // should be used instead, but check both for now\r\n        // for backwards compatibility.\r\n        const status = permissionStatus.state || permissionStatus.status;\r\n\r\n        if (typeof status !== 'string') {\r\n            throw new TypeError();\r\n        }\r\n\r\n        return status === PERMISSION_GRANTED_STATUS;\r\n    }\r\n\r\n    /**\r\n     * Updates the local granted/denied permissions cache. A permissions might be\r\n     * granted, denied, or undefined. This is represented by having its media\r\n     * type key set to {@code true} or {@code false} respectively.\r\n     *\r\n     * @param {Object} permissions - Object with the permissions.\r\n     */\r\n    _handlePermissionsChange(permissions) {\r\n        const hasPermissionsChanged\r\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\r\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\r\n\r\n        if (hasPermissionsChanged) {\r\n            this._permissions = {\r\n                ...this._permissions,\r\n                ...permissions\r\n            };\r\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\r\n\r\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\r\n                // Triggering device list update when the permissiions are granted in order to update\r\n                // the labels the devices.\r\n                // eslint-disable-next-line no-empty-function\r\n                this.enumerateDevices(() => {});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gathers data and sends it to statistics.\r\n     * @param deviceID the device id to log\r\n     * @param devices list of devices\r\n     */\r\n    _logOutputDevice(deviceID, devices) {\r\n        const device\r\n            = devices.find(\r\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     * @param {function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        RTC.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/micropones.\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return RTC.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return RTC.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Checks if the permission for the given device was granted.\r\n     *\r\n     * @param {'audio'|'video'} [type] - type of devices to check,\r\n     *      undefined stands for both 'audio' and 'video' together\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isDevicePermissionGranted(type) {\r\n        return new Promise(resolve => {\r\n            // Shortcut: first check if we already know the permission was\r\n            // granted.\r\n            if (type in this._permissions) {\r\n                resolve(this._permissions[type]);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check using the Permissions API.\r\n            this._permissionsApiSupported.then(supported => {\r\n                if (!supported) {\r\n                    resolve(false);\r\n\r\n                    return;\r\n                }\r\n\r\n                const promises = [];\r\n\r\n                switch (type) {\r\n                case MediaType.VIDEO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                case MediaType.AUDIO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                default:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(\r\n                    results => resolve(results.every(permissionStatus => {\r\n                        try {\r\n                            return this._parsePermissionState(permissionStatus);\r\n                        } catch {\r\n                            return false;\r\n                        }\r\n                    })),\r\n                    () => resolve(false)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return !(browser.isFirefox() || browser.isIosBrowser());\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, 'default' stands\r\n     * for default device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return RTC.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\r\n     *      default device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n        if (availableDevices.length > 0) {\r\n            // if we have devices info report device to stats\r\n            // normally this will not happen on startup as this method is called\r\n            // too early. This will happen only on user selection of new device\r\n            this._logOutputDevice(\r\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\r\n        }\r\n\r\n        return RTC.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    addEventListener(event, handler) {\r\n        this._eventEmitter.addListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Removes event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    removeEventListener(event, handler) {\r\n        this._eventEmitter.removeListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Emits an event.\r\n     * @param {string} event - event name\r\n     */\r\n    emitEvent(event, ...args) {\r\n        this._eventEmitter.emit(event, ...args);\r\n    }\r\n}\r\n\r\nexport default new JitsiMediaDevices();\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport Statistics from '../statistics/statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\r\n// i.e. audioLevel > 0.008\r\nconst DETECTION_TIMEOUT = 3000;\r\n\r\n\r\n/**\r\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n *\r\n * @returns Promise<Object> - Object containing information about the found device.\r\n */\r\nexport default function getActiveAudioDevice() {\r\n\r\n    return new Promise(resolve => {\r\n        RTC.enumerateDevices(devices => {\r\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n            const devicePromiseArray = [];\r\n\r\n\r\n            for (const micDevice of audioDevices) {\r\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\r\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\r\n\r\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\r\n                    // that's  why only take p.value[0].\r\n                    const track = tracks[0];\r\n                    const originalStream = track.getOriginalStream();\r\n\r\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\r\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\r\n                        Statistics.stopLocalStats(originalStream);\r\n                    });\r\n\r\n                    return track;\r\n                });\r\n\r\n                devicePromiseArray.push(devicePromise);\r\n            }\r\n\r\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\r\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\r\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\r\n\r\n\r\n                const availableDevices = successfulPromises.map(p => p.value);\r\n                const rejectReasons = rejectedPromises.map(p => p.value);\r\n\r\n                for (const reason of rejectReasons) {\r\n                    logger.error('Failed to acquire audio device with error: ', reason);\r\n                }\r\n\r\n                // Setup event handlers for monitored devices.\r\n                for (const device of availableDevices) {\r\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\r\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\r\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\r\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\r\n                        // no input.\r\n                        if (audioLevel > 0.008) {\r\n                            stopActiveDevices(availableDevices);\r\n                            resolve({ deviceId: device.deviceId,\r\n                                deviceLabel: device.track.label });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\r\n                setTimeout(() => {\r\n                    stopActiveDevices(availableDevices);\r\n                    resolve({\r\n                        deviceId: '',\r\n                        deviceLabel: '' }\r\n                    );\r\n                }, DETECTION_TIMEOUT);\r\n\r\n            });\r\n\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Stop the streams of the provided JitsiLocalTracks.\r\n *\r\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\r\n * @returns {void}\r\n */\r\nfunction stopActiveDevices(deviceList) {\r\n    for (const device of deviceList) {\r\n        device.stopStream();\r\n    }\r\n}\r\n","/**\r\n * The know jingle actions that can be sent and should be acted upon by\r\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\r\n */\r\nexport const ACTIONS = {\r\n    ACCEPT: 'session-accept',\r\n    CONNECTION_ERROR: 'connection-error-encountered',\r\n    INITIATE: 'session-initiate',\r\n    TERMINATE: 'session-terminate',\r\n    TRANSPORT_INFO: 'transport-info',\r\n    UNAVAILABLE: 'unavailable'\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\r\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\r\n\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\r\n * an XMPP connection. It is being re-used for consistency with the rest of the\r\n * codebase and to leverage existing peer connection event handling. Also\r\n * this class provides a facade to hide most of the API for\r\n * {@code JingleSessionPC}.\r\n */\r\nexport default class ProxyConnectionPC {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionPC} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\r\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\r\n     * client should send answers. Defaults to false.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\r\n     * through the peer connection.\r\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\r\n     * and which should receive direct messages regarding peer connection updates.\r\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\r\n     * streams. Defaults to false.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\r\n     */\r\n    constructor(options = {}) {\r\n        this._options = {\r\n            pcConfig: {},\r\n            isInitiator: false,\r\n            receiveAudio: false,\r\n            receiveVideo: false,\r\n            ...options\r\n        };\r\n\r\n        /**\r\n         * Instances of {@code JitsiTrack} associated with this instance of\r\n         * {@code ProxyConnectionPC}.\r\n         *\r\n         * @type {Array<JitsiTrack>}\r\n         */\r\n        this._tracks = [];\r\n\r\n        /**\r\n         * The active instance of {@code JingleSessionPC}.\r\n         *\r\n         * @type {JingleSessionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onError = this._onError.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the remote peer with which this peer connection should\r\n     * be established with.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPeerJid() {\r\n        return this._options.peerJid;\r\n    }\r\n\r\n    /**\r\n     * Updates the peer connection based on the passed in jingle.\r\n     *\r\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\r\n     * describing how the peer connection should be updated.\r\n     * @returns {void}\r\n     */\r\n    processMessage($jingle) {\r\n        switch ($jingle.attr('action')) {\r\n        case ACTIONS.ACCEPT:\r\n            this._onSessionAccept($jingle);\r\n            break;\r\n\r\n        case ACTIONS.INITIATE:\r\n            this._onSessionInitiate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TERMINATE:\r\n            this._onSessionTerminate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TRANSPORT_INFO:\r\n            this._onTransportInfo($jingle);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a peer connection and starts the offer/answer cycle to\r\n     * establish a connection with a remote peer.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\r\n     * to add to the peer connection.\r\n     * @returns {void}\r\n     */\r\n    start(localTracks = []) {\r\n        if (this._peerConnection) {\r\n            return;\r\n        }\r\n\r\n        this._tracks = this._tracks.concat(localTracks);\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.invite(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Begins the process of disconnecting from a remote peer and cleaning up\r\n     * the peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.terminate();\r\n        }\r\n\r\n        this._onSessionTerminate();\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\r\n     * dependencies of {@code JingleSessionPC}.\r\n     *\r\n     * @private\r\n     * @returns {JingleSessionPC}\r\n     */\r\n    _createPeerConnection() {\r\n        /**\r\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\r\n         * object, which may not be accessible from the caller.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const configStub = {};\r\n\r\n        /**\r\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\r\n         * passed through, which also has the jingle plugin initialized on it.\r\n         * This connection object is used to signal out peer connection updates\r\n         * via iqs, and those updates need to be piped back out to the remote\r\n         * peer.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const connectionStub = {\r\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\r\n            // spot has no signalling it will not be in a meeting where this is used.\r\n            connected: true,\r\n            jingle: {\r\n                terminate: () => { /** no-op */ }\r\n            },\r\n            sendIQ: this._onSendMessage,\r\n\r\n            // Returns empty function, because it does not add any listeners for real\r\n            // eslint-disable-next-line no-empty-function\r\n            addEventListener: () => () => { }\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} can take in a custom ice configuration,\r\n         * depending on the peer connection type, peer-to-peer or other.\r\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\r\n         * connection so the ice configuration is hard-coded with defaults.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const pcConfigStub = {\r\n            iceServers: DEFAULT_STUN_SERVERS,\r\n            ...this._options.pcConfig\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} expects an instance of\r\n         * {@code JitsiConference}, which has an event emitter that is used\r\n         * to signal various connection updates that the local client should\r\n         * act upon. The conference instance is not a dependency of a proxy\r\n         * connection, but the emitted events can be relevant to the proxy\r\n         * connection so the event emitter is stubbed.\r\n         *\r\n         * @param {string} event - The constant for the event type.\r\n         * @type {Function}\r\n         * @returns {void}\r\n         */\r\n        const emitter = event => {\r\n            switch (event) {\r\n            case XMPPEvents.CONNECTION_ICE_FAILED:\r\n            case XMPPEvents.CONNECTION_FAILED:\r\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * {@link JingleSessionPC} expects an instance of\r\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\r\n         * is instantiated outside of the {@code JitsiConference}, so it must be\r\n         * stubbed to prevent errors.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const roomStub = {\r\n            addPresenceListener: () => { /** no-op */ },\r\n            connectionTimes: [],\r\n            eventEmitter: { emit: emitter },\r\n            getMediaPresenceInfo: () => {\r\n                // Errors occur if this function does not return an object\r\n\r\n                return {};\r\n            },\r\n            removePresenceListener: () => { /** no-op */ },\r\n            supportsRestartByTerminate: () => false\r\n        };\r\n\r\n        /**\r\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\r\n         * @type {Object}\r\n         */\r\n        const conferenceStub = {\r\n            myUserId: () => ''\r\n        };\r\n\r\n        /**\r\n         * Create an instance of {@code RTC} as it is required for peer\r\n         * connection creation by {@code JingleSessionPC}. An existing instance\r\n         * of {@code RTC} from elsewhere should not be re-used because it is\r\n         * a stateful grouping of utilities.\r\n         */\r\n        this._rtc = new RTC(conferenceStub, {});\r\n\r\n        /**\r\n         * Add the remote track listener here as {@code JingleSessionPC} has\r\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\r\n         * emitter.\r\n         */\r\n        this._rtc.addListener(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            this._onRemoteStream\r\n        );\r\n\r\n        const peerConnection = new JingleSessionPC(\r\n            undefined, // sid\r\n            undefined, // localJid\r\n            this._options.peerJid, // remoteJid\r\n            connectionStub, // connection\r\n            {\r\n                offerToReceiveAudio: this._options.receiveAudio,\r\n                offerToReceiveVideo: this._options.receiveVideo\r\n            }, // mediaConstraints\r\n            pcConfigStub, // pcConfig\r\n            true, // isP2P\r\n            this._options.isInitiator // isInitiator\r\n        );\r\n\r\n        /**\r\n         * An additional initialize call is necessary to properly set instance\r\n         * variable for calling.\r\n         */\r\n        peerConnection.initialize(roomStub, this._rtc, configStub);\r\n\r\n        return peerConnection;\r\n    }\r\n\r\n    /**\r\n     * Invoked when a connection related issue has been encountered.\r\n     *\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onError(errorType, details = '') {\r\n        this._options.onError(this._options.peerJid, errorType, details);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the peer connection has received a remote media\r\n     * stream.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\r\n     * wrapped in {@code JitsiRemoteTrack}.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        this._tracks.push(jitsiRemoteTrack);\r\n\r\n        this._options.onRemoteStream(jitsiRemoteTrack);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\r\n     * out to the remote peer.\r\n     *\r\n     * @param {XML} iq - The message to signal out.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(iq) {\r\n        this._options.onSendMessage(this._options.peerJid, iq);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to an agreement to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP answer to a previously\r\n     * sent SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionAccept($jingle) {\r\n        if (!this._peerConnection) {\r\n            logger.error('Received an answer when no peer connection exists.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection.setAnswer($jingle);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionInitiate($jingle) {\r\n        if (this._peerConnection) {\r\n            logger.error('Received an offer when an offer was already sent.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.acceptOffer(\r\n            $jingle,\r\n            () => { /** no-op */ },\r\n            () => this._onError(\r\n                this._options.peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'session initiate error'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to disconnect an active proxy\r\n     * connection. Cleans up tracks and the peer connection.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionTerminate() {\r\n        this._tracks.forEach(track => track.dispose());\r\n        this._tracks = [];\r\n\r\n        if (this._peerConnection) {\r\n            this._peerConnection.onTerminated();\r\n        }\r\n\r\n        if (this._rtc) {\r\n            this._rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_ADDED,\r\n                this._onRemoteStream\r\n            );\r\n\r\n            this._rtc.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to ICE candidates from the remote peer.\r\n     * The passed in jingle element should contain an ICE candidate.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTransportInfo($jingle) {\r\n        this._peerConnection.addIceCandidates($jingle);\r\n    }\r\n}\r\n","/* globals $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport RTC from '../RTC/RTC';\r\n\r\nimport ProxyConnectionPC from './ProxyConnectionPC';\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\r\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\r\n * and assumes IQs to be used for communication.\r\n */\r\nexport default class ProxyConnectionService {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionService} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\r\n     * stream. Defaults to false.\r\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\r\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\r\n     * TURN credentials for the P2P connection.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\r\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\r\n     * arguments passed in are the jid to send the message to and the message.\r\n     */\r\n    constructor(options = {}) {\r\n        const {\r\n            jitsiConnection,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        /**\r\n         * Holds a reference to the collection of all callbacks.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._options = {\r\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\r\n            ...otherOptions\r\n        };\r\n\r\n        /**\r\n         * The active instance of {@code ProxyConnectionService}.\r\n         *\r\n         * @type {ProxyConnectionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onFatalError = this._onFatalError.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a message object regarding a proxy connection to create a new\r\n     * proxy connection or update and existing connection.\r\n     *\r\n     * @param {Object} message - A message object regarding establishing or\r\n     * updating a proxy connection.\r\n     * @param {Object} message.data - An object containing additional message\r\n     * details.\r\n     * @param {string} message.data.iq - The stringified iq which explains how\r\n     * and what to update regarding the proxy connection.\r\n     * @param {string} message.from - The message sender's full jid. Used for\r\n     * sending replies.\r\n     * @returns {void}\r\n     */\r\n    processMessage(message) {\r\n        const peerJid = message.from;\r\n\r\n        if (!peerJid) {\r\n            return;\r\n        }\r\n\r\n        // If a proxy connection has already been established and messages come\r\n        // from another peer jid then those messages should be replied to with\r\n        // a rejection.\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() !== peerJid) {\r\n            this._onFatalError(\r\n                peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'rejected'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const iq = this._convertStringToXML(message.data.iq);\r\n        const $jingle = iq && iq.find('jingle');\r\n        const action = $jingle && $jingle.attr('action');\r\n\r\n        if (action === ACTIONS.INITIATE) {\r\n            this._peerConnection = this._createPeerConnection(peerJid, {\r\n                isInitiator: false,\r\n                receiveVideo: true\r\n            });\r\n        }\r\n\r\n        // Truthy check for peer connection added to protect against possibly\r\n        // receiving actions before an ACTIONS.INITIATE.\r\n        if (this._peerConnection) {\r\n            this._peerConnection.processMessage($jingle);\r\n        }\r\n\r\n        // Take additional steps to ensure the peer connection is cleaned up\r\n        // if it is to be closed.\r\n        if (action === ACTIONS.CONNECTION_ERROR\r\n            || action === ACTIONS.UNAVAILABLE\r\n            || action === ACTIONS.TERMINATE) {\r\n            this._selfCloseConnection();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Instantiates and initiates a proxy peer connection.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote client that should\r\n     * receive messages.\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\r\n     * send through to the peer.\r\n     * @returns {void}\r\n     */\r\n    start(peerJid, localTracks = []) {\r\n        this._peerConnection = this._createPeerConnection(peerJid, {\r\n            isInitiator: true,\r\n            receiveVideo: false\r\n        });\r\n\r\n        this._peerConnection.start(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Terminates any active proxy peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.stop();\r\n        }\r\n\r\n        this._peerConnection = null;\r\n    }\r\n\r\n    /**\r\n     * Transforms a stringified xML into a XML wrapped in jQuery.\r\n     *\r\n     * @param {string} xml - The XML in string form.\r\n     * @private\r\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\r\n     * if an error is encountered during transformation.\r\n     */\r\n    _convertStringToXML(xml) {\r\n        try {\r\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\r\n\r\n            return $(xmlDom);\r\n        } catch (e) {\r\n            logger.error('Attempted to convert incorrectly formatted xml');\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote peer with which the\r\n     * {@code ProxyConnectionPC} will be established with.\r\n     * @param {Object} options - Additional defaults to instantiate the\r\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\r\n     * for more details.\r\n     * @private\r\n     * @returns {ProxyConnectionPC}\r\n     */\r\n    _createPeerConnection(peerJid, options = {}) {\r\n        if (!peerJid) {\r\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\r\n        }\r\n\r\n        const pcOptions = {\r\n            pcConfig: this._options.pcConfig,\r\n            onError: this._onFatalError,\r\n            onRemoteStream: this._onRemoteStream,\r\n            onSendMessage: this._onSendMessage,\r\n            peerJid,\r\n            ...options\r\n        };\r\n\r\n        return new ProxyConnectionPC(pcOptions);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when an error occurs that should cause\r\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\r\n     * connected. Sends an error message/reply back to the peer.\r\n     *\r\n     * @param {string} peerJid - The peer jid with which the connection was\r\n     * attempted or started, and to which an iq with error details should be\r\n     * sent.\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onFatalError(peerJid, errorType, details = '') {\r\n        logger.error(\r\n            'Received a proxy connection error', peerJid, errorType, details);\r\n\r\n        const iq = $iq({\r\n            to: peerJid,\r\n            type: 'set'\r\n        })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: errorType\r\n            })\r\n            .c('details')\r\n            .t(details)\r\n            .up();\r\n\r\n        this._onSendMessage(peerJid, iq);\r\n\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() === peerJid) {\r\n            this._selfCloseConnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\r\n     * has offered a media stream. The stream is converted into a\r\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\r\n     * callback is defined.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\r\n     * for the peer's media stream.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        if (!this._options.onRemoteStream) {\r\n            logger.error('Remote track received without callback.');\r\n            jitsiRemoteTrack.dispose();\r\n\r\n            return;\r\n        }\r\n\r\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\r\n        let videoType;\r\n\r\n        if (isVideo) {\r\n            videoType = this._options.convertVideoToDesktop\r\n                ? VideoType.DESKTOP : VideoType.CAMERA;\r\n        }\r\n\r\n        // Grab the webrtc media stream and pipe it through the same processing\r\n        // that would occur for a locally obtained media stream.\r\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\r\n        const jitsiLocalTracks = RTC.createLocalTracks(\r\n            [\r\n                {\r\n                    deviceId:\r\n                        `proxy:${this._peerConnection.getPeerJid()}`,\r\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\r\n                    sourceType: 'proxy',\r\n                    stream: mediaStream,\r\n                    track: mediaStream.getVideoTracks()[0],\r\n                    videoType\r\n                }\r\n            ]);\r\n\r\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\r\n    }\r\n\r\n    /**\r\n     * Formats and forwards a message an iq to be sent to a peer jid.\r\n     *\r\n     * @param {string} peerJid - The jid the iq should be sent to.\r\n     * @param {Object} iq - The iq which would be sent to the peer jid.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(peerJid, iq) {\r\n        if (!this._options.onSendMessage) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const stringifiedIq\r\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\r\n\r\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\r\n        } catch (e) {\r\n            logger.error('Attempted to send an incorrectly formatted iq.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _selfCloseConnection() {\r\n        this.stop();\r\n\r\n        this._options.onConnectionClosed\r\n            && this._options.onConnectionClosed();\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport browser from '../browser';\r\nimport Settings from '../settings/Settings';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\r\nconst emitter = new EventEmitter();\r\nlet _initialized = false;\r\nlet api = null;\r\n\r\n/**\r\n * Loads the callstats io script.\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nfunction _loadScript(options) {\r\n    if (browser.isReactNative()) {\r\n        return;\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        ScriptUtil.loadScript(\r\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ resolve);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the callstats lib and registers a callback to be invoked\r\n * when there are 'preCallTestResults'.\r\n *\r\n * @typedef PrecallTestOptions\r\n * @type {Object}\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} statisticsId - The user name to use when initializing callstats.\r\n * @property {string} statisticsDisplayName - The user display name.\r\n *\r\n * @param { PrecallTestOptions} options - The init options.\r\n * @returns {Promise<void>}\r\n */\r\nfunction _initialize(options) {\r\n    return new Promise((resolve, reject) => {\r\n        const appId = options.callStatsID;\r\n        const appSecret = options.callStatsSecret;\r\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\r\n\r\n        api.initialize(appId, appSecret, userId, (status, message) => {\r\n            if (status === 'success') {\r\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\r\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\r\n                });\r\n                _initialized = true;\r\n                resolve();\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    message\r\n                });\r\n            }\r\n        }, null, { disablePrecalltest: true });\r\n    });\r\n}\r\n\r\n/**\r\n * Loads the callstats script and initializes the library.\r\n *\r\n * @param {Function} onResult - The callback to be invoked when results are received.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function init(options) {\r\n    if (_initialized) {\r\n        throw new Error('Precall Test already initialized');\r\n    }\r\n\r\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\r\n\r\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\r\n        throw new Error('Callstats is disabled');\r\n    }\r\n\r\n    await _loadScript(options);\r\n    // eslint-disable-next-line new-cap\r\n    api = new window.callstats();\r\n\r\n    return _initialize(options);\r\n}\r\n\r\n/**\r\n * Executes a pre call test.\r\n *\r\n * @typedef PrecallTestResults\r\n * @type {Object}\r\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\r\n * @property {number} throughput  - The average throughput.\r\n * @property {number} fractionalLoss - The packet loss.\r\n * @property {number} rtt - The round trip time.\r\n * @property {string} provider - It is usually 'callstats'.\r\n *\r\n * @returns {Promise<{PrecallTestResults}>}\r\n */\r\nexport function execute() {\r\n    if (!_initialized) {\r\n        return Promise.reject('uninitialized');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\r\n            if (status === 'success') {\r\n                resolve(payload);\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    payload\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        api.makePrecallTest();\r\n    });\r\n}\r\n\r\nexport default {\r\n    init,\r\n    execute\r\n};\r\n","/* global\r\n    __filename\r\n*/\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createAudioContext } from './WebAudioUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\r\n * MediaStream.\r\n */\r\nexport default class AudioMixer {\r\n    /**\r\n     * Create AudioMixer instance.\r\n     */\r\n    constructor() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n        this._streamMSSArray = [];\r\n    }\r\n\r\n    /**\r\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\r\n     *\r\n     * @param {MediaStream} stream - MediaStream to be mixed.\r\n     */\r\n    addMediaStream(stream) {\r\n        if (!stream.getAudioTracks()) {\r\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\r\n        }\r\n\r\n        this._streamsToMix.push(stream);\r\n    }\r\n\r\n    /**\r\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\r\n     * it; the resulting mixed MediaStream is returned.\r\n     *\r\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\r\n     * is added.\r\n     */\r\n    start() {\r\n        // If the mixer was already started just return the existing mixed stream.\r\n        if (this._started) {\r\n            return this._mixedMSD.stream;\r\n        }\r\n\r\n        this._audioContext = createAudioContext();\r\n\r\n        if (!this._streamsToMix.length) {\r\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\r\n\r\n            return null;\r\n        }\r\n\r\n        this._started = true;\r\n\r\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\r\n\r\n        for (const stream of this._streamsToMix) {\r\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\r\n\r\n            streamMSS.connect(this._mixedMSD);\r\n\r\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\r\n            this._streamMSSArray.push(streamMSS);\r\n        }\r\n\r\n        return this._mixedMSD.stream;\r\n    }\r\n\r\n    /**\r\n     * Disconnect MediaStreamAudioSourceNode and clear references.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n\r\n        // Clean up created MediaStreamAudioSourceNode.\r\n        for (const streamMSS of this._streamMSSArray) {\r\n            streamMSS.disconnect();\r\n        }\r\n\r\n        this._streamMSSArray = [];\r\n\r\n        if (this._audioContext) {\r\n            this._audioContext = undefined;\r\n        }\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport Logger from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiConnection from './JitsiConnection';\r\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport JitsiMediaDevices from './JitsiMediaDevices';\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\r\nimport FeatureFlags from './modules/flags/FeatureFlags';\r\nimport ProxyConnectionService\r\n    from './modules/proxyconnection/ProxyConnectionService';\r\nimport recordingConstants from './modules/recording/recordingConstants';\r\nimport Settings from './modules/settings/Settings';\r\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\r\nimport precallTest from './modules/statistics/PrecallTest';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport AuthUtil from './modules/util/AuthUtil';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport ScriptUtil from './modules/util/ScriptUtil';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport AudioMixer from './modules/webaudio/AudioMixer';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents\r\n    from './service/connectivity/ConnectionQualityEvents';\r\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\r\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * The amount of time to wait until firing\r\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\r\n */\r\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\r\n\r\n/**\r\n * Extracts from an 'options' objects with a specific format (TODO what IS the\r\n * format?) the attributes which are to be logged in analytics events.\r\n *\r\n * @param options gum options (???)\r\n * @returns {*} the attributes to attach to analytics events.\r\n */\r\nfunction getAnalyticsAttributesFromOptions(options) {\r\n    const attributes = {\r\n        'audio_requested':\r\n            options.devices.includes('audio'),\r\n        'video_requested':\r\n            options.devices.includes('video'),\r\n        'screen_sharing_requested':\r\n            options.devices.includes('desktop')\r\n    };\r\n\r\n    if (attributes.video_requested) {\r\n        attributes.resolution = options.resolution;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\r\n * this module, it's also a global (i.e. attached to {@code window}) namespace\r\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\r\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\r\n * automatically be attached to {@code window} by webpack. Unfortunately,\r\n * webpack's source code does not check whether the global variable has already\r\n * been assigned and overwrites it. Which is OK for the module\r\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\r\n * because it may already contain the values of other projects in the Jitsi Meet\r\n * family. The solution offered here works around webpack by merging all\r\n * existing values of the namespace {@code JitsiMeetJS} into the module\r\n * {@code JitsiMeetJS}.\r\n *\r\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\r\n * exported and may be attached to {@code window} by webpack later on).\r\n * @private\r\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\r\n * value of the namespace {@code JitsiMeetJS} (if any).\r\n */\r\nfunction _mergeNamespaceAndModule(module) {\r\n    return (\r\n        typeof window.JitsiMeetJS === 'object'\r\n            ? Object.assign({}, window.JitsiMeetJS, module)\r\n            : module);\r\n}\r\n\r\n/**\r\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\r\n */\r\nexport default _mergeNamespaceAndModule({\r\n\r\n    version: '{#COMMIT_HASH#}',\r\n\r\n    JitsiConnection,\r\n\r\n    /**\r\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\r\n     * local Jitsi participant without going through a Jitsi conference. It is\r\n     * currently used for room integration development, specifically wireless\r\n     * screensharing. Its API is experimental and will likely change; usage of\r\n     * it is advised against.\r\n     */\r\n    ProxyConnectionService,\r\n\r\n    constants: {\r\n        participantConnectionStatus: ParticipantConnectionStatus,\r\n        recording: recordingConstants,\r\n        sipVideoGW: VideoSIPGWConstants,\r\n        transcriptionStatus: JitsiTranscriptionStatus\r\n    },\r\n    events: {\r\n        conference: JitsiConferenceEvents,\r\n        connection: JitsiConnectionEvents,\r\n        detection: DetectionEvents,\r\n        track: JitsiTrackEvents,\r\n        mediaDevices: JitsiMediaDevicesEvents,\r\n        connectionQuality: ConnectionQualityEvents,\r\n        e2eping: E2ePingEvents\r\n    },\r\n    errors: {\r\n        conference: JitsiConferenceErrors,\r\n        connection: JitsiConnectionErrors,\r\n        track: JitsiTrackErrors\r\n    },\r\n    errorTypes: {\r\n        JitsiTrackError\r\n    },\r\n    logLevels: Logger.levels,\r\n    mediaDevices: JitsiMediaDevices,\r\n    analytics: Statistics.analytics,\r\n    init(options = {}) {\r\n        Settings.init(options.externalStorage);\r\n        Statistics.init(options);\r\n\r\n        // Configure the feature flags.\r\n        FeatureFlags.init({\r\n            sourceNameSignaling: options.sourceNameSignaling\r\n        });\r\n\r\n        // Initialize global window.connectionTimes\r\n        // FIXME do not use 'window'\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n\r\n        if (options.enableAnalyticsLogging !== true) {\r\n            logger.warn('Analytics disabled, disposing.');\r\n            this.analytics.dispose();\r\n        }\r\n\r\n        if (options.enableWindowOnErrorHandler) {\r\n            GlobalOnErrorHandler.addHandler(\r\n                this.getGlobalOnErrorHandler.bind(this));\r\n        }\r\n\r\n        // Log deployment-specific information, if available. Defined outside\r\n        // the application by individual deployments\r\n        const aprops = options.deploymentInfo;\r\n\r\n        if (aprops && Object.keys(aprops).length > 0) {\r\n            const logObject = {};\r\n\r\n            for (const attr in aprops) {\r\n                if (aprops.hasOwnProperty(attr)) {\r\n                    logObject[attr] = aprops[attr];\r\n                }\r\n            }\r\n\r\n            logObject.id = 'deployment_info';\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        if (this.version) {\r\n            const logObject = {\r\n                id: 'component_version',\r\n                component: 'lib-jitsi-meet',\r\n                version: this.version\r\n            };\r\n\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        return RTC.init(options);\r\n    },\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return RTC.isDesktopSharingEnabled();\r\n    },\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    isWebRtcSupported() {\r\n        return RTC.isWebRtcSupported();\r\n    },\r\n\r\n    setLogLevel(level) {\r\n        Logger.setLogLevel(level);\r\n    },\r\n\r\n    /**\r\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\r\n     *\r\n     * @param {Logger.levels} level the logging level to be set\r\n     * @param {string} id the logger id to which new logging level will be set.\r\n     * Usually it's the name of the JavaScript source file including the path\r\n     * ex. \"modules/xmpp/ChatRoom.js\"\r\n     */\r\n    setLogLevelById(level, id) {\r\n        Logger.setLogLevelById(level, id);\r\n    },\r\n\r\n    /**\r\n     * Registers new global logger transport to the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.addGlobalTransport\r\n     */\r\n    addGlobalLogTransport(globalTransport) {\r\n        Logger.addGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n     * Removes global logging transport from the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.removeGlobalTransport\r\n     */\r\n    removeGlobalLogTransport(globalTransport) {\r\n        Logger.removeGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    *\r\n    * @param options\r\n    * @see Logger.setGlobalOptions\r\n    */\r\n    setGlobalLogOptions(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n\r\n    /**\r\n     * Creates the media tracks and returns them trough the callback.\r\n     *\r\n     * @param options Object with properties / settings specifying the tracks\r\n     * which should be created. should be created or some additional\r\n     * configurations about resolution for example.\r\n     * @param {Array} options.effects optional effects array for the track\r\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\r\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\r\n     * @param {boolean} options.fireSlowPromiseEvent - if event\r\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {intiger} interval - the interval (in ms) for\r\n     * checking whether the desktop sharing extension is installed or not\r\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\r\n     * createLocalTracks will wait and check on every \"interval\" ms for the\r\n     * extension. If the desktop extension is not install and checkAgain()==true\r\n     * createLocalTracks will finish with rejected Promise.\r\n     * @param {Function} listener - The listener will be called to notify the\r\n     * user of lib-jitsi-meet that createLocalTracks is starting external\r\n     * extension installation process.\r\n     * NOTE: If the inline installation process is not possible and external\r\n     * installation is enabled the listener property will be called to notify\r\n     * the start of external installation process. After that createLocalTracks\r\n     * will start to check for the extension on every interval ms until the\r\n     * plugin is installed or until checkAgain return false. If the extension\r\n     * is found createLocalTracks will try to get the desktop sharing track and\r\n     * will finish the execution. If checkAgain returns false, createLocalTracks\r\n     * will finish the execution with rejected Promise.\r\n     *\r\n     * @deprecated old firePermissionPromptIsShownEvent\r\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\r\n     * that returns an array of created JitsiTracks if resolved, or a\r\n     * JitsiConferenceError if rejected.\r\n     */\r\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\r\n        let promiseFulfilled = false;\r\n\r\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\r\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\r\n\r\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\r\n            JitsiMediaDevices.emitEvent(\r\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\r\n                browser.getName());\r\n        } else if (fireSlowPromiseEvent) {\r\n            window.setTimeout(() => {\r\n                if (!promiseFulfilled) {\r\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\r\n                }\r\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\r\n        }\r\n\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n        window.connectionTimes['obtainPermissions.start']\r\n            = window.performance.now();\r\n\r\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\r\n            .then(tracks => {\r\n                promiseFulfilled = true;\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                Statistics.sendAnalytics(\r\n                    createGetUserMediaEvent(\r\n                        'success',\r\n                        getAnalyticsAttributesFromOptions(restOptions)));\r\n\r\n                if (!RTC.options.disableAudioLevels) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n                        const mStream = track.getOriginalStream();\r\n\r\n                        if (track.getType() === MediaType.AUDIO) {\r\n                            Statistics.startLocalStats(mStream,\r\n                                track.setAudioLevel.bind(track));\r\n                            track.addEventListener(\r\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\r\n                                () => {\r\n                                    Statistics.stopLocalStats(mStream);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set real device ids\r\n                const currentlyAvailableMediaDevices\r\n                    = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n                if (currentlyAvailableMediaDevices) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n\r\n                        track._setRealDeviceIdFromDeviceList(\r\n                            currentlyAvailableMediaDevices);\r\n                    }\r\n                }\r\n\r\n                // set the contentHint to \"detail\" for desktop tracks\r\n                // eslint-disable-next-line prefer-const\r\n                for (const track of tracks) {\r\n                    if (track.type === MediaType.VIDEO\r\n                        && track.videoType === 'desktop') {\r\n                        this.setVideoTrackContentHints(track.track, 'detail');\r\n                    }\r\n                }\r\n\r\n                return tracks;\r\n            })\r\n            .catch(error => {\r\n                promiseFulfilled = true;\r\n\r\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\r\n                    // User cancelled action is not really an error, so only\r\n                    // log it as an event to avoid having conference classified\r\n                    // as partially failed\r\n                    const logObject = {\r\n                        id: 'screensharing_user_canceled',\r\n                        message: error.message\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                reason: 'extension install user canceled'\r\n                            }));\r\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\r\n                    // logs not found devices with just application log to cs\r\n                    const logObject = {\r\n                        id: 'usermedia_missing_device',\r\n                        status: error.gum.devices\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = 'device not found';\r\n                    attributes.devices = error.gum.devices.join('.');\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                } else {\r\n                    // Report gUM failed to the stats\r\n                    Statistics.sendGetUserMediaFailed(error);\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = error.name;\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                }\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\r\n     * order to obtain VAD scores for individual PCM audio samples.\r\n     * @param {string} localAudioDeviceId - The target local audio device.\r\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\r\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\r\n     * longer calls, lowers values mean more calls but shorter.\r\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\r\n     * to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * i.e. (16KHz, 44.1 KHz etc.)\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>}\r\n     */\r\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\r\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\r\n    },\r\n\r\n    /**\r\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\r\n     * user to mix multiple MediaStreams into a single one.\r\n     *\r\n     * @returns {AudioMixer}\r\n     */\r\n    createAudioMixer() {\r\n        return new AudioMixer();\r\n    },\r\n\r\n    /**\r\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n     *\r\n     * @returns Promise<Object> - Object containing information about the found device.\r\n     */\r\n    getActiveAudioDevice() {\r\n        return getActiveAudioDevice();\r\n    },\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\r\n     */\r\n    isDeviceListAvailable() {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceListAvailable();\r\n    },\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     *\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     * {@code undefined} or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\r\n    },\r\n\r\n\r\n    /**\r\n     * Checks if the current environment supports having multiple audio\r\n     * input devices in use simultaneously.\r\n     *\r\n     * @returns {boolean} True if multiple audio input devices can be used.\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return this.mediaDevices.isMultipleAudioInputSupported();\r\n    },\r\n\r\n    /**\r\n     * Checks if local tracks can collect stats and collection is enabled.\r\n     *\r\n     * @param {boolean} True if stats are being collected for local tracks.\r\n     */\r\n    isCollectingLocalStats() {\r\n        return Statistics.audioLevelsEnabled\r\n            && LocalStatsCollector.isLocalStatsSupported();\r\n    },\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     *\r\n     * @param {function} callback\r\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\r\n     */\r\n    enumerateDevices(callback) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\r\n        this.mediaDevices.enumerateDevices(callback);\r\n    },\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * @returns function that can be used to be attached to window.onerror and\r\n     * if options.enableWindowOnErrorHandler is enabled returns\r\n     * the function used by the lib.\r\n     * (function(message, source, lineno, colno, error)).\r\n     */\r\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\r\n        logger.error(\r\n            `UnhandledError: ${message}`,\r\n            `Script: ${source}`,\r\n            `Line: ${lineno}`,\r\n            `Column: ${colno}`,\r\n            'StackTrace: ', error);\r\n        Statistics.reportGlobalError(error);\r\n    },\r\n\r\n    /**\r\n     * Informs lib-jitsi-meet about the current network status.\r\n     *\r\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\r\n     * otherwise.\r\n     */\r\n    setNetworkInfo({ isOnline }) {\r\n        NetworkInfo.updateNetworkInfo({ isOnline });\r\n    },\r\n\r\n    /**\r\n     * Set the contentHint on the transmitted stream track to indicate\r\n     * charaterstics in the video stream, which informs PeerConnection\r\n     * on how to encode the track (to prefer motion or individual frame detail)\r\n     * @param {MediaStreamTrack} track - the track that is transmitted\r\n     * @param {String} hint - contentHint value that needs to be set on the track\r\n     */\r\n    setVideoTrackContentHints(track, hint) {\r\n        if ('contentHint' in track) {\r\n            track.contentHint = hint;\r\n            if (track.contentHint !== hint) {\r\n                logger.debug('Invalid video track contentHint');\r\n            }\r\n        } else {\r\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\r\n        }\r\n    },\r\n\r\n    precallTest,\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Represents a hub/namespace for utility functionality which may be of\r\n     * interest to lib-jitsi-meet clients.\r\n     */\r\n    util: {\r\n        AuthUtil,\r\n        ScriptUtil,\r\n        browser\r\n    }\r\n});\r\n","export default {\r\n    error: {\r\n        BUSY: 'busy',\r\n        ERROR: 'error',\r\n        RESOURCE_CONSTRAINT: 'resource-constraint',\r\n        SERVICE_UNAVAILABLE: 'service-unavailable'\r\n    },\r\n    mode: {\r\n        FILE: 'file',\r\n        STREAM: 'stream'\r\n    },\r\n    status: {\r\n        OFF: 'off',\r\n        ON: 'on',\r\n        PENDING: 'pending'\r\n    }\r\n};\r\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\r\n// library (a.k.a. JitsiMeetJS).\r\nmodule.exports = require('./JitsiMeetJS').default;\r\n","/**\r\n * A model for keeping track of each user's total\r\n * time as a dominant speaker. The model also\r\n * keeps track of the user's last known name\r\n * in case the user has left the meeting,\r\n * which is also tracked.\r\n */\r\nclass SpeakerStats {\r\n    /**\r\n     * Initializes a new SpeakerStats instance.\r\n     *\r\n     * @constructor\r\n     * @param {string} userId - The id of the user being tracked.\r\n     * @param {string} displayName - The name of the user being tracked.\r\n     * @param {boolean} isLocalStats - True if the stats model tracks\r\n     * the local user.\r\n     * @returns {void}\r\n     */\r\n    constructor(userId, displayName, isLocalStats) {\r\n        this._userId = userId;\r\n        this.setDisplayName(displayName);\r\n        this._isLocalStats = isLocalStats || false;\r\n        this.setDominantSpeaker(false);\r\n        this.totalDominantSpeakerTime = 0;\r\n        this._dominantSpeakerStart = 0;\r\n        this._hasLeft = false;\r\n    }\r\n\r\n    /**\r\n     * Get the user id being tracked.\r\n     *\r\n     * @returns {string} The user id.\r\n     */\r\n    getUserId() {\r\n        return this._userId;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the user being tracked.\r\n     *\r\n     * @returns {string} The user name.\r\n     */\r\n    getDisplayName() {\r\n        return this.displayName;\r\n    }\r\n\r\n    /**\r\n     * Updates the last known name of the user being tracked.\r\n     *\r\n     * @param {string} - The user name.\r\n     * @returns {void}\r\n     */\r\n    setDisplayName(newName) {\r\n        this.displayName = newName;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the stats are tracking the local user.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isLocalStats() {\r\n        return this._isLocalStats;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDominantSpeaker() {\r\n        return this._dominantSpeakerStart > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @param {boolean} - If true, the user will being accumulating time\r\n     * as dominant speaker. If false, the user will not accumulate time\r\n     * and will record any time accumulated since starting as dominant speaker.\r\n     * @returns {void}\r\n     */\r\n    setDominantSpeaker(isNowDominantSpeaker) {\r\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\r\n            this._dominantSpeakerStart = Date.now();\r\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\r\n            const now = Date.now();\r\n            const timeElapsed = now - this._dominantSpeakerStart;\r\n\r\n            this.totalDominantSpeakerTime += timeElapsed;\r\n            this._dominantSpeakerStart = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get how long the tracked user has been dominant speaker.\r\n     *\r\n     * @returns {number} - The speaker time in milliseconds.\r\n     */\r\n    getTotalDominantSpeakerTime() {\r\n        let total = this.totalDominantSpeakerTime;\r\n\r\n        if (this.isDominantSpeaker()) {\r\n            total += Date.now() - this._dominantSpeakerStart;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Get whether or not the user is still in the meeting.\r\n     *\r\n     * @returns {boolean} True if the user is no longer in the meeting.\r\n     */\r\n    hasLeft() {\r\n        return this._hasLeft;\r\n    }\r\n\r\n    /**\r\n     * Set the user as having left the meeting.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    markAsHasLeft() {\r\n        this._hasLeft = true;\r\n        this.setDominantSpeaker(false);\r\n    }\r\n}\r\n\r\nmodule.exports = SpeakerStats;\r\n","/* global MediaRecorder, MediaStream */\r\n\r\nconst RecordingResult = require('./recordingResult');\r\n\r\n/**\r\n * Possible audio formats MIME types\r\n */\r\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\r\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\r\n\r\n/**\r\n * A TrackRecorder object holds all the information needed for recording a\r\n * single JitsiTrack (either remote or local)\r\n * @param track The JitsiTrack the object is going to hold\r\n */\r\nconst TrackRecorder = function(track) {\r\n    // The JitsiTrack holding the stream\r\n    this.track = track;\r\n\r\n    // The MediaRecorder recording the stream\r\n    this.recorder = null;\r\n\r\n    // The array of data chunks recorded from the stream\r\n    // acts as a buffer until the data is stored on disk\r\n    this.data = null;\r\n\r\n    // the name of the person of the JitsiTrack. This can be undefined and/or\r\n    // not unique\r\n    this.name = null;\r\n\r\n    // the time of the start of the recording\r\n    this.startTime = null;\r\n};\r\n\r\n/**\r\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also define the timestamp and try to update the name\r\n * @param trackRecorder the TrackRecorder to start\r\n */\r\nfunction startRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to startRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.start();\r\n    trackRecorder.startTime = new Date();\r\n}\r\n\r\n/**\r\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also try to update the name\r\n * @param trackRecorder the TrackRecorder to stop\r\n */\r\nfunction stopRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to stopRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.stop();\r\n}\r\n\r\n/**\r\n * Determines which kind of audio recording the browser supports\r\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\r\n */\r\nfunction determineCorrectFileType() {\r\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\r\n        return AUDIO_WEBM;\r\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\r\n        return AUDIO_OGG;\r\n    }\r\n    throw new Error(\r\n        'unable to create a MediaRecorder with the right mimetype!');\r\n}\r\n\r\n/**\r\n * main exported object of the file, holding all\r\n * relevant functions and variables for the outside world\r\n * @param jitsiConference the jitsiConference which this object\r\n * is going to record\r\n */\r\nfunction AudioRecorder(jitsiConference) {\r\n    // array of TrackRecorders, where each trackRecorder\r\n    // holds the JitsiTrack, MediaRecorder and recorder data\r\n    this.recorders = [];\r\n\r\n    // get which file type is supported by the current browser\r\n    this.fileType = determineCorrectFileType();\r\n\r\n    // boolean flag for active recording\r\n    this.isRecording = false;\r\n\r\n    // the jitsiconference the object is recording\r\n    this.jitsiConference = jitsiConference;\r\n}\r\n\r\n/**\r\n * Add the exported module so that it can be accessed by other files\r\n */\r\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\r\n\r\n/**\r\n * Adds a new TrackRecorder object to the array.\r\n *\r\n * @param track the track potentially holding an audio stream\r\n */\r\nAudioRecorder.prototype.addTrack = function(track) {\r\n    if (track.isAudioTrack()) {\r\n        // create the track recorder\r\n        const trackRecorder = this.instantiateTrackRecorder(track);\r\n\r\n        // push it to the local array of all recorders\r\n\r\n        this.recorders.push(trackRecorder);\r\n\r\n        // update the name of the trackRecorders\r\n        this.updateNames();\r\n\r\n        // If we're already recording, immediately start recording this new\r\n        // track.\r\n        if (this.isRecording) {\r\n            startRecorder(trackRecorder);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\r\n * data array for the trackRecorder.\r\n * @param track the JitsiTrack holding the audio MediaStream(s)\r\n */\r\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\r\n    const trackRecorder = new TrackRecorder(track);\r\n\r\n    // Create a new stream which only holds the audio track\r\n    const originalStream = trackRecorder.track.getOriginalStream();\r\n    const stream = new MediaStream();\r\n\r\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\r\n\r\n    // Create the MediaRecorder\r\n    trackRecorder.recorder = new MediaRecorder(stream,\r\n        { mimeType: this.fileType });\r\n\r\n    // array for holding the recorder data. Resets it when\r\n    // audio already has been recorder once\r\n    trackRecorder.data = [];\r\n\r\n    // function handling a dataEvent, e.g the stream gets new data\r\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\r\n        if (dataEvent.data.size > 0) {\r\n            trackRecorder.data.push(dataEvent.data);\r\n        }\r\n    };\r\n\r\n    return trackRecorder;\r\n};\r\n\r\n/**\r\n * Notifies the module that a specific track has stopped, e.g participant left\r\n * the conference.\r\n * if the recording has not started yet, the TrackRecorder will be removed from\r\n * the array. If the recording has started, the recorder will stop recording\r\n * but not removed from the array so that the recorded stream can still be\r\n * accessed\r\n *\r\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\r\n */\r\nAudioRecorder.prototype.removeTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        return;\r\n    }\r\n\r\n    const array = this.recorders;\r\n    let i;\r\n\r\n    for (i = 0; i < array.length; i++) {\r\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\r\n            const recorderToRemove = array[i];\r\n\r\n            if (this.isRecording) {\r\n                stopRecorder(recorderToRemove);\r\n            } else {\r\n                // remove the TrackRecorder from the array\r\n                array.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // make sure the names are up to date\r\n    this.updateNames();\r\n};\r\n\r\n/**\r\n * Tries to update the name value of all TrackRecorder in the array.\r\n * If it hasn't changed,it will keep the exiting name. If it changes to a\r\n * undefined value, the old value will also be kept.\r\n */\r\nAudioRecorder.prototype.updateNames = function() {\r\n    const conference = this.jitsiConference;\r\n\r\n    this.recorders.forEach(trackRecorder => {\r\n        if (trackRecorder.track.isLocal()) {\r\n            trackRecorder.name = 'the transcriber';\r\n        } else {\r\n            const id = trackRecorder.track.getParticipantId();\r\n            const participant = conference.getParticipantById(id);\r\n            const newName = participant.getDisplayName();\r\n\r\n            if (newName !== 'undefined') {\r\n                trackRecorder.name = newName;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.start = function() {\r\n    if (this.isRecording) {\r\n        throw new Error('audiorecorder is already recording');\r\n    }\r\n\r\n    // set boolean isRecording flag to true so if new participants join the\r\n    // conference, that track can instantly start recording as well\r\n    this.isRecording = true;\r\n\r\n    // start all the mediaRecorders\r\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\r\n\r\n    // log that recording has started\r\n    console.log(\r\n        `Started the recording of the audio. There are currently ${\r\n            this.recorders.length} recorders active.`);\r\n};\r\n\r\n/**\r\n * Stops the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.stop = function() {\r\n    // set the boolean flag to false\r\n    this.isRecording = false;\r\n\r\n    // stop all recorders\r\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\r\n    console.log('stopped recording');\r\n};\r\n\r\n/**\r\n * link hacking to download all recorded audio streams\r\n */\r\nAudioRecorder.prototype.download = function() {\r\n    this.recorders.forEach(trackRecorder => {\r\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n\r\n        document.body.appendChild(a);\r\n        a.style = 'display: none';\r\n        a.href = url;\r\n        a.download = `test.${this.fileType.split('/')[1]}`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n\r\n/**\r\n * returns the audio files of all recorders as an array of objects,\r\n * which include the name of the owner of the track and the starting time stamp\r\n * @returns {Array} an array of RecordingResult objects\r\n */\r\nAudioRecorder.prototype.getRecordingResults = function() {\r\n    if (this.isRecording) {\r\n        throw new Error(\r\n            'cannot get blobs because the AudioRecorder is still recording!');\r\n    }\r\n\r\n    // make sure the names are up to date before sending them off\r\n    this.updateNames();\r\n\r\n    const array = [];\r\n\r\n    this.recorders.forEach(\r\n        recorder =>\r\n            array.push(\r\n                new RecordingResult(\r\n                    new Blob(recorder.data, { type: this.fileType }),\r\n                    recorder.name,\r\n                    recorder.startTime)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Gets the mime type of the recorder audio\r\n * @returns {String} the mime type of the recorder audio\r\n */\r\nAudioRecorder.prototype.getFileType = function() {\r\n    return this.fileType;\r\n};\r\n\r\n/**\r\n * export the main object AudioRecorder\r\n */\r\nmodule.exports = AudioRecorder;\r\n","/* eslint-disable max-params */\r\n\r\n/**\r\n * This object stores variables needed around the recording of an audio stream\r\n * and passing this recording along with additional information along to\r\n * different processes\r\n * @param blob the recording audio stream as a single blob\r\n * @param name the name of the person of the audio stream\r\n * @param startTime the time in UTC when recording of the audiostream started\r\n * @param wordArray the recorder audio stream transcribed as an array of Word\r\n *                  objects\r\n */\r\nconst RecordingResult = function(blob, name, startTime, wordArray) {\r\n    this.blob = blob;\r\n    this.name = name;\r\n    this.startTime = startTime;\r\n    this.wordArray = wordArray;\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = RecordingResult;\r\n","const AudioRecorder = require('./audioRecorder');\r\nconst SphinxService = require(\r\n    './transcriptionServices/SphinxTranscriptionService');\r\n\r\nconst BEFORE_STATE = 'before';\r\nconst RECORDING_STATE = 'recording';\r\nconst TRANSCRIBING_STATE = 'transcribing';\r\nconst FINISHED_STATE = 'finished';\r\n\r\n// the amount of characters each line in the transcription will have\r\nconst MAXIMUM_SENTENCE_LENGTH = 80;\r\n\r\n/**\r\n * This is the main object for handing the Transcription. It interacts with\r\n * the audioRecorder to record every person in a conference and sends the\r\n * recorder audio to a transcriptionService. The returned speech-to-text result\r\n * will be merged to create a transcript\r\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\r\n */\r\nfunction Transcriber() {\r\n    // the object which can record all audio in the conference\r\n    this.audioRecorder = new AudioRecorder();\r\n\r\n    // this object can send the recorder audio to a speech-to-text service\r\n    this.transcriptionService = new SphinxService();\r\n\r\n    // holds a counter to keep track if merging can start\r\n    this.counter = null;\r\n\r\n    // holds the date when transcription started which makes it possible\r\n    // to calculate the offset between recordings\r\n    this.startTime = null;\r\n\r\n    // will hold the transcription once it is completed\r\n    this.transcription = null;\r\n\r\n    // this will be a method which will be called once the transcription is done\r\n    // with the transcription as parameter\r\n    this.callback = null;\r\n\r\n    // stores all the retrieved speech-to-text results to merge together\r\n    // this value will store an Array<Word> object\r\n    this.results = [];\r\n\r\n    // Stores the current state of the transcription process\r\n    this.state = BEFORE_STATE;\r\n\r\n    // Used in the updateTranscription method to add a new line when the\r\n    // sentence becomes to long\r\n    this.lineLength = 0;\r\n}\r\n\r\n/**\r\n * Method to start the transcription process. It will tell the audioRecorder\r\n * to start storing all audio streams and record the start time for merging\r\n * purposes\r\n */\r\nTranscriber.prototype.start = function start() {\r\n    if (this.state !== BEFORE_STATE) {\r\n        throw new Error(\r\n            `The transcription can only start when it's in the \"${\r\n                BEFORE_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n    this.state = RECORDING_STATE;\r\n    this.audioRecorder.start();\r\n    this.startTime = new Date();\r\n};\r\n\r\n/**\r\n * Method to stop the transcription process. It will tell the audioRecorder to\r\n * stop, and get all the recorded audio to send it to the transcription service\r\n\r\n * @param callback a callback which will receive the transcription\r\n */\r\nTranscriber.prototype.stop = function stop(callback) {\r\n    if (this.state !== RECORDING_STATE) {\r\n        throw new Error(\r\n            `The transcription can only stop when it's in the \"${\r\n                RECORDING_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    // stop the recording\r\n    console.log('stopping recording and sending audio files');\r\n    this.audioRecorder.stop();\r\n\r\n    // and send all recorded audio to the transcription service\r\n    const callBack = blobCallBack.bind(null, this);\r\n\r\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\r\n        this.transcriptionService.send(recordingResult, callBack);\r\n        this.counter++;\r\n    });\r\n\r\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\r\n    this.state = TRANSCRIBING_STATE;\r\n\r\n    // and store the callback for later\r\n    this.callback = callback;\r\n};\r\n\r\n/**\r\n * This method gets the answer from the transcription service, calculates the\r\n * offset and adds is to every Word object. It will also start the merging\r\n * when every send request has been received\r\n *\r\n * note: Make sure to bind this as a Transcription object\r\n * @param {Transcriber} transcriber the transcriber instance\r\n * @param {RecordingResult} answer a RecordingResult object with a defined\r\n * WordArray\r\n */\r\nfunction blobCallBack(transcriber, answer) {\r\n    console.log(\r\n        'retrieved an answer from the transcription service. The answer has an'\r\n            + ` array of length: ${answer.wordArray.length}`);\r\n\r\n    // first add the offset between the start of the transcription and\r\n    // the start of the recording to all start and end times\r\n    if (answer.wordArray.length > 0) {\r\n        let offset = answer.startTime.getUTCMilliseconds()\r\n            - transcriber.startTime.getUTCMilliseconds();\r\n\r\n        // transcriber time will always be earlier\r\n\r\n        if (offset < 0) {\r\n            offset = 0; // presume 0 if it somehow not earlier\r\n        }\r\n\r\n        let array = '[';\r\n\r\n        answer.wordArray.forEach(wordObject => {\r\n            wordObject.begin += offset;\r\n            wordObject.end += offset;\r\n            array += `${wordObject.word},`;\r\n        });\r\n        array += ']';\r\n        console.log(array);\r\n\r\n        // give a name value to the Array object so that the merging can access\r\n        // the name value without having to use the whole recordingResult object\r\n        // in the algorithm\r\n        answer.wordArray.name = answer.name;\r\n    }\r\n\r\n    // then store the array and decrease the counter\r\n    transcriber.results.push(answer.wordArray);\r\n    transcriber.counter--;\r\n    console.log(`current counter: ${transcriber.counter}`);\r\n\r\n    // and check if all results have been received.\r\n    transcriber.maybeMerge();\r\n}\r\n\r\n/**\r\n * this method will check if the counter is zero. If it is, it will call\r\n * the merging method\r\n */\r\nTranscriber.prototype.maybeMerge = function() {\r\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\r\n        // make sure to include the events in the result arrays before\r\n        // merging starts\r\n        this.merge();\r\n    }\r\n};\r\n\r\n/**\r\n * This method will merge all speech-to-text arrays together in one\r\n * readable transcription string\r\n */\r\nTranscriber.prototype.merge = function() {\r\n    console.log(\r\n        `starting merge process!\\n The length of the array: ${\r\n            this.results.length}`);\r\n    this.transcription = '';\r\n\r\n    // the merging algorithm will look over all Word objects who are at pos 0 in\r\n    // every array. It will then select the one closest in time to the\r\n    // previously placed word, while removing the selected word from its array\r\n    // note: words can be skipped the skipped word's begin and end time somehow\r\n    // end up between the closest word start and end time\r\n    const arrays = this.results;\r\n\r\n    // arrays of Word objects\r\n    const potentialWords = []; // array of the first Word objects\r\n    // check if any arrays are already empty and remove them\r\n\r\n    hasPopulatedArrays(arrays);\r\n\r\n    // populate all the potential Words for a first time\r\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\r\n\r\n    // keep adding words to transcription until all arrays are exhausted\r\n    while (hasPopulatedArrays(arrays)) {\r\n        // first select the lowest array;\r\n        let lowestWordArray = arrays[0];\r\n\r\n        arrays.forEach(wordArray => {\r\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\r\n                lowestWordArray = wordArray;\r\n            }\r\n        });\r\n\r\n        // put the word in the transcription\r\n        let wordToAdd = lowestWordArray.shift();\r\n\r\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\r\n\r\n        // keep going until a word in another array has a smaller time\r\n        // or the array is empty\r\n        while (lowestWordArray.length > 0) {\r\n            let foundSmaller = false;\r\n            const wordToCompare = lowestWordArray[0].begin;\r\n\r\n            arrays.forEach(wordArray => {\r\n                if (wordArray[0].begin < wordToCompare) {\r\n                    foundSmaller = true;\r\n                }\r\n            });\r\n\r\n            // add next word if no smaller time has been found\r\n            if (foundSmaller) {\r\n                break;\r\n            }\r\n\r\n            wordToAdd = lowestWordArray.shift();\r\n            this.updateTranscription(wordToAdd, null);\r\n        }\r\n\r\n    }\r\n\r\n    // set the state to finished and do the necessary left-over tasks\r\n    this.state = FINISHED_STATE;\r\n    if (this.callback) {\r\n        this.callback(this.transcription);\r\n    }\r\n};\r\n\r\n/**\r\n * Appends a word object to the transcription. It will make a new line with a\r\n * name if a name is specified\r\n * @param {Word} word the Word object holding the word to append\r\n * @param {String|null} name the name of a new speaker. Null if not applicable\r\n */\r\nTranscriber.prototype.updateTranscription = function(word, name) {\r\n    if (name !== undefined && name !== null) {\r\n        this.transcription += `\\n${name}:`;\r\n        this.lineLength = name.length + 1; // +1 for the semi-colon\r\n    }\r\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\r\n        this.transcription += '\\n    ';\r\n        this.lineLength = 4; // because of the 4 spaces after the new line\r\n    }\r\n    this.transcription += ` ${word.word}`;\r\n    this.lineLength += word.word.length + 1; // +1 for the space\r\n};\r\n\r\n/**\r\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\r\n * All zero-element arrays inside will be removed\r\n * If any non-zero-element arrays are found, the method will return true.\r\n * otherwise it will return false\r\n * @param {Array<Array>} twoDimensionalArray the array to check\r\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\r\n */\r\nfunction hasPopulatedArrays(twoDimensionalArray) {\r\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\r\n        if (twoDimensionalArray[i].length === 0) {\r\n            twoDimensionalArray.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    return twoDimensionalArray.length > 0;\r\n}\r\n\r\n/**\r\n * Push a word to the right location in a sorted array. The array is sorted\r\n * from lowest to highest start time. Every word is stored in an object which\r\n * includes the name of the person saying the word.\r\n *\r\n * @param {Array<Word>} array the sorted array to push to\r\n * @param {Word} word the word to push into the array\r\n */\r\nfunction pushWordToSortedArray(array, word) {\r\n    if (array.length === 0) {\r\n        array.push(word);\r\n    } else {\r\n        if (array[array.length - 1].begin <= word.begin) {\r\n            array.push(word);\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (word.begin < array[i].begin) {\r\n                array.splice(i, 0, word);\r\n\r\n                return;\r\n            }\r\n        }\r\n        array.push(word); // fail safe\r\n    }\r\n}\r\n\r\n/**\r\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\r\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\r\n * audiostream, it will not be added by the audioRecorder\r\n * @param {JitsiTrack} track the track to give to the audioRecorder\r\n */\r\nTranscriber.prototype.addTrack = function(track) {\r\n    this.audioRecorder.addTrack(track);\r\n};\r\n\r\n/**\r\n * Remove the given track from the auioRecorder\r\n * @param track\r\n */\r\nTranscriber.prototype.removeTrack = function(track) {\r\n    this.audioRecorder.removeTrack(track);\r\n};\r\n\r\n/**\r\n * Will return the created transcription if it's avialable or throw an error\r\n * when it's not done yet\r\n * @returns {String} the transcription as a String\r\n */\r\nTranscriber.prototype.getTranscription = function() {\r\n    if (this.state !== FINISHED_STATE) {\r\n        throw new Error(\r\n            `The transcription can only be retrieved when it's in the \"${\r\n                FINISHED_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    return this.transcription;\r\n};\r\n\r\n/**\r\n * Returns the current state of the transcription process\r\n */\r\nTranscriber.prototype.getState = function() {\r\n    return this.state;\r\n};\r\n\r\n/**\r\n * Resets the state to the \"before\" state, such that it's again possible to\r\n * call the start method\r\n */\r\nTranscriber.prototype.reset = function() {\r\n    this.state = BEFORE_STATE;\r\n    this.counter = null;\r\n    this.transcription = null;\r\n    this.startTime = null;\r\n    this.callback = null;\r\n    this.results = [];\r\n    this.lineLength = 0;\r\n};\r\n\r\nmodule.exports = Transcriber;\r\n","/**\r\n * Abstract class representing an interface to implement a speech-to-text\r\n * service on.\r\n */\r\nconst TranscriptionService = function() {\r\n    throw new Error('TranscriptionService is abstract and cannot be'\r\n        + 'created');\r\n};\r\n\r\n/**\r\n * This method can be used to send the recorder audio stream and\r\n * retrieve the answer from the transcription service from the callback\r\n *\r\n * @param {RecordingResult} recordingResult a recordingResult object which\r\n * includes the recorded audio stream as a blob\r\n * @param {Function} callback  which will retrieve the a RecordingResult with\r\n *        the answer as a WordArray\r\n */\r\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\r\n    this.sendRequest(recordingResult.blob, response => {\r\n        if (this.verify(response)) {\r\n            recordingResult.wordArray = this.formatResponse(response);\r\n        } else {\r\n            console.log('the retrieved response from the server is not valid!');\r\n            recordingResult.wordArray = [];\r\n        }\r\n        callback(recordingResult);\r\n    });\r\n};\r\n\r\n/**\r\n * Abstract method which will rend the recorder audio stream to the implemented\r\n * transcription service and will retrieve an answer, which will be\r\n * called on the given callback method\r\n *\r\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\r\n * @param {function} callback function which will retrieve the answer\r\n *                            from the service\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\r\n    throw new Error('TranscriptionService.sendRequest is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will parse the output from the implemented\r\n * transcription service to the expected format\r\n *\r\n * The transcriber class expect an array of word objects, where each word\r\n * object is one transcribed word by the service.\r\n *\r\n * The expected output of this method is an array of word objects, in\r\n * the correct order. That is, the first object in the array is the first word\r\n * being said, and the last word in the array is the last word being said\r\n *\r\n * @param response the answer from the speech-to-text server which needs to be\r\n *                 formatted\r\n * @return {Array<Word>} an array of Word objects\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.formatResponse = function(response) {\r\n    throw new Error('TranscriptionService.format is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will verify that the response from the server is valid\r\n *\r\n * @param response the response from the server\r\n * @return {boolean} true if response is valid, false otherwise\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.verify = function(response) {\r\n    throw new Error('TranscriptionService.verify is abstract');\r\n};\r\n\r\nmodule.exports = TranscriptionService;\r\n","/* global config */\r\n\r\nconst Word = require('../word');\r\n\r\nconst audioRecorder = require('./../audioRecorder');\r\nconst TranscriptionService = require('./AbstractTranscriptionService');\r\n\r\n/**\r\n * Implements a TranscriptionService for a Sphinx4 http server\r\n */\r\nconst SphinxService = function() {\r\n    // set the correct url\r\n    this.url = getURL();\r\n};\r\n\r\n/**\r\n * Subclass of AbstractTranscriptionService\r\n */\r\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\r\n\r\n/**\r\n * Set the right constructor\r\n */\r\nSphinxService.constructor = SphinxService;\r\n\r\n/**\r\n * Overrides the sendRequest method from AbstractTranscriptionService\r\n * it will send the audio stream the a Sphinx4 server to get the transcription\r\n *\r\n * @param audioFileBlob the recorder audio stream an a single Blob\r\n * @param callback the callback function retrieving the server response\r\n */\r\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\r\n    console.log(`sending an audio file  to ${this.url}`);\r\n    console.log(`the audio file being sent: ${audioFileBlob}`);\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.onreadystatechange = function() {\r\n        if (request.readyState === XMLHttpRequest.DONE\r\n            && request.status === 200) {\r\n            callback(request.responseText);\r\n        } else if (request.readyState === XMLHttpRequest.DONE) {\r\n            throw new Error(\r\n                `unable to accept response from sphinx server. status: ${\r\n                    request.status}`);\r\n        }\r\n\r\n        // if not ready no point to throw an error\r\n    };\r\n    request.open('POST', this.url);\r\n    request.setRequestHeader('Content-Type',\r\n        audioRecorder.determineCorrectFileType());\r\n    request.send(audioFileBlob);\r\n    console.log(`send ${audioFileBlob}`);\r\n};\r\n\r\n/**\r\n * Overrides the formatResponse method from AbstractTranscriptionService\r\n * It will parse the answer from the server in the expected format\r\n *\r\n * @param response the JSON body retrieved from the Sphinx4 server\r\n */\r\nSphinxService.prototype.formatResponse = function(response) {\r\n    const result = JSON.parse(response).objects;\r\n\r\n    // make sure to delete the session id object, which is always\r\n    // the first value in the JSON array\r\n\r\n    result.shift();\r\n    const array = [];\r\n\r\n    result.forEach(\r\n        word =>\r\n            word.filler\r\n                || array.push(new Word(word.word, word.start, word.end)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * checks wether the reply is empty, or doesn't contain a correct JSON object\r\n * @param response the server response\r\n * @return {boolean} whether the response is valid\r\n */\r\nSphinxService.prototype.verify = function(response) {\r\n    console.log(`response from server:${response.toString()}`);\r\n\r\n    // test if server responded with a string object\r\n    if (typeof response !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // test if the string can be parsed into valid JSON\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return false;\r\n    }\r\n\r\n    // check if the JSON has a \"objects\" value\r\n    if (json.objects === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // get the \"objects\" value and check for a session ID\r\n    const array = json.objects;\r\n\r\n    if (!(array[0] && array[0]['session-id'])) {\r\n        return false;\r\n    }\r\n\r\n    // everything seems to be in order\r\n    return true;\r\n};\r\n\r\n/**\r\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\r\n * it will throw an error\r\n *\r\n * @returns {string} the URL to the sphinx4 server\r\n */\r\nfunction getURL() {\r\n    const message = 'config does not contain an url to a Sphinx4 https server';\r\n\r\n    if (config.sphinxURL === undefined) {\r\n        console.log(message);\r\n    } else {\r\n        const toReturn = config.sphinxURL;\r\n\r\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\r\n            return toReturn;\r\n        }\r\n        console.log(message);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = SphinxService;\r\n","/**\r\n * An object representing a transcribed word, with some additional information\r\n * @param word the word\r\n * @param begin the time the word was started being uttered\r\n * @param end the time the word stopped being uttered\r\n */\r\nconst Word = function(word, begin, end) {\r\n    this.word = word;\r\n    this.begin = begin;\r\n    this.end = end;\r\n};\r\n\r\n/**\r\n * Get the string representation of the word\r\n * @returns {*} the word as a string\r\n */\r\nWord.prototype.getWord = function() {\r\n    return this.word;\r\n};\r\n\r\n/**\r\n * Get the time the word started being uttered\r\n * @returns {*} the start time as an integer\r\n */\r\nWord.prototype.getBeginTime = function() {\r\n    return this.begin;\r\n};\r\n\r\n/**\r\n * Get the time the word stopped being uttered\r\n * @returns {*} the end time as an integer\r\n */\r\nWord.prototype.getEndTime = function() {\r\n    return this.end;\r\n};\r\n\r\nmodule.exports = Word;\r\n","const AuthUtil = {\r\n    /**\r\n     * Creates the URL pointing to JWT token authentication service. It is\r\n     * formatted from the 'urlPattern' argument which can contain the following\r\n     * constants:\r\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\r\n     * argument to this method.\r\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\r\n     * the role upgrade scenario, where user connects from anonymous domain and\r\n     * then gets upgraded to the moderator by logging-in from the popup window.\r\n     *\r\n     * @param urlPattern a URL pattern pointing to the login service\r\n     * @param roomName the name of the conference room for which the user will\r\n     * be authenticated\r\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\r\n     * upgrade scenario, where the user logs-in from the popup window in order\r\n     * to have the moderator rights granted\r\n     *\r\n     * @returns {string|null} the URL pointing to JWT login service or\r\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\r\n     * constructed.\r\n     */\r\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\r\n        const url = urlPattern;\r\n\r\n        if (typeof url !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        return url.replace('{room}', roomName)\r\n            .replace('{roleUpgrade}', roleUpgrade === true);\r\n    }\r\n};\r\n\r\nmodule.exports = AuthUtil;\r\n","/**\r\n * Implements utility to forward events from one eventEmitter to another.\r\n * @param src {object} instance of EventEmitter or another class that implements\r\n * addListener method which will register listener to EventEmitter instance.\r\n * @param dest {object} instance of EventEmitter or another class that\r\n * implements emit method which will emit an event.\r\n */\r\nfunction EventEmitterForwarder(src, dest) {\r\n    if (!src || !dest || typeof src.addListener !== 'function'\r\n        || typeof dest.emit !== 'function') {\r\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\r\n    }\r\n    this.src = src;\r\n    this.dest = dest;\r\n}\r\n\r\n/**\r\n * Adds event to be forwarded from src to dest.\r\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\r\n * for.\r\n * @param dstEvent {string} the event that will be fired from dest.\r\n * @param arguments all other passed arguments are going to be fired with\r\n * dstEvent.\r\n */\r\nEventEmitterForwarder.prototype.forward = function(...args) {\r\n    const srcEvent = args[0];\r\n\r\n    // This will be the \"this\" value for emit function.\r\n\r\n    args[0] = this.dest;\r\n\r\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\r\n    this.src.addListener(\r\n        srcEvent,\r\n        Function.prototype.bind.apply(this.dest.emit, args));\r\n};\r\n\r\nmodule.exports = EventEmitterForwarder;\r\n","/**\r\n * This utility class defines custom onerror and onunhandledrejection functions.\r\n * The custom error handlers respect the previously-defined error handlers.\r\n * GlobalOnErrorHandler class provides utilities to add many custom error\r\n * handlers and to execute the error handlers directly.\r\n */\r\n\r\n\r\n/**\r\n * List with global error handlers that will be executed.\r\n */\r\nconst handlers = [];\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnErrorHandler = window.onerror;\r\n\r\n/**\r\n * Custom error handler that calls the old global error handler and executes\r\n * all handlers that were previously added.\r\n */\r\nfunction JitsiGlobalErrorHandler(...args) {\r\n    handlers.forEach(handler => handler(...args));\r\n    oldOnErrorHandler && oldOnErrorHandler(...args);\r\n}\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnUnhandledRejection = window.onunhandledrejection;\r\n\r\n/**\r\n * Custom handler that calls the old global handler and executes all handlers\r\n * that were previously added. This handler handles rejected Promises.\r\n */\r\nfunction JitsiGlobalUnhandledRejection(event) {\r\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\r\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\r\n}\r\n\r\n// Setting the custom error handlers.\r\nwindow.onerror = JitsiGlobalErrorHandler;\r\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\r\n\r\nconst GlobalOnErrorHandler = {\r\n    /**\r\n     * Adds new error handlers.\r\n     * @param handler the new handler.\r\n     */\r\n    addHandler(handler) {\r\n        handlers.push(handler);\r\n    },\r\n\r\n    /**\r\n     * Calls the global error handler if there is one.\r\n     * @param error the error to pass to the error handler\r\n     */\r\n    callErrorHandler(error) {\r\n        const errHandler = window.onerror;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(null, null, null, null, error);\r\n    },\r\n\r\n    /**\r\n     * Calls the global rejection handler if there is one.\r\n     * @param error the error to pass to the rejection handler.\r\n     */\r\n    callUnhandledRejectionHandler(error) {\r\n        const errHandler = window.onunhandledrejection;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(error);\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = GlobalOnErrorHandler;\r\n","/**\r\n * @const\r\n */\r\nconst ALPHANUM\r\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n/**\r\n * Hexadecimal digits.\r\n * @const\r\n */\r\nconst HEX_DIGITS = '0123456789abcdef';\r\n\r\n/**\r\n * Generates random int within the range [min, max]\r\n * @param min the minimum value for the generated number\r\n * @param max the maximum value for the generated number\r\n * @returns random int number\r\n */\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Get random element from array or string.\r\n * @param {Array|string} arr source\r\n * @returns array element or string character\r\n */\r\nfunction randomElement(arr) {\r\n    return arr[randomInt(0, arr.length - 1)];\r\n}\r\n\r\n/**\r\n * Generate random alphanumeric string.\r\n * @param {number} length expected string length\r\n * @returns {string} random string of specified length\r\n */\r\nfunction randomAlphanumStr(length) {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n        result += randomElement(ALPHANUM);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Exported interface.\r\n */\r\nconst RandomUtil = {\r\n    /**\r\n     * Returns a random hex digit.\r\n     * @returns {*}\r\n     */\r\n    randomHexDigit() {\r\n        return randomElement(HEX_DIGITS);\r\n    },\r\n\r\n    /**\r\n     * Returns a random string of hex digits with length 'len'.\r\n     * @param len the length.\r\n     */\r\n    randomHexString(len) {\r\n        let ret = '';\r\n\r\n        while (len--) { // eslint-disable-line no-param-reassign\r\n            ret += this.randomHexDigit();\r\n        }\r\n\r\n        return ret;\r\n    },\r\n    randomElement,\r\n    randomAlphanumStr,\r\n    randomInt\r\n};\r\n\r\nmodule.exports = RandomUtil;\r\n","const currentExecutingScript = require('current-executing-script');\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Implements utility functions which facilitate the dealing with scripts such\r\n * as the download and execution of a JavaScript file.\r\n */\r\nconst ScriptUtil = {\r\n    /**\r\n     * Loads a script from a specific source.\r\n     *\r\n     * @param src the source from the which the script is to be (down)loaded\r\n     * @param async true to asynchronously load the script or false to\r\n     * synchronously load the script\r\n     * @param prepend true to schedule the loading of the script as soon as\r\n     * possible or false to schedule the loading of the script at the end of the\r\n     * scripts known at the time\r\n     * @param relativeURL whether we need load the library from url relative\r\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\r\n     * library from different location than the app that is using it\r\n     * @param loadCallback on load callback function\r\n     * @param errorCallback callback to be called on error loading the script\r\n     */\r\n    loadScript(\r\n            src,\r\n            async,\r\n            prepend,\r\n            relativeURL,\r\n            loadCallback,\r\n            errorCallback) {\r\n        const d = document;\r\n        const tagName = 'script';\r\n        const script = d.createElement(tagName);\r\n        const referenceNode = d.getElementsByTagName(tagName)[0];\r\n\r\n        script.async = async;\r\n\r\n        if (relativeURL) {\r\n            // finds the src url of the current loaded script\r\n            // and use it as base of the src supplied argument\r\n            const scriptEl = currentExecutingScript();\r\n\r\n            if (scriptEl) {\r\n                const scriptSrc = scriptEl.src;\r\n                const baseScriptSrc\r\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\r\n\r\n                if (scriptSrc && baseScriptSrc) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    src = baseScriptSrc + src;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loadCallback) {\r\n            script.onload = loadCallback;\r\n        }\r\n        if (errorCallback) {\r\n            script.onerror = errorCallback;\r\n        }\r\n\r\n        script.src = src;\r\n        if (prepend) {\r\n            referenceNode.parentNode.insertBefore(script, referenceNode);\r\n        } else {\r\n            referenceNode.parentNode.appendChild(script);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = ScriptUtil;\r\n","/**\r\n * Implements a simple hash code for a string (see\r\n * https://en.wikipedia.org/wiki/Java_hashCode()).\r\n *\r\n * @param {string} The string to return a hash of.\r\n * @return {Number} the integer hash code of the string.\r\n */\r\nfunction integerHash(string) {\r\n    if (!string) {\r\n        return 0;\r\n    }\r\n\r\n    let char, hash = 0, i;\r\n\r\n    for (i = 0; i < string.length; i++) {\r\n        char = string.charCodeAt(i);\r\n        hash += char * Math.pow(31, string.length - 1 - i);\r\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nmodule.exports = { integerHash };\r\n","const RandomUtil = require('./RandomUtil');\r\n\r\n/**\r\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\r\n * MIT License\r\n * http://github.com/marak/faker.js/\r\n *\r\n * @const\r\n */\r\nconst names = [\r\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\r\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\r\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\r\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\r\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\r\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\r\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\r\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\r\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\r\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\r\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\r\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\r\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\r\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\r\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\r\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\r\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\r\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\r\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\r\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\r\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\r\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\r\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\r\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\r\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\r\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\r\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\r\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\r\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\r\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\r\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\r\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\r\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\r\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\r\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\r\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\r\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\r\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\r\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\r\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\r\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\r\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\r\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\r\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\r\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\r\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\r\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\r\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\r\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\r\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\r\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\r\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\r\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\r\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\r\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\r\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\r\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\r\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\r\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\r\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\r\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\r\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\r\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\r\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\r\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\r\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\r\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\r\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\r\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\r\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\r\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\r\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\r\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\r\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\r\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\r\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\r\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\r\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\r\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\r\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\r\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\r\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\r\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\r\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\r\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\r\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\r\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\r\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\r\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\r\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\r\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\r\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\r\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\r\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\r\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\r\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\r\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\r\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\r\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\r\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\r\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\r\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\r\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\r\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\r\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\r\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\r\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\r\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\r\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\r\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\r\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\r\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\r\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\r\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\r\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\r\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\r\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\r\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\r\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\r\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\r\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\r\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\r\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\r\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\r\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\r\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\r\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\r\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\r\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\r\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\r\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\r\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\r\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\r\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\r\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\r\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\r\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\r\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\r\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\r\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\r\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\r\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\r\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\r\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\r\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\r\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\r\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\r\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\r\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\r\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\r\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\r\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\r\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\r\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\r\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\r\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\r\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\r\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\r\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\r\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\r\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\r\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\r\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\r\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\r\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\r\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\r\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\r\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\r\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\r\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\r\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\r\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\r\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\r\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\r\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\r\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\r\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\r\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\r\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\r\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\r\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\r\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\r\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\r\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\r\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\r\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\r\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\r\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\r\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\r\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\r\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\r\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\r\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\r\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\r\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\r\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\r\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\r\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\r\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\r\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\r\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\r\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\r\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\r\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\r\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\r\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\r\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\r\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\r\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\r\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\r\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\r\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\r\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\r\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\r\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\r\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\r\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\r\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\r\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\r\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\r\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\r\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\r\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\r\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\r\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\r\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\r\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\r\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\r\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\r\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\r\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\r\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\r\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\r\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\r\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\r\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\r\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\r\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\r\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\r\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\r\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\r\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\r\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\r\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\r\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\r\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\r\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\r\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\r\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\r\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\r\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\r\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\r\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\r\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\r\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\r\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\r\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\r\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\r\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\r\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\r\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\r\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\r\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\r\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\r\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\r\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\r\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\r\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\r\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\r\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\r\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\r\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\r\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\r\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\r\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\r\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\r\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\r\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\r\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\r\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\r\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\r\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\r\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\r\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\r\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\r\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\r\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\r\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\r\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\r\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\r\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\r\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\r\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\r\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\r\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\r\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\r\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\r\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\r\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\r\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\r\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\r\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\r\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\r\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\r\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\r\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\r\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\r\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\r\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\r\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\r\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\r\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\r\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\r\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\r\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\r\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\r\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\r\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\r\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\r\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\r\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\r\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\r\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\r\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\r\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\r\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\r\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\r\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\r\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\r\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\r\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\r\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\r\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\r\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\r\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\r\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\r\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\r\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\r\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\r\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\r\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\r\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\r\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\r\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\r\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\r\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\r\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\r\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\r\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\r\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\r\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\r\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\r\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\r\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\r\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\r\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\r\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\r\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\r\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\r\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\r\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\r\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\r\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\r\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\r\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\r\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\r\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\r\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\r\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\r\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\r\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\r\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\r\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\r\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\r\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\r\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\r\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\r\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\r\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\r\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\r\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\r\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\r\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\r\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\r\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\r\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\r\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\r\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\r\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\r\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\r\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\r\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\r\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\r\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\r\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\r\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\r\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\r\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\r\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\r\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\r\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\r\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\r\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\r\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\r\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\r\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\r\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\r\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\r\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\r\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\r\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\r\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\r\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\r\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\r\n    'Zoila', 'Zola', 'Zora', 'Zula'\r\n];\r\n\r\n/**\r\n * Generate random username.\r\n * @returns {string} random username\r\n */\r\nfunction generateUsername() {\r\n    const name = RandomUtil.randomElement(names);\r\n    const suffix = RandomUtil.randomAlphanumStr(3);\r\n\r\n    return `${name}-${suffix}`;\r\n}\r\n\r\nmodule.exports = {\r\n    generateUsername\r\n};\r\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/* Copyright @ 2016-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\r\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\r\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function () {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return '[object with circular refs?]';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage = function (\r\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\r\n            typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i !== len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var timestamp = arguments[1];\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage = this.queue[this.queue.length - 1];\r\n        var prevMessageText = prevMessage && prevMessage.text;\r\n        if (prevMessageText === msg) {\r\n            prevMessage.count += 1;\r\n        } else {\r\n            this.queue.push({\r\n                text: msg,\r\n                timestamp: timestamp,\r\n                count: 1\r\n            });\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID = window.setTimeout(\r\n        this._flush.bind(\r\n            this, false /* do not force */, true /* reschedule */),\r\n        this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ );\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*jslint latedef:false*/\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * The global configuration options.\r\n */\r\nvar globalOptions = {};\r\n\r\n/**\r\n * Sets global options which will be used by all loggers. Changing these works\r\n * even after other loggers are created.\r\n */\r\nLogger.setGlobalOptions = function(options) {\r\n    globalOptions = options || {};\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 3) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo\r\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\r\n            getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            var logPrefixes = [];\r\n\r\n            logPrefixes.push(new Date().toISOString());\r\n\r\n            if (logger.id) {\r\n                logPrefixes.push(\"[\" + logger.id + \"]\");\r\n            }\r\n\r\n            if (callerInfo && callerInfo.methodName.length > 1) {\r\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\r\n            }\r\n\r\n            var fullLogParts = logPrefixes.concat(args);\r\n\r\n            l.bind(t).apply(t, fullLogParts);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param options optional configuration file for how the logger should behave.\r\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\r\n * method invocation should be included in the log. Defaults to false, so the\r\n * call site will be included.\r\n */\r\nfunction Logger(level, id, transports, options) {\r\n    this.id = id;\r\n    this.options = options || {};\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    */\r\n    setGlobalOptions: function(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, options) {\r\n        var logger = new Logger(curLevel, id, transports, options);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/* global module */\r\n/**\r\n * Enumeration of the video types that are signaled to the bridge\r\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\r\n */\r\nconst BridgeVideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The low fps desktop video type.\r\n     */\r\n    DESKTOP: 'desktop',\r\n\r\n    /**\r\n     * The high fps desktop video type.\r\n     */\r\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\r\n\r\n    /**\r\n     * Video type when no local source is present.\r\n     */\r\n    NONE: 'none'\r\n};\r\n\r\nmodule.exports = BridgeVideoType;\r\n","/**\r\n * The possible camera facing modes. For now support only 'user' and\r\n * 'environment' because 'left' and 'right' are not used anywhere in our\r\n * projects at the time of this writing. For more information please refer to\r\n * https://w3c.github.io/mediacapture-main/getusermedia.html\r\n * #def-constraint-facingMode.\r\n *\r\n * @enum {string}\r\n */\r\nconst CameraFacingMode = {\r\n    /**\r\n     * The mode which specifies the environment-facing camera.\r\n     */\r\n    ENVIRONMENT: 'environment',\r\n\r\n    /**\r\n     * The mode which specifies the user-facing camera.\r\n     */\r\n    USER: 'user'\r\n};\r\n\r\nmodule.exports = CameraFacingMode;\r\n","/* global module */\r\n/**\r\n * Enumeration of the codec mime types\r\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\r\n */\r\nconst CodecMimeType = {\r\n    /**\r\n     * The h264 codec mime type.\r\n     */\r\n    H264: 'h264',\r\n\r\n    /**\r\n     * The opus codec mime type.\r\n     */\r\n    OPUS: 'opus',\r\n\r\n    /**\r\n     * The vp8 codec mime type.\r\n     */\r\n    VP8: 'vp8',\r\n\r\n    /**\r\n     * The vp9 codec mime type.\r\n     */\r\n    VP9: 'vp9'\r\n\r\n};\r\n\r\nmodule.exports = CodecMimeType;\r\n","/* global module */\r\n/**\r\n * Enumeration of the media direction types.\r\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\r\n */\r\nconst MediaDirection = {\r\n    /**\r\n     * Media is send and receive is suspended.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Media is only received from remote peer.\r\n     */\r\n    RECVONLY: 'recvonly',\r\n\r\n    /**\r\n     * Media is only sent to the remote peer.\r\n     */\r\n    SENDONLY: 'sendonly',\r\n\r\n    /**\r\n     * Media is sent and received.\r\n     */\r\n    SENDRECV: 'sendrecv'\r\n};\r\n\r\nmodule.exports = MediaDirection;\r\n","const RTCEvents = {\r\n    /**\r\n     * Indicates error while create answer call.\r\n     */\r\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\r\n\r\n    /**\r\n     * Indicates error while create offer call.\r\n     */\r\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\r\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\r\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\r\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\r\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\r\n\r\n    /**\r\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\r\n     * Used to keep track of the granted permissions on browsers which don't\r\n     * support the Permissions API.\r\n     */\r\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\r\n\r\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\r\n\r\n    /**\r\n     * Event emitted when {@link RTC.setLastN} method is called to update with\r\n     * the new value set.\r\n     * The first argument is the value passed to {@link RTC.setLastN}.\r\n     */\r\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\r\n\r\n    /**\r\n     * Event emitted when ssrc for a local track is extracted and stored\r\n     * in {@link TraceablePeerConnection}.\r\n     * @param {JitsiLocalTrack} track which ssrc was updated\r\n     * @param {string} ssrc that was stored\r\n     */\r\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\r\n\r\n    /**\r\n     * The max enabled resolution of a local video track was changed.\r\n     */\r\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\r\n\r\n    TRACK_ATTACHED: 'rtc.track_attached',\r\n\r\n    /**\r\n     * Event fired when we remote track is added to the conference.\r\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\r\n     **/\r\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\r\n\r\n    /**\r\n     * Indicates that the remote track has been removed from the conference.\r\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\r\n     */\r\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\r\n\r\n    /**\r\n     * Indicates error while set local description.\r\n     */\r\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\r\n\r\n    /**\r\n     * Indicates error while set remote description.\r\n     */\r\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\r\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\r\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\r\n\r\n    /**\r\n     * Indicates that the list with available devices will change.\r\n     */\r\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\r\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\r\n\r\n    /**\r\n     * Indicates that a message from another participant is received on\r\n     * data channel.\r\n     */\r\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\r\n\r\n    /**\r\n     * Indicates that the remote endpoint stats have been received on data channnel.\r\n     */\r\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\r\n};\r\n\r\nmodule.exports = RTCEvents;\r\n","const Resolutions = {\r\n    '2160': {\r\n        width: 3840,\r\n        height: 2160\r\n    },\r\n    '4k': {\r\n        width: 3840,\r\n        height: 2160\r\n    },\r\n    '1080': {\r\n        width: 1920,\r\n        height: 1080\r\n    },\r\n    'fullhd': {\r\n        width: 1920,\r\n        height: 1080\r\n    },\r\n    '720': {\r\n        width: 1280,\r\n        height: 720\r\n    },\r\n    'hd': {\r\n        width: 1280,\r\n        height: 720\r\n    },\r\n    '540': {\r\n        width: 960,\r\n        height: 540\r\n    },\r\n    'qhd': {\r\n        width: 960,\r\n        height: 540\r\n    },\r\n    '480': {\r\n        width: 640,\r\n        height: 480\r\n    },\r\n    'vga': {\r\n        width: 640,\r\n        height: 480\r\n    },\r\n    '360': {\r\n        width: 640,\r\n        height: 360\r\n    },\r\n    '240': {\r\n        width: 320,\r\n        height: 240\r\n    },\r\n    '180': {\r\n        width: 320,\r\n        height: 180\r\n    }\r\n};\r\n\r\nmodule.exports = Resolutions;\r\n","/* global module */\r\n/**\r\n * Enumeration of the video types\r\n * @type {{CAMERA: string, DESKTOP: string}}\r\n */\r\nconst VideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The desktop video type.\r\n     */\r\n    DESKTOP: 'desktop'\r\n};\r\n\r\nmodule.exports = VideoType;\r\n","const AuthenticationEvents = {\r\n    /**\r\n     * Event callback arguments:\r\n     * function(authenticationEnabled, userIdentity)\r\n     * authenticationEnabled - indicates whether authentication has been enabled\r\n     *                         in this session\r\n     * userIdentity - if user has been logged in then it contains user name. If\r\n     *                contains 'null' or 'undefined' then user is not logged in.\r\n     */\r\n    IDENTITY_UPDATED: 'authentication.identity_updated'\r\n};\r\n\r\nmodule.exports = AuthenticationEvents;\r\n","const Constants = {\r\n    LOCAL_JID: 'local'\r\n};\r\n\r\nmodule.exports = Constants;\r\n","const XMPPEvents = {\r\n    /**\r\n     * Indicates error while adding ice candidate.\r\n     */\r\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\r\n\r\n    // Designates an event indicating that the focus has asked us to mute our\r\n    // audio.\r\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\r\n\r\n    // Designates an event indicating that the focus has asked us to disable our\r\n    // camera.\r\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\r\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\r\n    BRIDGE_DOWN: 'xmpp.bridge_down',\r\n\r\n    /**\r\n     * Triggered when 'session-accept' is received from the responder.\r\n     */\r\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\r\n\r\n    // Designates an event indicating that an offer (e.g. Jingle\r\n    // session-initiate) was received.\r\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\r\n\r\n    // Triggered when Jicofo kills our media session, this can happen while\r\n    // we're still in the MUC, when it decides to terminate the media session.\r\n    // For example when the session is idle for too long, because we're the only\r\n    // person in the conference room.\r\n    CALL_ENDED: 'xmpp.callended.jingle',\r\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\r\n\r\n    // The conference properties (as advertised by jicofo) have changed\r\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\r\n\r\n    /**\r\n     * This event is triggered when the ICE connects for the first time.\r\n     */\r\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\r\n\r\n    // Designates an event indicating that the connection to the XMPP server\r\n    // failed.\r\n    CONNECTION_FAILED: 'xmpp.connection.failed',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // interrupted. This should go to the RTC module.\r\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // restored. This should go to the RTC module.\r\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\r\n\r\n    // Designates an event indicating that the media (ICE) connection failed.\r\n    // This should go to the RTC module.\r\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\r\n\r\n    // Designates an event indicating that the call has been migrated to a different\r\n    // bridge and that the client needs to be restarted for a successful transition.\r\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\r\n\r\n    /**\r\n     * Designates an event indicating connection status changes.\r\n     */\r\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\r\n\r\n    // Designates an event indicating that the display name of a participant\r\n    // has changed.\r\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\r\n\r\n    /**\r\n     * Chat room instance have been added to Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\r\n\r\n    /**\r\n     * Chat room instance have been removed from Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\r\n    ETHERPAD: 'xmpp.etherpad',\r\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\r\n    FOCUS_LEFT: 'xmpp.focus_left',\r\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\r\n\r\n    /**\r\n     * Event fired when 'transport-replace' Jingle message has been received,\r\n     * before the new offer is set on the PeerConnection.\r\n     */\r\n    ICE_RESTARTING: 'rtc.ice_restarting',\r\n\r\n    /**\r\n     * Event fired after the 'transport-replace' message has been processed\r\n     * and the new offer has been set successfully.\r\n     */\r\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\r\n\r\n    /**\r\n     * Designates an event indicating that we were kicked from the XMPP MUC.\r\n     * @param {boolean} isSelfPresence - whether it is for local participant\r\n     * or another participant.\r\n     * @param {string} actorJid - the jid of the participant who was initator\r\n     * of the kick.\r\n     * @param {?string} participantJid - when it is not a kick for local participant,\r\n     * this is the jid of the participant which was kicked.\r\n     */\r\n    KICKED: 'xmpp.kicked',\r\n\r\n    // Designates an event indicating that our role in the XMPP MUC has changed.\r\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\r\n\r\n    /**\r\n     * Event fired when the unique meeting id is set.\r\n     */\r\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\r\n\r\n    // Designates an event indicating that an XMPP message in the MUC was\r\n    // received.\r\n    MESSAGE_RECEIVED: 'xmpp.message_received',\r\n\r\n    // Designates an event indicating that an invite XMPP message in the MUC was\r\n    // received.\r\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\r\n\r\n    // Designates an event indicating that a private XMPP message in the MUC was\r\n    // received.\r\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\r\n\r\n    // Designates an event indicating that a bot participant type had changed\r\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\r\n\r\n    // Designates an event indicating that the XMPP MUC was destroyed.\r\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\r\n\r\n    // Designates an event indicating that we have joined the XMPP MUC.\r\n    MUC_JOINED: 'xmpp.muc_joined',\r\n\r\n    // Designates an event indicating that a participant joined the XMPP MUC.\r\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\r\n\r\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\r\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\r\n\r\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\r\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\r\n\r\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\r\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\r\n\r\n    // Designates an event indicating that local participant left the muc\r\n    MUC_LEFT: 'xmpp.muc_left',\r\n\r\n    // Designates an event indicating that the MUC role of a participant has\r\n    // changed.\r\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\r\n\r\n    // Designates an event indicating that the MUC has been locked or unlocked.\r\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\r\n\r\n    // Designates an event indicating that the MUC members only config has changed.\r\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have audio muted (or unmuted).\r\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have video muted (or unmuted).\r\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\r\n\r\n    // Designates an event indicating that the video type (e.g. 'camera' or\r\n    // 'screen') for a participant has changed.\r\n    // Note: currently this event fires every time we receive presence from\r\n    // someone (regardless of whether or not the \"video type\" changed).\r\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\r\n\r\n    /**\r\n     * Indicates that the features of the participant has been changed.\r\n     */\r\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\r\n    PASSWORD_REQUIRED: 'xmpp.password_required',\r\n\r\n    /**\r\n     * Indicates that phone number changed.\r\n     */\r\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\r\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\r\n    PRESENCE_STATUS: 'xmpp.presence_status',\r\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\r\n\r\n    // xmpp is connected and obtained user media\r\n    READY_TO_JOIN: 'xmpp.ready_to_join',\r\n\r\n    /**\r\n     * Indicates that recording state changed.\r\n     */\r\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\r\n\r\n    // Designates an event indicating that we received statistics from a\r\n    // participant in the MUC.\r\n    REMOTE_STATS: 'xmpp.remote_stats',\r\n\r\n    /**\r\n     * Indicates that the offer / answer renegotiation has failed.\r\n     */\r\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\r\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\r\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\r\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\r\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\r\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\r\n\r\n    /**\r\n     * Indicates that max users limit has been reached.\r\n     */\r\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\r\n\r\n    // Designates an event indicating that we sent an XMPP message to the MUC.\r\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\r\n\r\n    // Designates an event indicating that we sent a private XMPP message to\r\n    // a specific user of the muc.\r\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\r\n\r\n    /**\r\n     * Event fired when we do not get our 'session-accept' acknowledged by\r\n     * Jicofo. It most likely means that there is serious problem with our\r\n     * connection or XMPP server and we should reload the conference.\r\n     *\r\n     * We have seen that to happen in BOSH requests race condition when the BOSH\r\n     * request table containing the 'session-accept' was discarded by Prosody.\r\n     * Jicofo does send the RESULT immediately without any condition, so missing\r\n     * packets means that most likely it has never seen our IQ.\r\n     */\r\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\r\n\r\n    /**\r\n     * Event fired when speaker stats update message is received.\r\n     */\r\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\r\n\r\n    /**\r\n     * Event fired when conference creation timestamp is received.\r\n     */\r\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\r\n\r\n    /**\r\n     * Event fired when we receive a message for AV moderation approved for the local participant.\r\n     */\r\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\r\n\r\n    /**\r\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\r\n    */\r\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\r\n\r\n    /**\r\n     * Event fired when we receive a message for AV moderation.\r\n     */\r\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\r\n\r\n    /**\r\n     * Event fired when the moderation enable/disable changes.\r\n     */\r\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\r\n\r\n    /**\r\n     * Event fired when we receive message that a new jid was approved.\r\n     */\r\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\r\n\r\n    /**\r\n     * Event fired when we receive message that a new jid was approved.\r\n     */\r\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\r\n\r\n    // Designates an event indicating that we should join the conference with\r\n    // audio and/or video muted.\r\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\r\n\r\n    // Designates an event indicating that the subject of the XMPP MUC has\r\n    // changed.\r\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\r\n\r\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\r\n    // suspending detected\r\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\r\n\r\n    /**\r\n     * Notifies for transcription status changes. The event provides the\r\n     * following parameters to its listeners:\r\n     *\r\n     * @param {String} status - The new status.\r\n     */\r\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\r\n\r\n    /**\r\n     * Event fired when 'transport-info' with new ICE candidates is received.\r\n     */\r\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\r\n\r\n    /**\r\n     * Indicates that video SIP GW state changed.\r\n     *\r\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\r\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\r\n     */\r\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\r\n\r\n    /**\r\n     * Indicates that video SIP GW Session state changed.\r\n     * The statuses are any of the following statuses:\r\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\r\n     * {@see VideoSIPGWConstants}\r\n     *\r\n     * @param {options} event - {address, oldState, newState, displayName}.\r\n     */\r\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\r\n        'xmpp.videoSIPGWSessionStateChanged',\r\n\r\n    // Designates an event indicating that the local ICE connection state has\r\n    // changed.\r\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\r\n\r\n    /**\r\n     * Event which is emitted when the body in an XMPP message in the MUC\r\n     * contains JSON\r\n     */\r\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\r\n};\r\n\r\nmodule.exports = XMPPEvents;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","AUTHENTICATION_REQUIRED","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","JitsiTrackErrors","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","window","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","length","DummyLocalStorage","EventEmitter","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","key","n","serialize","JSON","stringify","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","i","localStorageContent","logger","getLogger","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","static","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","result","parse","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","value","suspend","isLocalStatsSupported","resume","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","disconnect","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","participantId","getParticipantId","width","height","userResolutions","userFramerates","codecDesc","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","init","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","defineProperty","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","stopLocalStats","startCallStats","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","_onIceConnectionFailed","createFocusLeftEvent","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","roomjid","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","_onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearTimeout","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","participants","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","setTimeout","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","kJitsiE2EE","Symbol","E2EEcontext","baseUrl","ljm","document","querySelector","idx","src","lastIndexOf","workerBlob","Blob","blobUrl","URL","createObjectURL","_worker","Worker","onerror","cleanup","operation","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","writable","handleSender","sender","senderStreams","setKey","keyIndex","v4","Listenable","removeEventListener","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","async","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","E2EEncryption","_conferenceJoined","_enabled","_enabling","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","testing","disableE2EE","enableEncodedTransformSupport","isEnabled","initSessions","setLocalParticipantProperty","_restartMediaSessions","_generateKey","index","updateKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","localTracks","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","findReceiverForTrack","findSenderForTrack","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","sort","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","x","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","_leaveLobbyRoom","leave","setLobbyRoomJid","joined","email","roomName","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","avatar","j","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","text","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","myroomjid","replaceParticipant","presMap","presHandlers","_removeConnListeners","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","deploymentInfo","userRegion","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","user","tag","groupInfo","group","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","flags","_sourceNameSignaling","sourceNameSignaling","isSourceNameSignalingEnabled","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","toLowerCase","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","map","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","semantics","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","k","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","sourceName","FeatureFlags","msid","s","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","jingle","groups","contents","content","jingle2media","sctp","streamCount","payloadType","setAttribute","__","parameter","hdrExt","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","kill","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","initiatorJid","responderJid","JingleSessionState","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SignalingLayer","getSSRCOwner","getPeerMediaInfo","owner","SignalingLayerImpl","ssrcOwners","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","setSSRCOwner","TypeError","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","addTrack","all","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","RTCSessionDescription","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoDegradationPreference","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","close","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","remoteTracks","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_createSourceExtension","sourceCompactJson","$build","_createSsrcGroupExtension","ssrcGroupCompactJson","_expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","_getOrCreateRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","appendChild","description","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v2Err","v1Res","v1Err","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","endsWith","region","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","sync","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","jsonString","users","created_timestamp","authenticateAndUpgradeRole","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","once","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","onclose","jsonObject","DEFAULT_CONSTRAINTS","ideal","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","element","srcObject","arguments","isDeviceChangeAvailable","getAudioOutputDevice","ex","pcConstraints","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","_getUserMedia","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","r","cameraDeviceId","facingMode","CameraFacingMode","micDeviceId","assign","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","MediaStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","trackId","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","getSettings","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","removeTrack","cont","_queueSetMuted","unmute","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","concat","bundle","mids","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLine","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","mediaSection","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","firstLetterOfMediaType","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","SIM_LAYER_RIDS","TPCUtils","videoBitrates","VP8","localStreamEncodingsConfig","maxBitrate","high","low","scaleResolutionDownBy","standard","_findTransceiver","transceiver","getTransceivers","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","sendEncodings","addTransceiver","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","localSSRCs","_addedStreams","setEncodings","parameters","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","HD_BITRATE","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","Simulcast","numOfLayers","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","senderVideoMaxHeight","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","results","names","_processStat","stat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","getRemoteTracks","remoteTrackIds","getReceivers","getSynchronizationSources","tracks","getLocalVideoTrack","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","toUpperCase","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","existingTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedTracks","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingLowFpsScreen","_isSharingScreen","DESKTOP","_mungeCodecOrder","codecPreference","VP9","bitrates","hdBitrate","limit","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","getSenders","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","localVideoTrack","videoSender","preference","degradationPreference","presenterEnabled","CAMERA","scaleFactor","layer","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","newHeight","encodingsEnabledState","ldStreamIndex","highResolutionEncoding","sendTones","tones","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","mungeLocalDescription","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","usernameFragment","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","sdpSemantics","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","pos","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","target","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","SendVideoController","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","_getActiveMediaSession","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","ComponentsVersions","addCommandListener","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","CONFERENCE_PROPERTIES_CHANGED","_sendConferenceJoinAnalyticsEvent","MEETING_ID_SET","receiveVideoController","sendVideoController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","_fireMuteChangeEvent","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","RangeError","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","removePromises","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","pause","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","perf","toggleE2EE","setEnabled","isLobbySupported","disableLobby","joinLobby","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","metadata","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","Logger","getAnalyticsAttributesFromOptions","video_requested","JitsiMeetJS","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","originalStream","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_hasLeft","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","ondataavailable","dataEvent","recorderToRemove","blob","style","click","revokeObjectURL","getRecordingResults","getFileType","wordArray","SphinxService","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","audioRecorder","transcriptionService","counter","transcription","lineLength","blobCallBack","offset","getUTCMilliseconds","wordObject","begin","end","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","TranscriptionService","verify","formatResponse","audioBlob","Word","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","objects","filler","getWord","getBeginTime","getEndTime","getTokenAuthUrl","urlPattern","roleUpgrade","dest","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","arr","randomHexDigit","randomHexString","len","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","onload","parentNode","insertBefore","string","char","charCodeAt","abs","generateUsername","grammar","reg","o","format","u","z","subtype","sessionConfig","raddr","maxMessageSize","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","paused","formatRegExp","formatStr","arg","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","order","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","iterator","_map","_keys","nextTick","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","queue","worker","concurrency","_insert","q","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","dir","memoize","hasher","queues","memoized","unmemoized","unmemoize","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","num","output","enumerable","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","model","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","currentScript","thrownErr","near","far","ReflectOwnKeys","R","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","isFunction","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","nodeValue","copyElement","_i","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","removeAttribute","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","F","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","nonce","Hi","U","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","firstChild","startString","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","val","compactObject","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","JSON_MESSAGE_RECEIVED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","g","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}